Xapian-core 1.2.17 (2014-01-29):

API:

* Enquire::set_sort_by_relevance_then_value() and
  Enquire::set_sort_by_relevance_then_key(): Fix sense of reverse parameter.
  Reported by "boomboo" on IRC.

* BM25Weight: Fix case where (k1 == 0 || b == 0) but k2 != 0.  Reported by
  "boomboo" on IRC.

* Unicode::tolower(): Fix to give correct results for U+01C5, U+01C8, U+01CB,
  and U+01F2 (previously these were left unchanged).

testsuite:

* Automatically probe for and hook in eatmydata to the testsuite using the
  wrapper script it now includes.

* Fix apitest to build when brass, chert or flint are disabled.

brass backend:

* Fix handling of invalid block sizes passed to Xapian::Brass::open() - the
  size gets fixed as documented, but the uncorrected size was passed to the
  base file (and abort() was called if 0 was passed).

* Validate "dir_end" when reading a block.  (fixes #592)

chert backend:

* Fix handling of invalid block sizes passed to Xapian::Chert::open() - the
  size gets fixed as documented, but the uncorrected size was passed to the
  base file (and abort() was called if 0 was passed).

* Validate "dir_end" when reading a block.  (fixes #592)

flint backend:

* Fix handling of invalid block sizes passed to Xapian::Flint::open() - the
  size gets fixed as documented, but the uncorrected size was passed to the
  base file (and abort() was called if 0 was passed).

* Validate "dir_end" when reading a block.  (fixes #592)

build system:

* configure: Improve reporting of GCC version.

* Use -no-fast-install on platforms where -no-install causes libtool to emit a
  warning.

* docs/Makefile.am: Fix handling of MAINTAINER_NO_DOCS.

* Include UnicodeData.txt and the script to generate the unicode tables from
  it.

documentation:

* postingsource.rst: Clarify a couple of points (reported by "vHanda" on IRC).

portability:

* Protect the ValueIterator::check() method against Mac OS X SDK headers
  which define a check() macro.

* Fix warning from xlC compiler.

* Avoid use of grep -e in configure, as /usr/bin/grep on Solaris doesn't
  support -e.

* Fix check for flags which might be needed for ANSI mode for compilers called
  'cxx'.

* configure: Improve handling of Sun's C++ compiler - trick libtool into not
  adding -library=Cstd, and prefer -library=stdcxx4 if supported.  Explicitly
  add -library=Crun which seems to be required, even though the documentation
  suggests otherwise.

Xapian-core 1.2.16 (2013-12-04):

API:

* PositionIterator,PostingIterator,TermIterator,ValueIterator: Don't segfault
  if skip_to() or check() is called on an iterator which is already at_end().
  Reported by David Bremner.

* ValueCountMatchSpy: get_description() on a default-constructed
  ValueCountMatchSpy object no longer fails when xapian-core is built with
  --enable-log.

* ValueCountMatchSpy: get_total() on a default-constructed ValueCountMatchSpy
  object now returns 0 rather than segfaulting.

testsuite:

* If -v/--verbose is specified more than once to a test program, show the
  diagnostic output for passing tests as well as failing/skipped ones.

* queryparsertest: Change qp_scale1 to time 5 repetitions of the large query to
  help average out variations.

* queryparsertest: Add test coverage for explicit synonym of a term with a
  prefix (e.g. ~foo:search).

* apitest: Remove code from registry* testcases which tries to test the
  consequences of throwing an exception from a destructor - it's complex to
  ensure we don't leak memory while doing this (it seems GCC doesn't release
  the object in this case, but clang does), and it's generally frowned upon,
  plus C++11 makes destructors noexcept by default.

* Fix "make check" to actually removed cached databases first, as is
  intended.

brass backend:

* When moving a cursor on a read-only table, check if the block we want is in
  the internal cursor.  We already do this for a writable table, as it is
  necessary for correctness, but it's a cheap check and may avoid asking the
  OS for a block we actually already have.

* Correctly report the database as closed rather than 'Bad file descriptor'
  in certain cases.

* Reuse a cursor for reading values from valuestreams rather than creating
  a new one each time.  This can dramatically reduce the number of blocks
  redundantly reread when sorting by value.  The rereads will generally get
  served from VM cache, but there's still an overhead to that.

chert backend:

* When moving a cursor on a read-only table, check if the block we want is in
  the internal cursor.  We already do this for a writable table, as it is
  necessary for correctness, but it's a cheap check and may avoid asking the
  OS for a block we actually already have.

* Correctly report the database as closed rather than 'Bad file descriptor'
  in certain cases.

* Reuse a cursor for reading values from valuestreams rather than creating
  a new one each time.  This can dramatically reduce the number of blocks
  redundantly reread when sorting by value.  The rereads will generally get
  served from VM cache, but there's still an overhead to that.

flint backend:

* When moving a cursor on a read-only table, check if the block we want is in
  the internal cursor.  We already do this for a writable table, as it is
  necessary for correctness, but it's a cheap check and may avoid asking the
  OS for a block we actually already have.

* Correctly report the database as closed rather than 'Bad file descriptor'
  in certain cases.

build system:

* Compress source tarballs with xz instead of gzip.

* Split XAPIAN_LIBS out of XAPIAN_LDFLAGS so that -l flags for libraries
  configure detects are needed appear after -L flags specified by the user
  that may be needed to find such libraries.  (fixes#626)

* XO_LIB_XAPIAN now handles the user specifying a relative path in
  XAPIAN_CONFIG, e.g.: "./configure XAPIAN_CONFIG=../xapian-core/xapian-config"

* Adjust XO_LIB_XAPIAN to strip _gitNNN suffix from snapshot versions.

* configure: Handle git snapshot naming when calculating REVISION.

* configure: Enable -fshow-column for GCC - things like vim's quickfix mode
  will then jump to the appropriate column for a compiler error or warning, not
  just the appropriate line.

* configure: Report GCC version in configure output.

documentation:

* The API documentation shipped with the release is now generated with
  doxygen 1.8.5 instead of 1.5.9, which is most evident in the different
  HTML styling newer doxygen uses.

* Document how Utf8Iterator handles invalid UTF-8 in API documentation.

* Improve how descriptions of deprecated features appear in the API
  documentation.

* docs/remote_protocol.rst: Correct error in documentation of REPLY_DOCDATA
  message.

* docs/overview.rst: Correct documentation for how to specify "prog" remote
  databases in stub files.

* Direct users to git in preference to SVN - we'll be switching entirely in
  the near future.

tools:

* xapian-chert-update: Fix -b to work rather than always segfaulting (reported
  in http://bugs.debian.org/716484).

* xapian-chert-update: The documented alias --blocksize for -b has never
  actually been supported, so just drop mentions of it from --help and the man
  page.

* xapian-check:

  + Fix chert database check that first docid in each doclength chunk is more
    than the last docid in the previous chunk - previously this didn't actually
    work.

  + Fix database check not to falsely report "position table: Junk after
    position data" whenever there are 7 unused bits (7 is OK, *more* than 7
    isn't).

  + Fix to report block numbers correctly for links within the B-tree.

  + If the METAINFO key is missing, only report it once per table.

  + Fix database consistency checking to always open all the tables at the same
    revision - not doing this could lead to false errors being reported after a
    commit interrupted by the process being killed or the machine crashing.
    Reported by Joey Hess in http://bugs.debian.org/724610

examples:

* quest: Add --check-at-least option.

portability:

* configure: clang doesn't support -Wstrict-null-sentinel or -Wlogical-op, so
  don't pass it these options.

* Fix build errors and warnings with mingw.

* Suppress "unused local typedef" warnings from GCC 4.8.

* If the compiler supports C++11, use static_assert to implement
  CompileTimeAssert.

* tests/zlib-vg.c: Fix two warnings when compiled with clang.

* Fix failure when built with -D_GLIBCXX_DEBUG - we were modifying the top()
  element of a heap before calling pop(), such that the heap comparison
  operation (which is called when -D_GLIBCXX_DEBUG is on to verify the heap is
  valid) would read off the end of the data.  In a normal build, this issue
  would likely never manifest.

* configure: When generating ABI compatibility checks in xapian/version.h, pass
  $CXXFLAGS and $CPPFLAGS to $CXXCPP as they could contain options which affect
  the ABI (such as -fabi-version for GCC).  (Fixes #622)

* Microsoft GUIDs in binary form have reversed byte order in the first three
  components compared to standard UUIDs, so the same database would report a
  different UUID on Windows to on other platforms.  We now swap the bytes to
  match the standard order.  With this fix, the UUIDs of existing databases
  will appear to change on Windows (except in rare "palindronic" cases).

* Fix a couple of issues to get Xapian to build and work on AIX.

* common/safeuuid.h: Remove bogus take-address-of from uuid handling code for
  NetBSD and OpenBSD.

* Under cygwin, use cygwin_conv_path() if using a new enough cygwin version,
  rather than the now deprecated cygwin_conv_to_win32_path().  Reported by
  "Haroogan" on the xapian-devel mailing list.

* common/safeuuid.h: Add missing '#include <cstdlib>' and qualify free with std.

* Fix 'unused label' warning when chert backend is disabled.

* xapian.h: Add check for Wt headers being included before us and defining
  'slots' as a macro - if they are, give a clear error advising how to work
  around this (previously compilation would fail with a confusing error).

debug code:

* Fix assertion failure for when an OrPostList decays to an AndPostList - the
  ordering of the subqueries by estimated termfreq may not be the same as it
  was when the OrPostList was constructed, as the subqueries may themselves
  have decayed.  Reported by Michel Pelletier.

* Fix -Wcast-qual warning from GCC 4.7 when configured with --enable-log.

Xapian-core 1.2.15 (2013-04-16):

API:

* QueryParser/TermGenerator: Don't include CJK codepoints which are
  punctuation in N-grams.

* TermGenerator: Fix bug where we failed to generate the first bigram
  from the second sequence of N-grammable CJK characters in a piece of text.

brass backend:

* Call fdatasync()/fsync() when creating the "iambrass" file.

chert backend:

* Call fdatasync()/fsync() when creating the "iamchert" file.

flint backend:

* Call fdatasync()/fsync() when creating the "iamflint" file.

build system:

* XO_LIB_XAPIAN now handles the user specifying XAPIAN_CONFIG without a path,
  for example: ./configure XAPIAN_CONFIG=xapian-config-1.3

tools:

* delve: If -v is specified more than once, show even more info in some cases.

portability:

* Fix warning due to needlessly casting away const-ness in debug logging.

* Fix pointer truncation bug in lemon parser generator, which probably affects
  regenerating the query parser on WIN64.

debug code:

* Fix to build when configured with --enable-log.

Xapian-core 1.2.14 (2013-03-14):

API:

* MSet::get_document(): Don't cache retrieved Document objects unless they
  were requested with fetch().  This avoids using a lot of memory when many
  MSet entries are retrieved.  (Fixes #604)

testsuite:

* apitest: Improved test coverage.

matcher:

* Check if a candidate document has at least the minimum weight needed
  before checking positional information, which speeds up slow phrase
  searches (partly addresses #394).

brass backend:

* Fix multipass compaction not to damage document values, and to merge the
  database stats correctly.  (fixes #615)

chert backend:

* Fix multipass compaction not to damage document values, and to merge the
  database stats correctly.  (fixes #615)

flint backend:

* Fix multipass compaction bug.  (fixes #615)

tools:

* xapian-replicate:

  + Fix handling of delays between replication events - the subtraction of the
    target time and the current time was reversed, so we wouldn't sleep when
    before the deadline, but would sleep after it for the amount we'd missed it
    by.

  + On Microsoft Windows, we no longer sleep for more than 43 years if the
    target time for a replication event had already passed.  (Fixes #472)

portability:

* matcher/queryoptimiser.cc: Need <functional> for mem_fun().

* tests/harness/testsuite.cc: Don't provide explicit template types to
  make_pair - it isn't useful, and breaks with C++11.  Fixes build error with
  MSVC2012.

* examples/quest.cc: Fix to build with Sun Studio 12 compiler.  (ticket#611)

Xapian-core 1.2.13 (2013-01-09):

API:

* TermGenerator: Add new method TermGenerator::set_max_word_length() to allow
  this limit to be adjusted by the user.

* QueryParser: Implicitly close any unclosed brackets at the end of the query
  string.  Patch from Sehaj Singh Kalra.

* DateValueRangeProcessor: Add extra constructor overloaded form so that in
  DateValueRangeProcessor(1, "date:"), the const char * gets interpreted as
  std::string rather than bool.

testsuite:

* apitest: Assorted test coverage improvements.

* When reporting valgrind errors, skip any warnings before the error in the
  valgrind log.

matcher:

* Improved fix for #590 - count all matching LeafPostList objects with a Weight
  object rather than trying to prune at the MultiAndPostList level based on
  max_wt (if wdf is always zero for a term, BM25 gives max_wt of 0, which lead
  to us never counting that subquery.

* Fix calculation of 0.0/0.0 in some cases.  This then got used as a minimum
  weight, but it seems this gives -nan (at least on x86-64 Linux) so it may
  have been harmless in practice.

* We no longer use the highest weighted MSet entry to calculate percentages, so
  remove code which finds it.

brass backend:

* Close excess file handles before we get the fcntl lock, which avoids the
  lock being released again if one is open on the lock file.  Notably this
  avoids a situation where multiple threads in the same process could succeed
  in locking a database concurrently.

chert backend:

* Close excess file handles before we get the fcntl lock, which avoids the
  lock being released again if one is open on the lock file.  Notably this
  avoids a situation where multiple threads in the same process could succeed
  in locking a database concurrently.

flint backend:

* Close excess file handles before we get the fcntl lock, which avoids the
  lock being released again if one is open on the lock file.  Notably this
  avoids a situation where multiple threads in the same process could succeed
  in locking a database concurrently.

remote backend:

* Improve the UnimplementedError message for a MatchSpy subclass which doesn't
  implement name() so it's clearer that it is this particular subclass which
  can't be used remotely, rather than all MatchSpy objects.

build system:

* The build system is now generated with automake 1.11.6 rather than 1.11.1,
  which fixes a security issue in "make distcheck" (not something users will
  usually run, but it seems worth addressing).

* Use user-specified LIBS for configure tests, which is what you'd expect to
  happen, and provides a way for the user to tell configure where to find
  library functions which configure can't find for itself.

* INCLUDES is now deprecated in automake, so use AM_CPPFLAGS instead.

* Test coverage rules now assume lcov 1.10 which allows them to be simpler
  and not to require a patched version of lcov.

documentation:

* valueranges.html: Update documentation to reflect change in Xapian 1.1.2 -
  DateValueRangeProcessor and StringValueRangeProcessor now support a prefix or
  suffix.

* Clarify that the "reverse" parameter of set_sort_by_relevance_then_value()
  and set_sort_by_relevance_then_key() only affects the ordering of the
  value/key part of the sort.

* docs/quickstart.html: Fix seriously outdated statement that Xapian doesn't
  create the database directory - that changed in 0.7.2 (released 2003-07-11).

* HACKING: Try to make it clearer we're looking for a dual-licence on submitted
  patches.

tools:

* xapian-replicate:

  + Add a --full-copy option to force a full copy to be sent.  (ticket#436)

  + Add --quiet option, and be a little more verbose by default.

  + Allow files > 32G to be be copied by replication.

  + Fix "if (fd > 0)" tests in some replication code to be "if (fd >= 0)".
    In practice this is unlikely to actually have caused problems since
    stdin is typically still open and using fd 0.

  + Simplify how we open the .DB file on the replication slave to just call
    open() once with O_CREAT, rather than once without, than stat() if that
    fails, and then again with O_CREAT|O_TRUNC if stat() doesn't show an
    ordinary file exists.

examples:

* quest:

  + New --flags command line option to allow setting arbitrary QueryParser
    flags.

  + Align option descriptions in --help output, and make the initial letter of
    such descriptions consistently lowercase.

portability:

* Fix testsuite harness to compile with GCC 4.7.

* On platforms with the F_MAXFD fcntl but without closefrom(), we were failing
  to close the highest numbered open fd in our closefrom() replacement.

* Our closefrom() replacement on Linux now works around valgrind not hiding
  some extra fds it has open, but then complaining if we try to close them.

+ Pass O_BINARY when opening replication related files in some cases where we
  weren't before, which will probably help solve ticket #472.

* configure: socketpair() needs -lnetwork on Haiku.

* Micro-optimisation in Unicode handling - GCC doesn't currently optimise the
  arithmetic shift right idiom we use, but it documents that signed right shift
  does sign extension so we now just use a right shift for GCC.

debug code:

* Preserve errno over debug logging calls, so they can safely be added to code
  which expects errno not to change.

Xapian-core 1.2.12 (2012-06-27):

build system:

* 1.2.11 had its library version information incorrectly set.  This resulted in
  the shared library having an incorrect SONAME - e.g. on Linux,
  libxapian.so.21 instead of libxapian.so.22.  This release has been made to
  fix this problem.

documentation:

* AUTHORS: Add the GSoC students.

Xapian-core 1.2.11 (2012-06-26):

API:

* Add new QueryParser::STEM_ALL_Z stemming strategy, which stems all terms and
  adds a Z prefix.  (Patch from Sehaj Singh Kalra, fixes ticket#562)

* Add TermGenerator::set_stemming_strategy() method, with strategies which
  correspond to those of QueryParser.  Based on patch from Sehaj Singh Kalra,
  with some tweaks for adding term positions in more cases.  (Fixes ticket#563)

* Correct "BM25Weight" to "TradWeight" in exception message from TradWeight.

* We were failing to call init() for user-defined Weight objects providing the
  term-independent weight.  These now get called with init(0.0).

* Xapian::Auto::open_stub() now throws a Xapian::DatabaseOpeningError exception
  if the stub file can't be opened.  Previously we failed to check for this
  condition, which resulted in us treating the file as empty.

testsuite:

* When the testsuite is using valgrind, we used to run remote servers under
  valgrind too (but with --tool=none) to get consistent behaviour as valgrind's
  emulation of x87 excess precision isn't exact.  Now we only do this if x87 FP
  instructions are actually in use (which means x86 architecture and configure
  run with --disable-sse).

* Make sure XAPIAN_MAX_CHANGESETS gets unset after replication testcases which
  set it, so further testcases don't waste time generating changesets.

* Improved test coverage (including more tests for closed databases -
  ticket#337).

brass backend:

* After closing the database, methods which try to use the termlist would throw
  FeatureUnavailableError with message "Database has no termlist", assuming
  that the termlist table not being open meant it wasn't present.  Fix to check
  if the postlist_table is open to determine which case we're in.

chert backend:

* After closing the database, methods which try to use the termlist would throw
  FeatureUnavailableError with message "Database has no termlist", assuming
  that the termlist table not being open meant it wasn't present.  Fix to check
  if the postlist_table is open to determine which case we're in.

inmemory backend:

* Check if the database is closed in metadata_keys_begin() for InMemory
  Databases.

build system:

* xapian-config: Don't interpret a missing .la file as meaning that we only
  have static libraries.

documentation:

* Fix API documentation for Query constructors - both XOR and ELITE_SET can
  take any number of subqueries, not only exactly two.

* Backport missing API documentation comments for operator++ and operator*
  methods or PositionIterator, PostingIterator and TermGenerator.

* docs/replication.rst: Update documentation - since 1.2.5, the value of
  XAPIAN_MAX_CHANGESETS determines how many changesets we keep.

* docs/admin_notes.rst: Correction - we don't "create a lock file", we "lock a
  file".

* Fix API documentation for TradWeight constructor - "k1" should be "k".

portability:

* configure: Overhaul handling of compilers which pretend to be GCC.  Clang
  is now detected, and we only pass it warning flags it actually understands.
  And we now check for symbol visibility support with Intel's compiler.

* configure: Solaris automatically pulls in library dependencies, so set
  link_all_deplibs_CXX=no there.

* configure: We now check -Bsymbolic-functions for all compilers.

* configure: Enable -Wdouble-promotion for GCC >= 4.6.

* Pass -ldl last when compiling zlib-vg.so, as that seems to be needed on
  Ubuntu 12.04.

* Fix incorrect use of "delete" which should be "delete []".  This is
  undefined behaviour in C++, though the type is POD, so in practice this
  probably worked OK on many platforms.

* In BM25Weight when k1 or b is zero (not the default), we used to multiply
  an uninitialised double by zero, which is undefined behaviour, but in
  practice will often give zero, leading to the desired results.

* xapian.h: Add check for Qt headers being included before us and defining
  'slots' as a macro - if they are, give a clear error advising how to work
  around this (previously compilation would fail with a confusing error).

Xapian-core 1.2.10 (2012-05-09):

API:

testsuite:

* apitest: Extend tradweight1 to test that TradWeight(0) means that wdf and
  document length don't affect the weight of a term.

* termgentest: Check that TermGenerator discards words > 64 bytes.

matcher:

* Don't count unweighted subqueries of MultiAndPostList in percentage
  calculations, as OP_FILTER maps to MultiAndPostList now.  (ticket#590)

brass backend:

* When compacting, if the output database is empty, don't write out a metainfo
  tag.  Take care not to divide by zero when computing the percentage size
  change for a table.

chert backend:

* When compacting, if the output database is empty, don't write out a metainfo
  tag.  Take care not to divide by zero when computing the percentage size
  change for a table.

documentation:

* API documentation:

 + Note version when Database::close() was added.

 + Fix switched lower and upper in API documentation for Weight methods
   get_doclength_lower_bound() and get_doclength_upper_bound().  Correct
   maximum to minimum in get_doclength_lower_bound() comment and note that this
   excludes zero length documents.  Fix "An lower" to "A lower".

* docs/admin_notes.html: Mention that postlist and termlist tables also hold
  value info for chert.  Mention that xapian-chert-update was removed in 1.3.0.
  Mention that you need to use copydatabase from 1.2.x to convert flint to
  chert.

* HACKING: Update section on patches to mention git (git diff and git
  format-patch), and using "-r" with normal diff, and also that ptardiff offers
  a nice way to diff against an unpacked tarball.

debug code:

* Fix use of AssertEq() on NULL, which doesn't compile, at least with recent
  GCC.

Xapian-core 1.2.9 (2012-03-08):

API:

* QueryParser: Fix FLAG_AUTO_SYNONYMS not to enable auto multi-word synonyms
  too (but in a different way to trunk so as to not break the ABI).

matcher:

* Fix issue with running AND, OR and XOR queries against a database with no
  documents in it - this was leading to a divide by zero, which led to
  MSet::get_matches_estimated() reporting 2147483648 on i386.

build system:

* Remove configure's --with-stlport and --with-stlport-compiler options, as
  they don't allow you to actually specify what you need to (at least to use
  the Debian STLport package), and instead document what to pass to configure
  to enable building with STLport (though it seems to no longer be actively
  maintained, and the debug mode (which is probably the most interesting
  feature now) doesn't seem to work on Debian stable).

documentation:

* Document that OP_ELITE_SET with non-term subqueries might pick subqueries
  which don't match anything.  Closes ticket#49.

* Document that you can define a static operator delete method in your subclass
  if deallocation needs to be handled specially.  (Closes ticket#554)

* Assorted minor documentation improvements.

portability:

* Address new warnings from GCC 4.6.

* Fix argument order when linking xapian-check to fix mingw build.
  (ticket#567)

* Add some missing explicit header includes to fix build with STLport.

Xapian-core 1.2.8 (2011-12-13):

API:

* Add support to TermGenerator and QueryParser for indexing and searching CJK
  text using n-grams.  Currently this is only enabled when the environmental
  variable XAPIAN_CJK_NGRAM is set to a non-empty value.

documentation:

* Add link from index page to apidoc.pdf.

* quickstart.html: Correct link which was to quickstartsearch.cc.html but
  should be to quickstartindex.cc.html.

* overview.html,quickstart.html: Fix several factual errors.

* API documentation:

  + Improve documentation comments for several methods.

  + Add documentation for function parameters which didn't have it.

  + Remove bogus paragraph in WritableDatabase::replace_document()
    documentation comment which had been cut and pasted from delete_document()
    documentation comment.  (Fixes ticket#579)

  + Explicitly document which value slot numbers are valid.  (Fixes ticket#555)

  + Escape < and > in doxygen comments so "<foo>" doesn't get eaten by doxygen.

portability:

+ Some fixes for warnings when cross-compiling to mingw.

* tests/soaktest/soaktest.cc: With Sun's compiler, random() and srandom()
  aren't in <cstdlib> so we need to use <stdlib.h> instead.

Xapian-core 1.2.7 (2011-08-10):

API:

* Document objects now track whether any document positions have been modified
  so that replacing a modified document can completely skip considering
  updating positions if none have changed.  Currently the flint, chert, and
  brass backends implement this optimisation.  A common case this speeds up is
  adding and/or removing boolean filter terms to/from existing documents - for
  example this gives an 18% speedup for adding tags in notmuch.

testsuite:

* Make sure that perftest isn't run with libeatmydata preloaded, as making
  fsync() a no-op makes performance tests rather bogus.

remote backend:

* Remove unnecessary call to reopen() in the remote servers in a case where
  either we had just called it or we are using a writable database and so
  reopen() doesn't do anything.

build system:

* configure: -Wshadow gives bogus warnings with 4.0 (at least on Mac OS X), so
  disable it for GCC < 4.1 (like the comments already said we did!)

documentation:

* Improve the documentation comment for Database::close().  (ticket#504)

* Fix typo in documentation comment for Enquire constructor which reversed the
  intended sense (though the text was fairly obviously wrong before).

* Improve documentation of QueryParser::add_boolean_prefix()'s exclusive
  parameter to talk about terms and prefixes rather than values and fields
  (which was confusing since "document value" has a particular meaning in
  Xapian).

* docs/facets.html: Expand descriptions for indexing and finding facets.
  Fix errors in example code.

* docs/index.html: Add links to Omega and bindings documentation.

* docs/remote_protocol.html: Fixed typo which reversed the intended sense.

* xapian-check --help: Document that checking a whole database performs
  additional cross-checks between the tables.

* docs/admin_notes.html: Add note about xapian-chert-update.

* docs/deprecation.html: Note here that WritableDatabase::flush() is
  deprecated in favour of WritableDatabase::commit().

portability:

* Fix -Wshadow warnings from GCC 4.6.

* Fix warning from GCC 3.3.

debug code:

* Fix some problems with the templates used to implement output of parameters
  and return values in debug logging.

Xapian-core 1.2.6 (2011-06-12):

API:

* QueryParser:

  + Add new set_max_wildcard_expansion() method to allow limiting the number of
    terms a wildcard can expand to.  (ticket#350)

  + If default_op is OP_NEAR or OP_PHRASE then disable stemming of the terms,
    since we don't index positional information for stemmed terms by default.

* Spelling correction was failing to correctly handle words which had the same
  trigram in an even number of times.

testsuite:

* We now actually include the soaktest code in the release tarballs.

matcher:

* Eliminate some vector copies when handling phrase subqueries in the query
  optimiser.

brass backend:

* Kill the child process which holds the lock with SIGKILL as that can't be
  ignored, whereas SIGHUP can be in some cases.

chert backend:

* Kill the child process which holds the lock with SIGKILL as that can't be
  ignored, whereas SIGHUP can be in some cases.

flint backend:

* Kill the child process which holds the lock with SIGKILL as that can't be
  ignored, whereas SIGHUP can be in some cases.

documentation:

* The HTML documentation is now maintained in reStructured Text format.

* docs/queryparser.html: Document the precedence order of operators.

* docs/scalability.html: Bring up-to-date.

* docs/overview.html: Document "remote" in stub databases.

* docs/postingsource.html: Add PostingSource example.  (ticket#503)

* include/xapian/database.h: Add @exception InvalidArgumentError for
  Database::get_document() (ticket#542).

* Ship ChangeLog.0 in the tarball.

* Assorted minor improvements.

examples:

* examples/delve: Report has_positions().

* examples/simpleindex: Add short description to usage message.

portability:

* Fix to build for mingw.

Xapian-core 1.2.5 (2011-04-04):

API:

* Enquire::get_eset() now accepts a min_wt argument to allow the minimum wanted
  weight to be specified.  Default is 0, which gives the previous behaviour.

* QueryParser: Handle NEAR/<offset> and ADJ/<offset> where offset isn't an
  integer the same way at the end of the query as in the middle.

* Replication:

  + Only keep $XAPIAN_MAX_CHANGESETS changeset files when generating a new one
    (previously this variable only controlled if we generated changesets or
    not).  Closes ticket#278.

  + $XAPIAN_MAX_CHANGESETS is reread each time, rather than only when the
    database is opened.

  + If you build Xapian with DANGEROUS mode enabled, changeset files now
    actually have the appropriate flag set (the reader will currently throw an
    exception, but that's better than quietly handling them incorrectly).

testsuite:

* Compaction tests which generate stub files now close them before performing
  the actual compaction, to avoid issues on Microsoft Windows (ticket#525).

* Improve test coverage.

matcher:

* Fix memory leak if an exception is thrown during the match.

brass backend:

* Bumped format version number (we now store the oldest revision for which we
  might have a replication changeset).

* Optimise not to read the bitmaps from the base files when opening a database
  for reading (cross-port of equivalent change to chert).

* Optimise not to update doclength when it hasn't changed (cross-port of
  equivalent change to chert).

* If we try to delete an old base file and it isn't there, just continue rather
  than throwing an exception.  We wanted to get rid of it anyway, and it may be
  NFS issues telling us the wrong thing.  In particular, DatabaseCorruptError
  was rather a pessimistic assessment.

chert backend:

* Optimise not to read the bitmaps from the base files when opening a database
  for reading.

* Optimise not to update doclength when it hasn't changed.

* xapian-chert-update: Fix to handle larger databases, and databases which
  have values set.

* If we try to delete an old base file and it isn't there, just continue rather
  than throwing an exception.  We wanted to get rid of it anyway, and it may be
  NFS issues telling us the wrong thing.  In particular, DatabaseCorruptError
  was rather a pessimistic assessment.

flint backend:

* Optimise not to read the bitmaps from the base files when opening a database
  for reading (cross-port of equivalent change to chert).

* Optimise not to update doclength when it hasn't changed (cross-port of
  equivalent change to chert).

* If we try to delete an old base file and it isn't there, just continue rather
  than throwing an exception.  We wanted to get rid of it anyway, and it may be
  NFS issues telling us the wrong thing.  In particular, DatabaseCorruptError
  was rather a pessimistic assessment.

remote backend:

* xapian-tcpsrv: If we can't bind to the specified port because it is a
  privileged one, exit with code 77 (EX_NOPERM) to make it easier to
  automatically handle failure when starting the server from a script.

build system:

* Snapshots and releases are now bootstrapped with autoconf 2.68 and libtool
  2.4.

* configure: -Wstrict-null-sentinel was added in GCC 4.0.1 and so doesn't work
  with GCC 4.0.0.  For simplicity, only enable it for GCC >= 4.1.

documentation:

* INSTALL: Note how to build for a non-default arch on a multi-arch platform.

* include/xapian/enquire.h: Fix doxygen markup so alternative overloaded forms
  of Enquire::get_mset() appear in the API documentation.

* collapsing.html: Add missing document (written some time ago, but never
  actually added to builds).

* replication.html: Update documentation to make it clear that users shouldn't
  create the destination directory for replication themselves.

* docs/intro_ir.html: Update link to a paper.  Update text about book "to be
  published in 2008".

* docs/deprecation.html:

  + PostingSource now offers a replacement for Enquire::set_bias().

  + OmegaScript: $set{spelling,true} is now deprecated.

  + Add note about botched removal of Enquire.get_matching_terms from Python
    bindings (now fully removed).

  + Note removal of "if idx in mset" from Python bindings.

  + Deprecate MSet.items and ESet.items from Python bindings (ticket#531).

* docs/admin_notes.html: Update for 1.2.5.

* Updates to documentation of internals.

tools:

* xapian-replicate-server: Fix race condition between checking if a file
  exists and opening it to replicate it.

* xapian-replicate: Complain unless host name and port number are specified -
  previously these defaulted to an empty string and 0, which resulted in
  potentially confusing error messages.

* xapian-replicate: If --master isn't specified, default to DATABASE.

examples:

* quest: Report any spelling correction (requires the database contains
  spelling data of course).

* copydatabase: Add --no-renumber option.

portability:

* api/compactor.cc: Add missing header <ctime> for time() (ticket#530).

* api/compactor.cc: Use msvc_posix_rename() under __WIN32__ to atomically
  update stub file after compaction (ticket#525).

* Fix uninitialised variable warnings with gcc -O3.

* Eliminate std::string member of global static object used when compiled with
  --enable-log which was causes problems on Mac OS X.

* Fix some issues highlighted by clang++ warnings.

Xapian-core 1.2.4 (2010-12-19):

API:

* QueryParser:

  + Avoid a double free if Query construction throws an exception in a
    particular case.  Fixes ticket#515.

  + Allow phrase generators between a probabilistic prefix and the term itself
    (e.g. path:/usr/local).

  + The correct window size wasn't being set in some cases when default_op was
    set to OP_PHRASE.

* Enquire::get_mset():

  + Avoid pointlessly trying to allocate lots of memory if the first document
    requested is larger than the size of the database.

  + An empty query now returns an MSet with firstitem set correctly -
    previously firstitem was always 0 in this case.

* Document: Initialise docid to 0 when creating a document from
  scratch, as documented.

* Compactor:

  + Move the database compaction and merging functionality into this new class,
    and make xapian-compact a simple wrapper around this class.  (ticket#175)

  + Inputs can now be stub database directories or files, in which case the
    databases in the stub are used as inputs.

  + Add support for compacting to a stub database, which can be one of the
    inputs (for atomic update).

  + If spellings and/or synonyms were only present in some source databases,
    they weren't copied to the output database, but now they are.

testsuite:

* Improve test coverage (particularly for Xapian::Utf8Iterator and
  Xapian::Stem).

* Add zlib-vg.c to distribution tarballs.

* tests/runtest: Add XAPIAN_TESTSUITE_LD_PRELOAD hook to allow libeatmydata to
  easily be used to speed up testsuite runs.

matcher:

* The matcher wasn't recalculating the max possible weight after a subquery of
  XOR reached its end.  This caused an assertion failure in debug builds, and
  is a missed optimisation opportunity.

* Implement SelectPostList::check() so that check() on OP_NEAR and OP_PHRASE
  subqueries will just check a single document, not a potentially huge numbers
  of documents.

* BM25Weight: Fix calculation order to avoid inconsistent weights due to
  rounding when certain non-default parameter combinations are used.

* TradWeight: Fix calculation order to avoid inconsistent weights due to
  rounding with TradWeight(0).

* Fix regression in speed of OP_OR queries in certain cases due to optimisation
  added in 1.0.21/1.2.1.

* In the query optimiser, use value range bounds to detect value ranges which
  must be empty.

remote backend:

* Add support for iterating metadata keys with the remote backend.  This change
  necessitated an increase in the minor version of the remote protocol.  If you
  are upgrading a live system which uses the remote backend, upgrade the
  servers before the clients.

build system:

* xapian-config: Add --static option which makes other options report values
  for static linking.

* xapian-config is now removed by "make distclean" not "make clean".

* configure: FreeBSD and OpenBSD don't need explicit dependency libraries, so
  set link_all_deplibs_CXX=no there.

* This release uses autoconf 2.67 rather than 2.65.

documentation:

* INSTALL: Raise recommended GCC version from 3.3 to 4.1, since that's the
  oldest we regularly test with.

* replication.html: Update and improve in various ways.

* Remove lingering "experimental" marker from PostingSource and
  ValueCountMatchSpy API documentation.

* index.html: Add links to replication and facets documents, and fix typo in
  serialisation document link.

* internals.html: Add link to replication protocol.

* Change the categorisation document to talk about facets, since that's the
  terminology that seems to be most widely used these days, and
  "categorisation" can also mean automatically assigning categories to
  documents.  Also update to reflect the final API.

* deprecation.html: Add guidelines for supporting other software.

* Document cases where QueryParser's FLAG_WILDCARD and FLAG_PARTIAL aren't
  currently supported.

* PLATFORMS: Move PLATFORMS information to the wiki and replace with a pointer.

tools:

* xapian-compact: Fix access to empty priority_queue while merging synonyms.
  This could have caused problems, though we've had no reports of any (the
  bug was found with _GLIBCXX_DEBUG).

* xapian-compact: Add --quiet/-q option to suppress progress output.
  (ticket#437)

* xapian-replicate: If a full copy was attempted, but was not put live, display
  an explanatory message (in verbose mode).

examples:

* examples/quest: Add command line options to allow prefixes to be specified
  for the QueryParser.

* examples/delve: Add '-z' option to count zero-length documents.

* examples/simplesearch: Fix cut-and-paste errors in usage message and
  --version output.

portability:

* configure: Add support for --enable-sse=sse and --enable-sse=sse2 to allow
  control of which SSE instructions to use.

* configure: Enable use of SSE maths on x86 by default with Sun's compiler.

* configure: Beef up the test for whether -lm is required and add a special
  case to force it to be for Sun's C++ compiler - there's some interaction with
  libtool and/or shared objects which means that the previous configure test
  didn't think -lm is needed here when it is.

* Fix to build on OpenBSD 4.5 with GCC 3.3.5.

* Need to avoid excess precision on m68k when targeting models 68010, 68020,
  68030 as well as 68000.

* Fix compilation with Sun's C++ compiler.

* Fix testsuite to build on Solaris < 10.

Xapian-core 1.2.3 (2010-08-24):

API:

* Database::get_spelling_suggestion() will now suggest a correction even if the
  passed word is in the dictionary, provided the correction has at least the
  same frequency.  Partly addresses #225.

* QueryParser:

  + Fix handling of groups of terms which are all stopwords - in situations
    where this causes a problem we now disable stopword checks for such groups.
    (ticket#245)

  + Fix to be smarter about handling a boolean filter term containing ".." in
    the presence of valuerangeprocessors.

testsuite:

* New "unittest" program for testing low level functions directly.  Currently
  this has tests for the internal resolve_relative_path() function.
  (ticket#243)

remote backend:

* Retry select() if it fails with EINTR while waiting for connect(), and
  discriminate cases with same failure message to aid debugging.

documentation:

* Fix documentation comment for Xapian::timeout type - it holds a time interval
  in milliseconds not microseconds (the API docs for the methods which use it
  explicitly correctly document that the timeouts are in milliseconds).

* libuuid moved from e2fsprogs to util-linux-ng about a year ago, so update
  documentation, comments, and configure error messages to reflect this.

portability:

* configure: Don't pass -mtune=generic unless GCC >= 4.2 is in use
  (ticket#492).

* Fix handling of some obscure cases of resolving relative paths on Microsoft
  Windows.  (ticket#243).

* Optimise closing of all unwanted file descriptors after forking by using
  closefrom() if available, and otherwise providing our own implementation
  (optimised to some extent for many platforms).

* Fix test harness to build under Microsoft Windows (ticket#495).

packaging:

* xapian-core.spec: Add xapian-metadata and cmake related files to RPM
  packaging.

* xapian-core.spec: Update BuildRequires to specify libuuid-devel instead of
  e2fsprogs-devel.

debug code:

* Improve logging of function parameter placeholder strings.

Xapian-core 1.2.2 (2010-06-27):

brass backend:

* Sync changes from each Btree table to disk right after syncing changes to
  its base file, which allows more time for the table changes to be written
  and may also be more efficient with some Linux kernel versions.

chert backend:

* Sync changes from each Btree table to disk right after syncing changes to
  its base file, which allows more time for the table changes to be written
  and may also be more efficient with some Linux kernel versions.

tools:

* xapian-check: Don't try to check document lengths are consistent between the
  postlist and termlist tables if it would use more than 1GB of memory, and
  handle std::bad_alloc or std::length_error when trying to allocate space
  for this.  This issue affected sup users, as sup allocates docids such that
  they are sparse and large docids can easily occur.

examples:

* delve: Show the database's UUID.

portability:

* Revert 1.2.1 change to visibility of Xapian::Weight's copy constructor as
  it making it private broke compilation with GCC 4.1 (which seems to be a
  bug in this compiler version).

* tests/harness/testsuite.cc: Need <cstdio> for sprintf().  Fixes compilation
  error which was masked if valgrind was installed.  (ticket#489)

packaging:

* xapian-core.spec: Update for 1.2.x - add e2fsprogs-devel to BuildRequires and
  add new files to install.

Xapian-core 1.2.1 (2010-06-22):

This release includes all changes from 1.0.21 which are relevant.

API:

* QueryParser: Add support for open-ended ranges (ticket#480).

* Add new optional parameter to QueryParser::add_boolean_prefix() to allow the
  user to indicate a prefix isn't "exclusive" and that multiple instances
  should be combined with OP_AND rather than OP_OR.  Fixes ticket#402.  This
  change should also improve efficiency as it avoids copying the lists of
  prefixes and compares them more efficiently.

* You can now specify a custom stemming algorithm by subclassing
  Xapian::StemImplementation, mostly based on patch from Evgeny Sizikov in
  ticket#448.

* Fix replication bug: when multiple commits were made to the master database
  while a client was performing a full copy, the client would only apply the
  first changeset and then try to make the database live, but fail due to
  trying to set the wrong revision number.

* Replication no longer sleeps between applying changesets to an offline
  database.  It's only necessary to sleep for a live database (to allow readers
  to complete a search without getting DatabaseModifiedErrror.

* xapian-replicate: Add new "-r" command line option to specify how long
  replication sleeps for between applying changesets to a live database.

* If a Btree table doesn't exist when applying a replication changeset, create
  it.  This fixes replicating a revision where a lazy table is created.
  (ticket#468)

testsuite:

* zlib can produce "uninitialised" output from "initialised" input - the
  output does decode to the input, so this is presumably just some unused bits
  in the output, so we use an LD_PRELOAD hack to get valgrind to check the
  input is initialised and then tell it that the output is initialised.

* Don't pass NULL to closedir(), which fixes test harness failures on platforms
  without /proc/self/fd.

* Use safesyswait.h, fixing build failure on "make check" on FreeBSD.

* Check is SA_SIGINFO is defined before using it as it isn't available
  everywhere.  Fixes testsuite build failure on GNU Hurd.

* Add a "soaktest" testsuite, intended to contain long-running tests with
  random data.  Currently contains a single test which builds and runs random
  queries, checking that the results returned are consistent when asking for
  different result ranges.

* Test UUID returned by Database::get_uuid() is 36 characters long.

matcher:

* Xapian no longer forces the wdf_max value to be at least one in
  BM25Weight::get_maxpart().  We used to do this so that a non-existent term in
  the query would cause it not to achieve 100%, but now we calculate
  percentages based on the number of matching subqueries, and it is more
  natural for a non-existent term to get zero weight (ditto for a term which
  always has wdf 0).

* OP_VALUE_RANGE and OP_VALUE_GE now use value streams directly which is much
  more efficient for chert (the default backend in 2.2.x).  As an example, a
  range query testcase which previously took 29 seconds now takes 0.4 seconds
  (70 times faster).  (ticket#432)

* The term statistics from multiple databases are now gathered in a simpler
  way which is a bit faster and uses less memory.

build system:

* Install headers under PREFIX/include not PREFIX/include/xapian.  If you used
  XO_LIB_XAPIAN or xapian-config in your build system, the headers would still
  have been found.

* Releases and snapshots are now generated with libtool 2.2.10 instead of
  2.2.6.

* Fix build failures with some combinations of backends disabled (partially
  addresses ticket#361 - some combinations still fail).

* Add check to configure that GCC actually supports visibility for the platform
  being built for, which fixes compiler warnings with platforms which don't
  (such as Mac OS X and mingw).

documentation:

* Update documentation - replication and PostingSource aren't experimental in
  1.2.x.

portability:

* Make use of built-in UUID API on FreeBSD and NetBSD.  (ticket#470)

* Fix mingw build.

debug code:

* Add new pretty printer for values reported by calls and returns in debug
  logging - in particular, strings are now reported with non-printable
  characters escaped.

* Debug logging should have less runtime overhead when built in but not in use.

* Drop support for --enable-log=profile - dedicated profiling tools are likely
  to return more useful results.

Xapian-core 1.2.0 (2010-04-28):

This release includes all changes from 1.0.20 which are relevant.

testsuite:

* Fix --abort-on-error to actually work.

* Exit with status 1 not 0 if we caught an exception from the harness itself.

Xapian-core 1.1.5 (2010-04-16):

This release includes all changes from 1.0.19 which are relevant.

API:

* Database replication now handles an exception while applying a changeset
  better.

* If environment variable XAPIAN_MAX_CHANGESETS is set on a replication client
  then any changesets read are saved so the replicated copy can itself be
  replicated.

testsuite:

* Use sigsetjmp() and siglongjmp() where available so that the set of blocked
  signals get restored and the test harness can catch a second incidence of a
  particular signal in a run.  Use sigaction() instead of signal() where
  available, which allows us to report the address associated with SIGSEGV,
  SIGFPE, SIGILL, and SIGBUS.

* Add machinery to check for leaked file descriptors.  Currently this requires
  /proc/self/fd to work (which is present on Linux and some other platforms).
  Remove the crude ulimit in runtest which has caused problems on some Debian
  buildds.

* The test harness now explicitly catches const char * exceptions and reports
  their contents.

brass backend:

* Ensure that the wdf upper bound is correctly updated when replacing
  documents.

* xapian-compact: Now sets lastdocid correctly when using --no-renumber.

chert backend:

* Ensure that the wdf upper bound is correctly updated when replacing
  documents.

* xapian-compact: Now sets lastdocid correctly when using --no-renumber.

* xapian-check: Check that the initial doclen chunk exists.

flint backend:

* xapian-compact: Now sets lastdocid correctly when using --no-renumber.

remote backend:

* Add remote backend support for WritableDatabase::add_spelling() and
  WritableDatabase::remove_spelling().  This bumps the remote protocol to
  version 35.0 (so both client and servers will need updating).  Suggesting
  spelling corrections isn't yet supported.  (ticket#178)

build system:

* XO_LIB_XAPIAN: Give a more specific error message for the cases where
  XAPIAN_CONFIG isn't found, is a directory, or isn't executable.

examples:

* delve:

  + If any documents are specified with "-d<docid>", "-V<slot>" now only show
    values for those documents.

  + Remove undocumented -k option, which has been a compatibility alias for -V
    since 0.9.10.  Just use -V instead.

* xapian-metadata: Add new example program which allows you to get and set
  individual user metadata entries.

Xapian-core 1.1.4 (2010-02-15):

This release includes all changes from 1.0.18 which are relevant.

API:

* Xapian::TermGenerator,Xapian::QueryParser,Xapian::Unicode::is_wordchar():
  Add ENCLOSING_MARK and COMBINING_SPACING_MARK categories to is_wordchar(),
  which is used by TermGenerator and QueryParser.  Also make TermGenerator and
  QueryParser ignore several zero-width space characters.  This is a better
  but less compatible version of a fix in 1.0.18.

* Implement support for iterating valuestreams for multidatabases.

* Xapian::Stem: Update the german and german2 stemming algorithms to the latest
  versions from Snowball.  These add an extra rule for the "-nisse" ending.

* Xapian::ValueCountMatchSpy: Replace get_values() with values_begin() and
  values_end().

* Xapian::MatchSpy: Provide an iterator for accessing the top values found
  instead of taking a vector by reference to return them in.

* Xapian::NumericRanges: Remove experimental API we aren't happy with yet.

* Xapian::DatabaseReplica, Xapian::DatabaseMaster: Remove experimental
  API we aren't happy with.  Replication is still supported via the
  command line programs.  (ticket#347)

* Xapian::score_evenness(): Remove as it turns out not to be useful in practice.
  (ticket#435)

* Xapian::ValueWeightPostingSource: A ValueWeightPostingSource with no entries
  would report -infinity as its upper bound, which could cause no results to be
  incorrectly returned for some queries involving such an object.

* Xapian::WritableDatabase::close() fixed to commit() changes (unless a
  transaction is in progress).

testsuite:

* apitest: Improve test coverage in various places.

matcher:

* Uses of values during the match (sorting by value or Sorter, MatchSpy,
  MatchDecider, and collapsing) now use value stream iteration which is
  a lot more efficient for chert and brass (but may be slower for flint).

brass backend:

* New development backend.  Changes over chert:

  + Batched posting list changes during indexing use significantly less memory.

  + Instead of using complex code to iterate modified posting lists and
    documents length lists, brass can flush individual such lists to disk
    and then iterates them from there.

  + To iterate all terms, chert flushes all pending postlist changes.  In the
    case where a prefix is specified, brass only flushes postlist changes for
    terms starting with the specified prefix, and doesn't flush document length
    changes.

chert backend:

* Promote chert to being the stable backend.

* Change the packing of integers and strings into sortable keys, which reduces
  database size by 2.5% in tests.  This means an incompatible change in the
  chert format.  You can use the new xapian-chert-update utility to update a
  chert database from the old format to the new format.  It works much like
  xapian-compact so should take a similar amount of time (and results in a
  compact database).

* xapian-compact:

  + Prune unused docids off the end of each database when merging multiple
    databases with renumbering.

  + Extend --no-renumber to support merging databases, but only if they have
    disjoint ranges of used document ids.

  + Ensure that the resultant database has a fresh UUID (previously chert
    copied the UUID from the first input).

* xapian-check:

  + Fix checking of the METAINFO key in chert.  For small databases, the
    statistics fit in few enough bytes that incorrect check appeared to
    succeed and no errors were reported, but for larger databases an
    error was incorrectly reported.

  + Rework the checking of postlist chunks to use a cleaner approach which
    should report errors better.

  + Use a type wider than 32 bits to keep count of items in a table.
    Previously xapian-check would report the number of entries modulo
    4294967296.

* When iterating a value stream, skip_to() now only assigns the value to a
  std::string when it reaches its target.  This saves a lot of unnecessary
  string copying - in a real-world test it improved the time for 100 queries
  from 3.66s to 3.10s.

* When skipping through a chunk of postings to find the one we want, don't
  bother to unpack the wdf values we're skipping over.  This should save a
  significant amount of time in certain cases where the profile data shows
  about a third of the time is spent in the function where this happens.

* Report locking failure due to running out of file descriptors better.

flint backend:

* xapian-compact:

  + Prune unused docids off the end of each database when merging multiple
    databases with renumbering.

  + Ensure that the resultant database has a fresh UUID (previously flint
    didn't set a UUID so one would be generated on demand when next requested,
    but only if the database was writable).

* Report locking failure due to running out of file descriptors better.

remote backend:

* Add support for WritableDatabase::set_metadata() and Database::get_metadata()
  to the remote backend (based largely on patch in #178).

inmemory backend:

* Read the document data and values lazily for the inmemory backend like we do
  for other backends.  They're much less costly to fetch than if a disk or
  network access is involved, but it avoids copying potentially large data
  which may not be needed.  Consistency here also makes things easier to
  understand for both users and developers.

build system:

* This release uses autoconf 2.65 rather than 2.64.

documentation:

* docs/replication.html: Add note about not using reopen() with databases being
  updated by the replication client.

* docs/admin_notes.html: Update for chert and other recent changes.

* Remove out-of-date reference in the API documentation comment to an
  add_slot() method.  This no longer exists - you need to use multiple
  ValueCountMatchSpy objects to monitor more than one slot.

examples:

* simpleexpand,simpleindex,simplesearch: Handle --help and --version.

debug code:

* The debug log now reports boolean values as "true" and "false" (instead of
  "1" and "0").

Xapian-core 1.1.3 (2009-09-18):

This release includes all changes from 1.0.15-1.0.17 which are relevant.

API:

* Update Unicode character database to Unicode 5.2.  (ticket#351)

* Rename Xapian::Sorter to Xapian::KeyMaker, paving the way for using it to
  build collapse keys too.  Xapian::Sorter remains for compatibility (and is
  now a subclass of Xapian::KeyMaker) but is deprecated.

* Resolve the inconsistency in MultiValueSorter::add()'s "forward" parameter
  versus the "reverse" parameters which the Enquire sorting functions now take
  by replacing the class with MultiKeyMaker with a renamed method add_value()
  with a "reverse" parameter.  MultiValueSorter remains with the old semantics
  for compatibility but is deprecated.  (ticket#359)

* QueryParser: Don't apply spelling correction to wildcarded terms, or to terms
  at the end of the query which we expand under FLAG_PARTIAL.

* Add new Error subclass SerialisationError which we throw for serialisation
  related errors (which previously mostly threw NetworkError.

* Rename Xapian::SerialisationContext to Xapian::Registry.

* Add DecreasingValueWeightPostingSource class, which reads weights from a
  value slot in which a significant range of the values are in decreasing
  order.  This functions similarly to ValueWeightPostingSource, but can be much
  more efficient.

* Add new Xapian::MatchSpy class:

  + This replaces the use of Xapian::MatchDecider as a "matchspy", which is now
    deprecated.  The new class only inspects, and can't reject.  It can work
    with remote databases, with the results being serialised to return them
    across the link.

  + Add subclass ValueCountMatchSpy, which counts the occurrences of each value
    in a slot in the search results seen (useful for faceted or categorisation
    systems).  The results can be grouped into ranges using the NumericRange
    and NumericRanges classes, and the score_evenness() function.  This API is
    currently experimental.

* Remove default implementation of Weight::clone() which returns NULL.  We
  always need clone() to be implemented because it's called for every term
  in the query, not just used for the remote backend.

chert backend:

* Rewrite the low level packing and unpacking functions more efficiently.  As
  well as being generally faster, the pack functions now take a reference to a
  string to append to, which avoids creating a lot of temporary string objects.
  Indexing HTML files with omindex is 5-10% faster.  Searching for "The" on
  gmane (which results in a lot of unpacking of postings and document lengths)
  is about 35% faster.  (ticket#326)

* xapian-compact: Don't report an absent lazy input table as 0 size.

* Fix ChertModifiedPostList to skip added-but-then-deleted-before-flush
  documents.  (ticket#392)

* Fix WritableDatabase::get_doclength() to work properly after a call to commit
  for the chert backend (ticket#397).

* Fix to work with the metainfo key stored in the latest format of chert
  databases.

* Avoid doing pointless work by trying to delete non-existent lists of values
  when we're just adding documents.

* Fix code to find the first docid in the next chunk (ticket#399).

* Add support for chert databases without a termlist table (ticket#181).
  Currently the only way to create such a database is to create a chert
  database and do "rm termlist.*".

flint backend:

* xapian-compact: Don't report an absent lazy input table as 0 size.

remote backend:

* Remote protocol major version has changed to support serialising MatchSpy
  objects.

* Fixed not to sometimes read off the end of the returned matches when
  searching multiple databases, some of which are remote, and when the primary
  ordering is by relevance.

build system:

* This release uses autoconf 2.64 rather than 2.63.  This means configure now
  makes use of shell functions, which makes it ~13% smaller, and should also
  make it execute faster.

* configure: Send stderr output from ldconfig to config.log.

* Add optional third parameter to XO_LIB_XAPIAN autoconf macro which specifies
  the basename for the "xapian-config" script (defaults to "xapian-config" to
  give the current behaviour).

* This release uses doxygen 1.5.9 to generate the API documentation.

documentation:

* Minor improvements to the formatting of the collated API documentation.

portability:

* Fix code to compile with Sun's C++ compiler.

* Fix our uuid_unparse_lower() replacement for older libuuid to actually
  compile (really fixes ticket#368).

* Fix xapian-config to work with Solaris 10 /bin/sh.  (ticket#405)

debug code:

* Use C++ syntax for NULL with a type in log output.

Xapian-core 1.1.2 (2009-07-23):

This release includes all changes from 1.0.14 which are relevant.

API:

* Move support for a prefix/suffix from NumberValueRangeProcessor to
  StringValueRangeProcessor, and change NumberValueRangeProcessor and
  DateValueRangeProcessor to inherit from StringValueRangeProcessor so all
  three now support a prefix/suffix.  (ticket#220)

* Query: Trim 4 bytes off the internals.  (ticket#280)

* QueryParser: If default_op is OP_NEAR or OP_PHRASE then make the window size
  (9 + no_of_terms) to match the default for an explicit NEAR or PHRASE.
  (ticket#254)

testsuite:

* Sort out the clash between two different patches to fix leaking file
  descriptors when running tests with the remotetcp backend (broken by
  changes in 1.1.1).

matcher:

* If the highest weighted document doesn't match all the terms in the query,
  its percentage weight is now calculated by simply counting how many weighted
  leaf subqueries match it instead of scaling by the proportion of the weight
  which matches (which required accessing the termlist for that document).
  (ticket#363).

* XOR with a SYNONYM subquery could previously achieve 100% - this has been
  fixed.

flint backend:

* Backport the lazy update changes from chert to flint:

  WritableDatabase::replace_document() now updates the database lazily in
  simple cases - for example, if you just change a document's values and
  replace it with the same docid, then the terms and document data aren't
  needlessly rewritten.  Caveats: currently we only check if you've looked at
  the values/terms/data, not if they've actually been modified, and only keep
  track of the last document read.

build system:

* Update to always use C++ forms for ISO C standard headers (ticket#330).

* Fix several places where Xapian::doccount is used instead of
  Xapian::termcount, and similar issues.  It's still not possible to make
  these types different sizes, but we're now closer to this goal.
  (ticket#385).

documentation:

* Note that PostingSource and Weight objects returned by clone() and
  unserialise() methods will be deallocated with "delete".

debug code:

* Fix debug logging not to segfault on NULL Query::Internal pointers.

Xapian-core 1.1.1 (2009-06-09):

This release includes all changes from 1.0.13 which are relevant.

API:

* New Query::OP_SYNONYM operator, which matches the same documents as OP_OR,
  but attempts to weight as if the all the subqueries were a single term with
  their combined wdf, which should give better relevance weights.

* QueryParser's synonym, wildcard, and partial query features now use
  the new OP_SYNONYM operator.

* PostingSource: Add new set_maxweight() method to allow subclasses to tell
  the matcher that their maximum weight has decreased.  Make get_maxweight()
  a non-virtual method of the baseclass which returns the last set maxweight
  (which will require updates to most user subclasses. (ticket#340)

* DatabaseReplica: Fix SEGV when calling get_description() on a default
  constructed DatabaseReplica.

* Make Query::MatchAll and Query::MatchNothing const since they're immutable.
  All the public methods of Query are const, so this should be completely API
  compatible.

* Methods returning an end iterator for a ValueIterator now actually return a
  proxy object which silently converts to ValueIterator if required.  This
  proxy object allows a comparison with an "_end()" method to be optimised
  better so that it just ends up comparing the internal member of the iterator
  class with NULL (previously a call to ValueIterator's destructor remained).
  This should be API compatible, but note that it is definitely now more
  efficient just to compare against the return value of the relevant _end()
  method than to store the end iterator explicitly.

testsuite:

* Testcase valuestats4 requires transactions, so indicate that and remove the
  explicit SKIP for inmemory.

* Testcase changemaxweightsource1 uses ChangeMaxweightPostingSource, which
  doesn't work with multi or remote, so mark the test accordingly.

* We've decided that "going back" with skip_to() or check() should have
  unspecified behaviour, so stop testing how this case behaves!

matcher:

* Subclass MultiPostList directly from PostList instead of from LeafPostList.
  This gets rid of two unused data members per MultiPostList in exchange for
  having to define 5 extra "never called" methods, but 4 of these just
  tailcall.

* Store termfreqs and reltermfreqs for query terms in a single map rather than
  one map for each, which saves is more compact and likely to be faster.

chert backend:

* xapian-check: For chert, check value stats are the correct format and that
  the streamed values are consistent with their stats (ticket#277).

* xapian-check: Chert doesn't store termlist entries for documents without
  terms, which resulted in us reporting an error when we found document ids in
  the doclength "postlist" which were greater than any with an entry in the
  termlist.  Instead compare these entries against db.get_last_docid() if we
  are checking a whole db and the db can be opened.  If not, suppress this
  check.

remote backend:

* When serialising stats, serialise the termfreq and reltermfreq together,
  rather than in separate lists.  This gives a smaller serialised form, and
  matches these both being stored in the same map now.  This is an incompatible
  remote protocol change, so bump the major version to 32.  (ticket#362)

build system:

* Some build failures with --disable-backend-XXX options have been fixed, but
  we haven't exhaustively tested all combinations.

* Ship common/win32_uuid.cc and common/win32_uuid.h (ticket#367).

documentation:

* Update PostingSource documentation to describe how init() is called again if
  a PostingSource is reused.  Fixes #352.

portability:

* Fixed to build with GCC 4.4.

* Drop support for GCC 2.95.3 and 3.0.x - we now require at least 3.1 as doing
  so eliminates some preprocessor conditionals which we aren't able to test
  regularly as we don't have easy access to such old GCC versions.  GCC 3.1 is
  nearly 7 years old now, and GCC3 didn't get widespread use until later
  versions anyway.  If you still need to use GCC < 3.1, Xapian 1.0.x should
  build with 2.95.3 or newer.

* Older versions of libuuid don't have uuid_unparse_lower() so probe for it in
  configure, and if it isn't present provide an inline version in safeuuid.h
  (ticket#368).

* Fixed to build with MSVC (ticket#379).

* Add static_cast<char>() to str(bool) overload to suppress bogus MSVC warning
  (ticket#377).

debug code:

* common/debuglog.h: Add missing initialisation of uncaught_exception variable
  in a couple of places.

Xapian-core 1.1.0 (2009-04-22):

API:

* All deprecated xapian-core features listed for removal in 1.1.0 have been
  removed.  See deprecation.html for details, and suggested updates.

* The Unicode character categorisation functions have been updated from
  Unicode 5.0 to 5.1.

* Add NON_SPACING_MARK to is_wordchar() for better tokenisation of languages
  which use such marks - for example, Arabic.  This is better than the stop-gap
  fix in 1.0 of treating NON_SPACING_MARK as a phrase-generator character
  when parsing queries, but it does mean that databases built from data
  containing such characters will need to be rebuilt.  (ticket#355)

* The details of how to subclass Xapian::Weight to implement your own
  weighting scheme have changed incompatibly to allow user weighting schemes
  to have access to the same statistics as built-in schemes (ticket#213)
  If you have a existing subclass of Xapian::Weight you'll need to update it.

* New Database methods get_doclength_upper_bound(), get_doclength_lower_bound()
  and get_wdf_upper_bound(), primarily intended for allowing weighting schemes
  to calculate tighter upper bounds on weights (which BM25Weight and TradWeight
  now do) which allows matcher weight-based optimisations to be more effective.
  Chert actually tracks doclength bounds and a global (rather than per term)
  upper bound on wdf; other backends return much less tight bounds, but these
  still lead to better upper bounds on weights.

* Enquire::get_eset() now uses an unmodified of probabilistic formula, and
  doesn't return terms which would get a negative weight from it (since that
  means they are expected to be harmful not helpful).

* Add Database::close() method, which will release system resources (in
  particular, close filehandles) held by a database.  This is particularly
  useful when wrapping the API for languages with garbage collection.

* Change Database::positionlist_begin() not to throw exceptions if the term or
  document doesn't exist.

* Xapian databases now have a UUID, readable with Database::get_uuid().

* A new Database replication API has been added (currently experimental).

* MSet::get_termfreq() will now fall back to looking up the term frequency in
  the database rather than raising an exception if a term wasn't present in
  the query.

* Calling RSet:add_document() with argument 0 now throws InvalidArgumentError.

* QueryParser sped up (new version of lemon); queryparsertest runs 2.2% faster.

* Add ValueSetMatchDecider, which is a matchdecider which is intended to be
  passed a set of values to look for in documents, and selects documents based
  on the presence of those values.

* Add new Xapian::PostingSource class to allow passing custom sources of
  postings and weights to the matcher.  Built-in PostingSource subclasses:
  FixedWeightPostingSource, ValueMapPostingSource, ValuePostingSource, and
  ValueWeightPostingSource.  (Currently experimental).

* Database: Add get_value_freq(), get_value_lower_bound() and
  get_value_upper_bound() methods to get statistics about the values stored in
  a slot.  Add support for the value statistics methods to chert, inmemory,
  multi and remote databases.

* Enquire::get_eset() now faster for large ESet size.

* Xapian::Document objects now have a reduced memory footprint.

* Enquire::set_collapse_key() now allows you to specify a maximum number of
  matches with each collapse key to keep (which defaults to 1, giving the
  previous behaviour).  Enquire can now report bounds and an estimate of what
  the total number of matches would have been if collapsing wasn't in use.

* WritableDatabase::commit() is a new, preferred alias for
  WritableDatabase::flush().  (ticket#266)

* Add methods for serialising documents and queries to strings, and
  unserialising back from strings.  (ticket#206)

testsuite:

* stemtest: No longer checks environment variables OM_STEMTEST_SKIP_RANDOM,
  OM_STEMTEST_LANGUAGES, and OM_STEMTEST_SEED.

* perftest: New performance testsuite.  This is intended to contain intended to
  contain potentially time-consuming performance tests, which log output to
  an XML file for later analysis.  It's not run by "make check" - use "make
  check-perf" to run it.

* apitest: Now runs tests over both flint and chert for multi, remotetcp, and
  remoteprog.

* Wait for subprocesses to finish at end of tests with remotetcp backend, to
  avoid test failures when the same database is used for the next testcase.

matcher:

* Internally, pass around non-normalised document lengths as Xapian::termcount
  (unsigned integer) not Xapian::doclength (double).  This gives a 3% speedup
  for 10 term OR queries!

chert backend:

* New development backend.  Use Chert::open() to explicitly create a chert
  format database, or set XAPIAN_PREFER_CHERT=1 in the environment to
  prefer chert when creating a new database without an explicit type.

* Quartz and Flint stored the document length alongside every posting list
  entry.  Chert instead stores a chunked list of all the document lengths
  which saves a lot of space, and is a big win for large queries or those
  which don't need the document lengths.  This structure is used to
  implement much faster iteration (six times faster in a test) over all
  document ids (which speeds up queries using unary NOT, e.g. `NOT apples'),
  and to test for the existence of documents (instead of checking the record
  table for an entry).

* Document values are now stored in a chunked stream for each slot for
  efficient access to the same slot in lots of documents.  This makes
  operations like sort by value much more efficient.

* WritableDatabase::replace_document() now updates the database lazily in
  simple cases - for example, if you just change a document's values and
  replace it with the same docid, then the terms and document data aren't
  needlessly rewritten.  Caveats: currently we only check if you've looked at
  the values/terms/data, not if they've actually been modified, and only keep
  track of the last document read.

flint backend:

* If we can't obtain a write lock while trying to create a new database
  we now report the lock failure with DatabaseLockError, not
  DatabaseOpeningError - it's more useful to know that the lock attempt failed
  in this situation.

* Improve reporting of failures to obtain lock due to unexpected errors.

* xapian-check: Don't stop checking a table after an error in certain cases -
  instead increment the error counter and try to continue checking from the
  next item.

remote backend:

* The remote database protocol major version has been increased, allowing
  a significant amount of compatibility code to be removed.  This change means
  that new clients won't work with old servers, and old clients won't work
  with new servers.  If upgrading a live system, you will need to take this
  into account.

* The remote servers now always default to opening a Database and the client
  has to send a protocol message to explicitly request write access.  This
  allows a single server to support multiple readers and one writer
  simultaneously.  (ticket#145)

* Database::get_document() no longer does an unnecessary copy of the document's
  values.

* Change serialisation of queries to be more compact and easier to parse.

stub databases:

* Stub databases used to assume that any relative paths were relative to the
  current working directory.  They now assume that relative paths are
  relative to the directory holding the stub database file.

* Stub database lines which begin with a '#' character are now ignored,
  allowing comments in stub database files.

* New "stub directory" database type - this is a directory containing a stub
  database file named "XAPIANDB".

* Don't just ignore lines with no spaces in a stub database file.

* Bad lines in a stub file were being ignored after we'd seen a good entry.

* Add new Auto::open_stub() overload which opens a stub database file
  containing a single entry as a WritableDatabase.

* Add support for "inmemory" to stub database (which is useful now that stub
  databases can be opened for writing).

* A stub database file is now allowed to contain no database entries, which
  results in an empty Database object (this avoids user code having to special
  case to handle "0 or more" databases).

build system:

* To allow installations of Xapian 1.0 and 1.1 to easily coexist, the library
  is now libxapian-1.1; xapian.m4 is now xapian-1.1.m4; headers are now
  installed in $prefix/include/xapian-1.1.  If you use XO_LIB_XAPIAN or
  xapian-config as we recommend, this should all be transparent.  Also
  programs and scripts have a default program suffix to -1.1 unless overridden
  using the --program-suffix argument to configure (if you really want no
  suffix, "./configure --program-suffix=" will achieve this).

* On Linux and k*bsd-gnu, override libtool's link_all_deplibs_CXX to "no".

* On Linux, override libtool's sys_lib_dlsearch_path_spec to a list generated
  in a more reliable way which includes all the default directories.

* configure: --enable-debug and --enable-debug-verbose have been deprecated
  since 1.0.0, so remove specific errors pointing to the replacements.

documentation:

* Disable "JAVADOC_AUTOBRIEF" in doxygen configuration since we always try to
  write a brief description explicitly, and JAVADOC_AUTOBRIEF causes problems
  in some cases.

* docs/deprecation.html: Describe what "experimental" features are, and why
  replication and posting sources are currently experimental.

* docs/deprecation.html: Deprecate Stem_get_available_languages() from the
  python bindings.

examples:

* Use C++ forms of C headers in examples (ticket#330).

packaging:

* xapian-core.spec: We no longer need to run autoreconf to work around
  libtool's incomplete sys_lib_dlsearch_path_spec or to pick up distro-specific
  patches for link_all_deplibs.

debug code:

* Report get_description() rather than the pointer value for
  Xapian::Query::Internal* parameters to internal functions.

* The debug logging framework has been overhauled.  See HACKING for details
  of how it now works.

* Faster integer to string functions inside the library (this is a general
  improvement, but will particularly speed up debug logging as that converts a
  lot of integers to strings).

Xapian-core 1.0.23 (2011-01-14):

API:

* QueryParser: Avoid a double free if Query construction throws an exception
  in a particular case.  Fixes ticket#515.

* QueryParser: Handle NEAR/<offset> and ADJ/<offset> where offset isn't an
  integer the same way at the end of the query as in the middle.

* Enquire::get_mset(): Avoid pointlessly trying to allocate lots of memory
  if the first document requested is larger than the size of the database.

* Enquire::get_mset(): An empty query now returns an MSet with firstitem set
  correctly - previously firstitem was always 0 in this case.

matcher:

* The matcher wasn't recalculating the max possible weight after a subquery of
  XOR reached its end.  This caused an assertion failure in debug builds, and
  is a missed optimisation opportunity.

tools:

* xapian-compact: Fix access to empty priority_queue while merging synonyms.
  This could have caused problems, though we've had no reports of any (the
  bug was found with _GLIBCXX_DEBUG).

Xapian-core 1.0.22 (2010-10-03):

API:

* Xapian::Document: Initialise docid to 0 when creating a document from
  scratch, as documented.

* Xapian::QueryParser: Allow phrase generators between a probabilistic prefix
  and the term itself (e.g. path:/usr/local).

matcher:

* Back out the OP_OR efficiency improvement made in 1.0.21 since this change
  slows down some other common cases.  We'll address this fully in 1.2.4, but
  that fix is more invasive than we are comfortable with for 1.0.x at this
  point.

build system:

* xapian-config: Add --static option which makes other options report values
  for static linking.

documentation:

* deprecation.html: Add guidelines for supporting other software.

* Document cases where QueryParser's FLAG_WILDCARD and FLAG_PARTIAL aren't
  currently supported.

* Fix documentation for Xapian::timeout type - it holds a time interval in
  milliseconds not microseconds (the API docs for the methods which use it
  explicitly correctly document that the timeouts are in milliseconds).

portability:

* configure: Don't pass -mtune=generic unless GCC >= 4.2 is in use
  (ticket#492).

* configure: Add support for --enable-sse=sse and --enable-sse=sse2 to allow
  control of which SSE instructions to use.

* configure: Enable use of SSE maths on x86 by default with Sun's compiler.

* configure: Beef up the test for whether -lm is required and add a special
  case to force it to be for Sun's C++ compiler - there's some interaction with
  libtool and/or shared objects which means that the previous configure test
  didn't think -lm is needed here when it is.

* Fix test harness to build under Microsoft Windows (ticket#495).

* Fix to build on OpenBSD 4.5 with GCC 3.3.5.

* Need to avoid excess precision on m68k when targeting models 68010, 68020,
  68030 as well as 68000.

packaging:

* xapian-core.spec: Add cmake related files to RPM packaging.

Xapian-core 1.0.21 (2010-06-18):

API:

* Xapian::Stem now recognises "nb" and "nn" as additional codes for the
  Norwegian stemmer.

* Xapian::QueryParser now correctly parses a wildcarded term in between two
  other terms (ticket#484).

testsuite:

* Improve test coverage of OP_VALUE_RANGE and MSet::get_percent().

matcher:

* OP_OR could skip a matching document if it decayed to OP_AND or OP_AND_MAYBE
  during the match in some cases.  Fixes ticket#476.

* OP_XOR with non-leaf subqueries could skip matching documents in some cases,
  and OP_XOR of three or more sub-queries could return incorrect weights.
  Fixes ticket#475.

* OP_OR is now more efficient if a subquery is potentially expensive (e.g.
  ValueRangePostList, OP_NEAR, OP_PHRASE).  A 10-fold speed-up with
  ValueRangePostList has been observed.

flint backend:

* When iterating a table, if the table changes underneath we could end up
  returning the same entry twice.  (Debian#579951)

* A cancelled transaction (or a failing operation implicitly cancelling
  pending changes) now marks the tables as unmodified, which fixes an exception
  trying to read block 0 if one of the tables is empty on disk.

quartz backend:

* When iterating a table, if the table changes underneath we could end up
  returning the same entry twice.  (Debian#579951)

remote backend:

* When daemonising, read the max fd to close with sysconf() instead of using
  a hardcoded value of 256, and work even if stdin and stdout have been closed.

build system:

* Install files to make Xapian easier to use with cmake.

documentation:

* Update the list of languages that the Xapian::Stem constructor recognises.

* Assorted minor improvements to the collated API documentation.

portability:

* On x86 processors, Xapian now defaults to using SSE2 FP instructions.  This
  avoids issues with excess precision and it a bit faster too.  If you need
  to support processors without SSE2 (this means pre-Pentium4 for Intel) then
  configure with --disable-sse.  (ticket#387)

* Fix warning when compiling for mingw with GCC 4.2.1.

* Remove mutable from a couple of reference class members - mutable doesn't
  make sense for a reference and some compilers warn about it.

Xapian-core 1.0.20 (2010-04-27):

API:

* MSet: Fix incorrect values reported by get_matches_estimated(),
  get_matches_lower_bound(), and get_matches_upper_bound() in certain cases
  when sorting and collapsing (ticket#464).

documentation:

* deprecation.html: Note how to disable deprecation warnings. (ticket#393)

examples:

* delve: Add -a option to list all terms in a database.

* delve: -d and -V command line options now report out of range and invalid
  numbers.

portability:

* The getopt warning fix for Cygwin in 1.0.19 caused build failures on Mac OS X
  (and probably some other platforms with non-GNU getopt implementations), so
  replace with a fix which is only enabled for Cygwin. (ticket#469)

Xapian-core 1.0.19 (2010-04-15):

API:

* QueryParser: Fix leak if Xapian::Database throws an exception during parsing
  (ticket#462).

testsuite:

* Explicitly flush after indexing for quartz and flint, so we see any
  exceptions from the flush (the implicit flush from the destructor swallows
  any exceptions).

* apitest: Add databasemodified1 testcase to provide some test coverage for
  DatabaseModifiedError.

flint backend:

* When updating a document, rather than decoding the old positions, comparing
  with the new, and then encoding the new if different, we now just encode the
  new and then compare the encoded forms.  (ticket#428)

* Avoid trying to delete the document positions when we know there aren't any.

* Fix memory leak if Database::allterms_begin() throws an exception
  (ticket#462).

* xapian-check: Report document id for document length mismatch.

* Fix potential issues with iterators over a WritableDatabase which is modified
  during iteration.  No problems have actually been observed with flint, only
  in 1.1.4 with chert in cases which don't occur in flint, but it seems likely
  the issue can manifest for flint in other situations.  Fixes ticket#455.

* Initialise zlib z_stream structure members zalloc, zfree, and opaque with
  Z_NULL rather than 0 cast to the appropriate type, as that's what the zlib
  documentation says to do.  Add missing initialisation of opaque for the
  inflate z_stream which the zlib docs say is needed (reading the zlib code,
  this isn't true for current versions, so this improves robustness rather
  than fixing an observable bug).

* Don't memcpy() a block to itself - it's a waste of effort, and (probably)
  undefined behaviour (as a block overlaps itself).

quartz backend:

* Fix potential issues with iterators over a WritableDatabase which is modified
  during iteration.  No problems have actually been observed with quartz, only
  in 1.1.4 with chert in cases which don't occur in quartz, but it seems likely
  the issue can manifest for quartz in other situations.  Fixes ticket#455.

* Don't memcpy() a block to itself - it's a waste of effort, and (probably)
  undefined behaviour (as a block overlaps itself).

build system:

* Force -fno-strict-aliasing for GCC 4.2 to avoid bad code being generated due
  to a bug in that compiler version.  Fixes ticket#449.  This issue hasn't been
  observed to affect Xapian 1.0.x, but it seems prudent to backport the fix.

documentation:

* INSTALL: Correct description of --enable-assertions.  It does NOT enable
  debugging symbols, and shouldn't control checks on bad data passed to API
  calls (if it does anywhere, that's a bug).  Note that Xapian will run more
  slowly with assertions on.

* spelling.html:

  + Add section on indexing.

  + Add a note about removing automatically added spelling dictionary entries.

  + Move the "algorithm" section to the end, as it is really just background
    information for the curious.

* include/xapian/queryparser.h: Document the possible exception messages from
  QueryParser::parse_query().

* include/xapian/termgenerator.h: Note how TermGenerator handles stopwords.

examples:

* delve: Display the lastdocid value when displaying general database
  statistics.

* simpleindex: Explicitly call flush() on the database, as that is good
  practice (since you see any exceptions).

portability:

* Fix compilation failure in testsuite on OpenBSD, introduced by new regression
  test in 1.0.18.  Fixes ticket#458.

* Fix getopt-related warning on Cygwin.

Xapian-core 1.0.18 (2009-02-14):

API:

* Document: Add new add_boolean_term() method, which is an alias for add_term()
  with wdfinc=0.

* QueryParser:

  + Add support for quoting boolean terms so they can contain arbitrary
    characters (partly addresses ticket#128).

  + Add ENCLOSING_MARK and COMBINING_SPACING_MARK categories, plus several
    zero-width space characters, as phrase generators.  This mirrors a better
    fix in 1.1.4, but without losing compatibility with existing databases.

  + Fix handling of an explicit AND before a hated term (foo AND -bar).
    (ticket#447)

* TermIterator: Only include trailing '+' or '#' on a term if it isn't followed
  by a word character (makes more sense and matches QueryParser's behaviour).
  (ticket#446)

* Database: Fix many methods to behave better on a database with no
  subdatabases, such as is constructed by Database().  Fixes ticket#415.

testsuite:

* Add test coverage for xapian-compact, and improve coverage for
  WritableDatabase::replace_document().

* apitest: Rename matchfunctor<n> to matchdecider<n> to match current
  terminology.

flint backend:

* When updating documents, don't update posting entries which haven't changed.
  Largely fixes ticket #250.

* If the number of entries in the position table happened to be 4294967296 or
  an exact multiple, Xapian would ignore positional data for that table when
  running queries, and xapian-compact wouldn't copy its contents.

* Iterating all the terms in the database with a prefix is now slightly more
  efficient.

* Fix locking code to work if stdin and/or stdout have been closed.

* If a document is replaced with itself unmodified, we no longer increase the
  automatic flush counter.

* When iterating a posting list modified since the last flush(), the reported
  wdf is now correct (previously it was too high by its old value).

* Replacing a document deleted since the last flush failed to update the
  collection frequency and wdf, and caused an assertion failure when assertions
  were enabled.

* WritableDatabase::replace_document() didn't always remove old positional
  data (the only effect is that the position table was bloated by unwanted
  entries).

* xapian-inspect:

  + New "until" command which shows entries until a specified key is reached.

  + New "open" command which allows easy switching between tables.

* xapian-compact: Fix typos in --help output.

quartz backend:

* Replacing a document deleted since the last flush failed to update the
  collection frequency and wdf, and caused an assertion failure when assertions
  were enabled.

* WritableDatabase::replace_document() didn't always remove old positional
  data (the only effect is that the position table was bloated by unwanted
  entries).

remote backend:

* Throw UnimplementedError if a MatchDecider is used with the remote backend.
  Previously Xapian returned incorrect results in this case.

build system:

* configure: With --enable-maintainer-mode, enable -Werror for GCC >= 4.1
  rather than >= 4.0 as Apple's GCC 4.0 gives bogus uninitialised variable
  warnings.

documentation:

* The API documentation now includes Xapian::Error and subclasses, and doesn't
  mention Xapian::Query::Internal.

* Make clear in the Xapian::Document API documentation that this class is a
  lazy handle and discuss the issues this can cause.

* INSTALL: Improve text about zlib dependency.

* HACKING: Add details of our licensing policy for accepting patches.

examples:

* quest: If no database is specified, still parse the query and report
  Query::get_description() to provide an easy way to check how a query parses.

portability:

* Fix GCC 4.2 warning.

xapian-core 1.0.17 (2009-11-18):

API:

* QueryParser:

  + Fix handling of a group of two or more terms which are all stopwords which
    notably caused issues when default_op was OP_AND, but could probably
    manifest in other cases too.  Fixes ticket#406.

  + Fix interaction of FLAG_PARTIAL and FLAG_SYNONYM.  (ticket#407)

* Database: A database created via the default constructor no longer causes a
  segfault when the methods get_metadata() or metadata_keys_begin() are called.

flint backend:

* Don't try to close the fd one more than the maximum allowable when locking
  the database.  Harmless, except it causes a warning when running under
  valgrind.  (ticket#408)

remote backend:

* Xapian::Sorter isn't supported with the remote backend so throw
  UnimplementedError rather than giving incorrect results.  (ticket#384)

* Fix potential reading off the end of the MSet which is returned internally
  by the remote server.

documentation:

* Various documentation comment improvements for the Database class.

examples:

* examples/quest.cc: Tighten up the type of the error we catch to detect an
  unknown stemming language.

portability:

* xapian-config: Need to quote ^ for Solaris /bin/sh.

* configure: Actually use any flags we determine are needed to switch the
  compiler to proper ANSI C++ mode, when building xapian-core - this stopped
  working in 1.0.12, breaking support for HP's aCC, Compaq's cxx, Sun's CC, and
  SGI's CC.

Xapian-core 1.0.16 (2009-09-10):

flint backend:

* Fix a typo which stopped this fix in 1.0.12 from working (ticket #398):

  If we fail to get the lock after we spawn the child lock process (the common
  case is because the database is already open for writing) then we now clean
  up the child process properly.

documentation:

* Improve API documentation of QueryParser::set_default_op() and
  QueryParser::get_default_op().

portability:

* Fix build failure on Mac OS X 10.6.

Xapian-core 1.0.15 (2009-08-26):

testsuite:

* Fix the test harness not to report heaps of bogus errors when using valgrind
  3.5.0.

flint backend:

* Backport the lazy update changes from 1.1.2:

  WritableDatabase::replace_document() now updates the database lazily in
  simple cases - for example, if you just change a document's values and
  replace it with the same docid, then the terms and document data aren't
  needlessly rewritten.  Caveats: currently we only check if you've looked at
  the values/terms/data, not if they've actually been modified, and only keep
  track of the last document read.

* Fix PostingIterator::skip_to() on an unflushed WritableDatabase to skip
  documents which were added and deleted since the last flush.  (ticket#392)

documentation:

* Overhaul the doxygen options we use and tweak various documentation comments
  to improve the generated API documentation.

* Explicitly document that an empty prefix argument to
  QueryParser::add_prefix() means "no prefix".

* Update the documentation comments for Enable::set_sort_by_value(),
  set_sort_by_value_then_relevance(), and set_sort_by_relevance_then_value() to
  mention sortable_serialise() as a good way to store numeric values for
  sorting.

Xapian-core 1.0.14 (2009-07-21):

API:

* When using more than one ValueRangeProcessor, QueryParser didn't reset the
  begin and end strings to ignore any changes made by a ValueRangeProcessor
  which returned false, so further ValueRangeProcessors would see any changes
  it had made.  This is now fixed, and test coverage improved.

testsuite:

* The test harness code which launches xapian-tcpsrv child processes was
  failing to close a file descriptor for each one launched due to a bug in
  the code which is meant to track them.  This was causing apitest to fail
  on OpenBSD (ticket#382).  Also wait between testcases for any spawned
  xapian-tcpsrv processes to exit to avoid spurious failures when a database is
  reused by the next testcase.

* tests/runtest.in: Use "ulimit -n" where available to limit the number of
  available file descriptors to 64 so we catch file descriptor leaks sooner.

* When measuring CPU time used for scalability tests, we no longer try to
  include the CPU time used by child processes, as we can only get that for
  child processes which have exited and it's hard to ensure that they have
  with the current framework.  Although this means we only tests the
  client-side scaling for remote tests, the local backend tests cover most of
  the work done by the server part of the remote backend.

* apitest: In testcase topercent2, don't expect max_attained or max_possible to
  be exact as rounding errors in different ways of calculating can cause small
  variations.  On trunk we already have similar code because the new weighting
  scheme stuff gives different bounds in the different cases.  This should fix
  testsuite failures seen on some of the Debian and Ubuntu buildds.

* The test harness now always reports the full exception message (was
  conditional on --verbose), and output for different exception types and
  other causes of failure is now more consistent.

* For scalability tests, the test harness now increases the number of
  repetitions until the first run takes more than 0.001 seconds, to avoid
  trying to base calculations on a length of time we probably can't reliably
  measure to start with.

* Add test coverage for Stem::get_description() for each supported language.

* queryparsertest: Reenable tests which require the inmemory backend to be
  enabled by fixing typo XAPIAN_HAS_BACKEND_INMEMORY ->
  XAPIAN_HAS_INMEMORY_BACKEND.

flint backend:

* Use F_FULLFSYNC where available (Mac OS X currently) to ensure that changes
  have been committed to disk.  (ticket#288)

remote backend:

* Fix handling of percentage weights in various cases when we're searching
  multiple remote databases or a mix of local and remote databases.

build system:

* configure: -Wshadow produces false positives with GCC 4.0, so only enable it
  for >= 4.1 since we enable -Werror for maintainer-mode builds for GCC >= 4.0.

* configure: Check that we can find the valgrind/memcheck.h header as well as
  the valgrind binary.

* Change how snowball generates the data used by its among operation - instead
  of using pointers to the strings in struct among, store an offset into a
  constant pool, as this reduces the number of relocations by about 2300, which
  should decrease the time taken by the dynamic linker when loading the
  library.  This also reduces the size of the shared library significantly
  (on x86-64 Linux, the stripped shared library is 4% smaller).

Xapian-core 1.0.13 (2009-05-23):

API:

* Xapian::Document no longer ever stores empty values explicitly.  This
  wasn't intentional behaviour, and how this case was handled wasn't
  documented.  The amended behaviour is consistent with how user metadata
  is handled.  This change isn't observable using Document::get_value(),
  but can be noticed when iterating with Document::values_begin(), using
  Document::values_count(), or trying to delete the value with
  Document::remove_value().

testsuite:

* Fix testcase scaleweight4 not to fail on x86 when compiled with -O0.  The
  problem was in the testcase code, and was caused by excess precision in
  intermediate FP values.

* Testcases which check that operations have the expected O(...) behaviour now
  check CPU time instead of wallclock time on most platforms, which should
  eliminate occasional failures due to load spikes from other processes.
  (ticket#308)

* Fix test failures due to SKIP_TEST_FOR_BACKEND("inmemory") not skipping when
  it should due to comparing char * strings with == (on trunk the return value
  being tested is std::string rather than const char *).

* Improve test coverage in several corner cases.

* Fix testcase consistency2 to actually be run (fortunately it passes).

* In the generated testcases, call get_description() on the default
  constructed object of each class to make sure that works (and doesn't try to
  dereference NULL, or fail some assertion, etc).  All currently checked
  classes are fine - this is to avoid future regressions or such problems with
  new classes.

* In the test coverage build, use "--coverage" instead of "-fprofile-arcs
  -ftest-coverage".

* The test harness now has the inmemory backend flagged as supporting
  user-specified metadata (apart from iteration over metadata keys).

matcher:

* If a query contains a MatchAll subquery, check for it before checking the
  other terms so that the loop which checks how many terms match can exit
  early if they all match.

* When an OR or ANY_MAYBE decayed to an AND, we were carefully swapping the
  children for maximum efficiency, but the condition was reversed so we were
  in fact making things worse.  This was noticed because it was resulting in
  the same query running faster when more results were asked for!

* Only build the termname to termfreq and weight map for the first subdatabase
  instead of rebuilding it for each one.  Also don't copy this map to return
  it.  This should speed up searches a little, especially those over multiple
  databases.

* If a submatcher fails but ErrorHandler tells us to continue without it, we
  just use a NULL pointer to stand in rather than allocating a special dummy
  place-holder object.

* Remove AndPostList, in favour of MultiAndPostList.  AndPostList was only used
  as a decay product (by AndMaybePostList and OrPostList), and doesn't appear
  to be any faster.  Removing it reduces CPU cache pressure, and is less code
  to maintain.

* Call check() instead of skip_to() on the optional branch of AND_MAYBE.

flint backend:

* Fix a bug in TermIterator::skip_to() over metadata keys.

remote backend:

* Fix xapian-tcpsrv --interface option to work on MacOS X (ticket#373).

* Fix typo which caused us to return the docid instead of the maximum weight
  a document from a remote match could return!  This could have led to wrong
  results when searching multiple databases with the remote backend, but
  probably usually didn't matter as with BM25 the weights are generally small
  (often all < 1) while docids are inevitably >= 1.

inmemory backend:

* The inmemory backend doesn't support iterating over metadata keys.  Trying
  to do so used to give an empty iteration, but has now been fixed to throw
  UnimplementedError (and this limitation has now been documented).

build system:

* Remove a lot of unused header inclusions and some unused code which should
  make the build faster and slightly smaller.

* Fix to compile under --disable-backend-flint, --disable-backend-remote, and
  --disable-backend-inmemory.

* Don't remove any built sources in "make clean" even under
  --make-maintainer-mode as that breaks switching a tree away from
  maintainer-mode with: make distclean;./configure

* configure: Enable more GCC warnings - "-Woverloaded-virtual" for all
  versions, "-Wstrict-null-sentinel" for 4.0+, "-Wlogical-op
  -Wmissing-declarations" for 4.3+.  Notably "-Wmissing-declarations" caught
  that consistency2 wasn't being run.

* Internally, fix the few places where we pass std::string by value to pass
  by const reference instead (except where we need a modifiable copy anyway) as
  benchmarking shows that const reference is slightly faster and generates
  less code with GCC's reference counted std::string implementation - with a
  non-reference counted implementation, const reference should be much faster.
  (ticket#140)

documentation:

* INSTALL: We no longer regularly test build with GCC 2.95.4 and we're raising
  the minimum GCC version required to 3.1 for Xapian 1.1.x.

* Document what passing maxitems=0 to Enquire::get_mset() does.

* docs/queryparser.html: Add examples of using a prefix on a phrase or
  subexpression.

* Correct doxygen comments for user metadata functions:
  Database::get_metadata() can't throw UnimplementedError but
  WritableDatabase::set_metadata() can.

* Document that Database::metadata_keys_begin() returns an end iterator if the
  backend doesn't support metadata.

* HACKING: Update the list of Debian/Ubuntu packages needed for a development
  environment.

debug code:

* Fix build with --enable-debug.

* Added some more assertions.

Xapian-core 1.0.12 (2009-04-19):

API:

* WritableDatabase::remove_spelling() now works properly.

* The QueryParser now treats NON_SPACING_MARK Unicode characters as phrase
  generators, which improves handling of Arabic.  This is a stop-gap solution
  for 1.0.x which will work with existing databases without requiring
  reindexing - in 1.1.0, NON_SPACING_MARK will be regarded as part of a word.
  (ticket#355)

* Fix undefined behaviour in distribution of OP_NEAR and OP_PHRASE over a
  non-leaf subquery (indentified by valgrind on testcase nearsubqueries1).
  (ticket#349)

* Enhance distribution of OP_NEAR/OP_PHRASE over non-leaf subqueries to work
  when there are multiple non-leaf subqueries (ticket#201).

* Enquire::get_mset() no longer needlessly checks if the documents exist.

* PostingIterator::get_description() output improved visually in some cases.

testsuite:

* Add make targets to assist generating a testsuite code coverage report with
  lcov.  See HACKING for details.

* Improved test coverage in a number of places and removed some used code as
  shown by lcov's coverage report.

flint backend:

* xapian-compact:

  + Now handles databases which contains no documents but have user metadata
    (ticket#356).

  + Fix test for the total document length overflowing.

* Release the database lock if the database is closed due to an unrecoverable
  error during modifications. (ticket#354)

* If we fail to get the lock after we spawn the child lock process (the common
  case is because the database is already open for writing) then we now clean
  up the child process properly.

build system:

* Overriding CXXFLAGS at make-time (e.g. "make CXXFLAGS=-Os") no longer
  overrides any flags configure detected to be required to make the compiler
  accept ISO C++ (for GCC, no such flags are required, so this doesn't
  change anything).

documentation:

* Update documentation and code comments to reflect that 1.1 will be a
  development series, and 1.2 the next release series.

* docs/admin_notes.html: Document the child process used for locking which
  exec-s "cat" (ticket #258).

* include/xapian/unicode.h: Fix documentation comment typos.

* include/xapian/matchspy.h: Removed currently unused header to stop doxygen
  from generating documentation for it.

Xapian-core 1.0.11 (2009-03-15):

API:

* Enquire::get_mset():

  + Now throws UnimplementedError if there's a percentage cutoff and sorting is
    primarily by value - this has never been correctly supported and it's
    better to warn people than give incorrect results.

  + No longer needlessly copies the results internally.

  + When searching multiple databases, now recalculates the maximum attainable
    weight after each database which may allow it to terminate earlier.
    (ticket#336).

  + Fix inconsistent percentage scores when sorting primarily by value, except
    when a MatchDecider is also being used; document this remaining problem
    case.  (ticket#216)

* Enquire::set_sort_by_value() (and similar methods): Rename the wrongly named
  "ascending" parameter to "reverse", and note that its value should always be
  explicitly given since defaulting to "reverse=true" is confusing and the
  default will be deprecated in 1.1.0.  (ticket#311)

* Database::allterms_begin(): Fix memory leak when iterating all terms from
  more than one database.

* Query::get_terms_begin(): Don't return "" from the TermIterator (happened
  when the query contained or was Query::MatchAll).

* Add QueryParser::FLAG_DEFAULT to make it easier to add flags to those set by
  default.

testsuite:

* The testsuite now reports problems detected by valgrind with newer valgrind
  versions.  Drop support for running the testsuite under valgrind < 3.3.0
  (well over a year old) as this greatly simplifies the configure tests.

* Fix usage message for options which take arguments in --help output from test
  programs - "-x=foo" doesn't work, the correct syntax is "-x foo".

* If comparing MSet percentages fails, report the differing percentages if in
  verbose mode.

* Add test that backends don't truncate total document length to 32 bits.

* Disable lockfileumask1 (regression testcase added in 1.0.10) on Cygwin and on
  OS/2.

flint backend:

* The configure test for pread() and pwrite() got accidentally disabled in
  0.8.4 and we've always been using llseek() followed by read() or write()
  since then.  The configure test is now fixed, and gives a slight speedup
  (3% measured for searching).

* The child process used to implement WritableDatabase locking now changes
  directory to / so that it doesn't block unmounting of any partitions and
  closes any open file descriptors which aren't relating to locking so that
  if those files are closed by our parent and deleted the disk space gets
  released right away.

* We now reuse the same zlib zstream structures rather than using a fresh
  one for each operation.  This doesn't make a measurable difference in
  our own tests on Linux but reportedly is measurably faster on some
  systems.  (ticket #325)

quartz backend:

* The pread()/pwrite() fix also speeds up quartz.

remote backend:

* Avoid copying Query::Internal objects needlessly when unserialising Query
  objects.

inmemory backend:

* Store the (non-normalised) document lengths as Xapian::termcount (unsigned
  int) rather than Xapian::doclength (double) which saves 4 bytes per document.

build system:

* configure: The output of g++ --version changed format (again) with GCC 4.3
  which meant configure got "g++" for the version.  Instead use the (hopefully)
  more robust technique of using g++ -E to pull out __GNUC__ and
  __GNUC_MINOR__.

documentation:

* API documentation:

  + WritableDatabase::flush() can't throw DatabaseLockError.

  + WritableDatabase's constructor can throw at least DatabaseCorruptError or
    DatabaseLockError.

  + Document how to get all matches from Enquire::get_mset().

  + Other minor improvements.

* docs/sorting.html: Clarify meaning.

portability:

* Fix "#line" directives in generated file queryparser/queryparser_internal.cc
  to give a relative path - previously they had a full path when generated by a
  VPATH build (as release tarballs are), and this confused GCC 2.95 and
  depcomp.

* Fix for compiling with Sun's compiler (untested as we no longer have access
  to it).

Xapian-core 1.0.10 (2008-12-23):

API:

* Composing an OP_NEAR query with two non-term subqueries now throws
  UnimplementedError instead of AssertionError (in a --enable-assertions build)
  or leading to unexpected results (otherwise).  This partly addresses bug#201.

* Using a MultiValueSorter with no values set no longer causes a hang or
  segmentation fault (but it is still rather pointless!)

matcher:

* If we're using values for sorting and for another purpose, cache the
  Document::Internal object created to get the value for sorting, like we do
  between other uses.

flint backend:

* If the disk became full while flushing database changes to disk, the
  WritableDatabase object would throw a DatabaseError exception but be left in
  an inconsistent state such that further use could lead to the database on
  disk ending up in a "corrupt" state (theoretically fixable, but no tool
  to fix such a database exists).  Now we try to ensure that the object is
  left in a consistent state, but if doing so throws a further exception, we
  put the WritableDatabase object in a "closed" state such that further
  attempts to use it throw an exception.

* Create the lockfile "flintlock" with permissions 0666 so that the umask is
  honoured just like we do for the other files (previously we used 0600).
  Previously it wasn't possible to lock a database for update if it was
  owned by another user, even if you otherwise had sufficient permissions via
  "group" or "other".

* Fix garbled exception message when a base file can't be reread.

quartz backend:

* Fix garbled exception message when a base file can't be reread.

remote backend:

* xapian-tcpsrv and xapian-progsrv now accept -w as a short form of --writable,
  as was always intended.

build system:

* This release now uses newer versions of the autotools (autoconf 2.62 ->
  2.63; automake 1.10.1 -> 1.10.2).

documentation:

* INSTALL: Add new paragraphs about HP's aCC and IRIX (adapted from footnotes
  in PLATFORMS).

* PLATFORMS: HP testdrive has been shut down, so all mark all those machines as
  "no longer available".  Update atreus' build report to 1.0.10.

* docs/queryparser.html: Add link to valueranges.html.

examples:

* delve: Add missing "and" to --help output.  Report termfreq and collection
  freq for each term we're asked about.

portability:

* Fix to build with GCC 4.4 snapshot.

Xapian-core 1.0.9 (2008-10-31):

API:

* Database::get_spelling_suggestion() is now faster (15% speed up for parsing
  queries with FLAG_SPELLING_CORRECTION set in a test on real world data).

* Fix OP_ELITE_SET segmentation fault due to excess floating point precision
  on x86 Linux (and possibly other platforms).

* Database::allterms_begin() over multiple databases now gives a TermIterator
  with operations O(log(n)) rather than potentially O(n) in the number of
  databases.

* Add new Database methods metadata_keys_begin() and metadata_keys_end() to
  allow the complete list of metadata in a database to be retrieved (this
  API addition is needed so that copydatabase can copy database metadata).

testsuite:

* Remove the cached test databases before running the testsuite.

* apitest: Fix cursordelbug1 to work on Microsoft Windows (bug#301).

* apitest,queryparsertest: Skip tests which fail because the timer granularity
  is too coarse to measure how long the test took.  In practice, this is only
  an issue on Microsoft Windows (bug#300 and bug#308).

matcher:

* Adjust percent cutoff calculations in the matcher in a way which corresponds
  to the change to percentage calculations made in 1.0.7 to allow for excess
  precision.

* Query::MatchAll no longer gives match results ranked by increasing document
  length.

flint backend:

* xapian-compact: Fix crash while compacting spelling table for a single
  database when built with MSVC, and probably other platforms, though Linux
  got lucky and happened to work (bug#305).

build system:

* configure: Disable -Wconversion for now - it's not useful for older GCC and
  is buggy in GCC 4.3.

* configure: Set -Wstrict-overflow to 1 instead of 5, to avoid unreasonable
  warnings under GCC 4.3.

documentation:

* Minor improvements to API documentation, including documenting the
  XAPIAN_FLUSH_THRESHOLD environmental variable in WriteableDatabase::flush()
  (bug#306).

* valueranges.html: Fix typos in example code, and drop superfluous empty
  destructor from ValueRangeProcessor subclass.

* HACKING: Several improvements.

examples:

* copydatabase: Also copy user metadata.

Xapian-core 1.0.8 (2008-09-04):

API:

* Fix output of RSet::get_description

testsuite:

* Report subtotals per backend, rather than per testgroup per backend to make
  the output easier to read.

flint backend:

* Fix WritableDatabase::add_document() and replace_document() not to be O(n*n)
  in the number of values in the new document.

* Fix handling of a table created lazily after the database has had commits,
  and which is then cursored while still in sequential mode.

* Fix failure to remove all the Btree entries in some cases when all the
  postings for a term are removed.  (bug#287)

* xapian-inspect: Show the help message on start-up.  Correct the documented
  alias for next from ' ' to ''.  Avoid reading outside of input string when it
  is empty.  (bug#286)

quartz backend:

* Backport fix from flint for WritableDatabase::add_document() and
  replace_document() not to be O(n*n) in the number of values in the new
  document.

build system:

* configure: Report bug report URL in --help output.

* xapian-config: Report bug report URL in --help output.

* configure: Fix deprecation error for --enable-debug=full to say to instead
  use '--enable-assertions --enable-log' not '--enable-debug --enable-log'.

documentation:

* valueranges.html: Expand on some sections.

examples:

* quest: Fix to catch QueryParserError instead of const char * which
  QueryParser threw in Xapian < 1.0.0.

* copydatabase: Use C++ forms of C headers.  Only treat '\' as a directory
  separator on platforms where it is.  Update counter every 13 counting up to
  the end so that the digits all "rotate" and the counter ends up on the exact
  total.

portability:

* Eliminate literal top-bit-set characters in testsuite source code.

Xapian-core 1.0.7 (2008-07-15):

API:

* OP_VALUE_RANGE, OP_VALUE_GE, and OP_VALUE_LE:

  + If there were gaps in the document id numbering, these operators could
    return document ids which weren't present in the database.  This has been
    fixed.

  + These operators are now more efficient when there are a lot of "missing"
    document ids (bug#270).

  + Optimise Query(OP_VALUE_GE, <n>, "") to Query::MatchAll.

* Xapian::QueryParser:

  + QueryParser now stops parsing immediately when it hits a syntax error.
    This doesn't change behaviour, but does mean failing to parse queries is
    now more efficient.

  + Cases of O(N*N) behaviour have been fixed.

* Xapian::Stem now recognises "nl" as an alias for "dutch" (debian bug 484458).

* Setting sort by value was being ignored by a Xapian::Enquire object which had
  previously had a Xapian::Sorter set (bug#256).

testsuite:

* Improved test coverage in a few places.

matcher:

* When using a MatchDecider, we weren't reducing matches_lower_bound unless
  all the potential results were retrieved, which led to the lower bound
  being too high in some such cases.

* We now track how many documents were tested by a MatchDecider and how many
  of those it rejected, and set matches_estimated based on this rate.  Also,
  matches_upper_bound is reduced by the number of rejected documents.

* Fixed matches_upper_bound in some cases when collapsing and using a
  MatchDecider.

* Fixed matches_lower_bound when collapsing and using a percentage cutoff.

* When using two or more of a MatchDecider, collapsing, or a percentage
  cutoff, we now only round the scaled estimate once, and we also round it to
  the nearest rather than always rounding down.  Hopefully this should
  improve the estimate a little in such cases.

* Fix problem on x86 with the top match getting 99% rather than 100% (caused
  by excess precision in an intermediate value).

flint backend:

* If Database::reopen() is called and the database revision on disk hasn't
  changed, then do as little work as possible.  Even if it has changed, don't
  bother to recheck the version file (bug#261).

* xapian-compact:

  + Fix check for user metadata key to not match other key types we may add in
    the future.  When compacting, we can't assume how we should handle them.

  + If the same user metadata key is present in more than one source database
    with different tag values, issue a warning and copy an arbitrary tag value.

  + Fix potential SEGV when compacting database(s) with user metadata but no
    postings.

  + In error message, refer to "iamflint" as the "version file", not the
    "meta file".

* xapian-inspect:

  + Print top-bit-set characters as escaped hex forms as they often won't be
    valid UTF-8 sequences.

  + If we're passed a database directory rather than a single table, issue a
    special error message since this is an obvious mistake for users to make.

* Fix cursor handling for a modified table which has previously only had
  sequential updates which usually manifested as zlib errors (bug#259).

quartz backend:

* Fix cursor handling for a modified table which has previously only had
  sequential updates which usually manifested as incorrect data being returned
  (bug#259).

* Calling skip_to() as the first operation on an all-documents PostingIterator
  now works correctly.

remote backend:

* Improve performance of matches with multiple databases at least one of which
  is remote, and when the top hit is from a remote database (bug#279).

* When remote protocol version doesn't match, the error message displayed
  now shows the minor version number supplied by the server correctly.

* We now wait for the connection to close after sending MSG_SHUTDOWN for a
  WritableDatabase, which ensures that changes have been written to disk
  and the lock released before the WritableDatabase destructor returns
  (as is the case with a local database).

* We no longer ever send MSG_SHUTDOWN for a read-only Database - just closing
  the connection is enough (and is protocol compatible).

inmemory backend:

* Fix bug which resulted in the values not being stored correctly when
  replacing an existing document, or if there are gaps in the document id
  numbering.

build system:

* This release now uses newer versions of the autotools (autoconf 2.61 ->
  2.62; automake 1.10 -> 1.10.1; libtool 1.5.24 -> 1.5.26).  The newer
  autoconf reportedly results in a faster configure script, and warns about
  use of unrecognised configure options.

* Fix configure to recognise --enable-log=profile and fix build problems when
  this is enabled.

* "make up" in the "tests" subdirectory now does "make" in the top-level.

* Fix "make distcheck" by using dist-hook to install generated files from
  either srcdir or builddir, with the appropriate dependency to generate them
  automatically in maintainer mode builds.

documentation:

* intro_ir.html: Improve wording a bit.

* The documentation now links to trac instead of bugzilla.  For links to the
  main website, we now prefer xapian.org to www.xapian.org.

* Doxygen-generated API documentation:

  + Improved documentation in several places.

  + The helper macro XAPIAN_VISIBILITY_DEFAULT no longer appears in the output.

  + Header and directory relationship graphs are no longer generated as they
    aren't actually informative here.

* HACKING: Numerous updates and improvements.

examples:

* quest: Output get_description() of the parsed query.

portability:

* Fix build with GCC 2.95.3.

* Fix build with GCC 4.3.

* Newer libtool features improved support for Mac OS X Leopard and added
  support for AIX 6.1.

debug code:

* Database::get_spelling_suggestion() now debug logs with category APICALL
  rather than SPELLING, for consistency with all other API methods.

* Added APICALL logging to a few Database methods which didn't have it.

* Remove debug log tracing from get_description() methods since logging for
  other methods calls get_description() methods on parameters, so logging these
  calls just makes for more confusing debug logs.  A get_description() method
  should have no side-effects so it's not very interesting even when explicitly
  called by the user.

Xapian-core 1.0.6 (2008-03-17):

API:

* Add new query operators OP_VALUE_LE and OP_VALUE_GE which perform "single
  ended" range checks, and a corresponding new Query constructor.

* Add Unicode::toupper() to complement Unicode::tolower().

* Xapian::Stem has been further optimised - stemtest now runs ~2.5% faster.

testsuite:

* tests/runtest: Fixed to handle test programs with a ".exe" extension.

* tests/queryparsertest: Add a couple more testcases which already work to
  improve test coverage.

* tests/apitest: Add caseconvert1 testcase to test Unicode::tolower() and
  Unicode::toupper().

flint backend:

* xapian-check: Fix not to report an error for a database containing no
  postings but some user metadata.

* Update the base files atomically to avoid problems with reading processes
  finding partially written ones.

* Create lazy tables with the correct revision to avoid producing a database
  which we later report as "corrupt" (bug#232).

* xapian-compact: Fix compaction for databases which contain user metadata
  keys.

quartz backend:

* Update the base files atomically to avoid problems with reading processes
  finding partially written ones.

remote backend:

* The addition of OP_VALUE_LE and OP_VALUE_GE required an update to the Query
  serialisation, which required a minor remote protocol version bump.

* Fix to actually set the writing half as the connection as non-blocking when
  a timeout is specified.  This would have prevented timeouts from operating
  correctly in some situations.

build system:

* configure: GCC warning flag overhaul:  Stop passing "-Wno-multichar" since
  any multi-character character literal is bound to be a typo (I believe we
  were only passing it after misinterpreting its sense!)  Pass
  "-Wformat-security", and "-Wconversion" for all GCC versions.  Add
  "-Winit-self" and "-Wstrict-overflow=5" for GCC >= 4.2.  The latter might
  prove too aggressive, but seems reasonable so far.  Fix some minor niggles
  revealed by "-Wconversion" and "-Wstrict-overflow=5".

* Add XAPIAN_NORETURN() annotations to functions and non-virtual methods which
  don't return.

documentation:

* docs/intro_ir.html: Briefly mention how pure boolean retrieval is supported.

* docs/valueranges.html: Fix example of using multiple VRPs to come out as a
  "program listing".

* include/xapian/queryparser.h: Fix incorrect example in doccomment.

* docs/quickstart.html: Remove information covered by INSTALL since
  there's no good reason to repeat it and two copies just risks one
  getting out of date (as has happened here!)

* docs/quickstart.html: Fix very out of date reference to MSet::items
  (bug#237).

* PLATFORMS: Remove reports for 0.8.x as they're too old to be interesting.
  Separate out 0.9.x reports.  Add Solaris 9 and 10 success reports from James
  Aylett.  Update from Debian buildd logs.

portability:

* Now builds on OS/2, thanks to a patch by Yuri Dario.

* Fix testsuite to build on mingw (broken by changes in 1.0.5).

debug code:

* Fix --enable-assertions build, broken by changes in 1.0.5.

Xapian-core 1.0.5 (2007-12-21):

API:

* More sophisticated sorting of results is now possible by defining a
  functor subclassing Xapian::Sorter (bug#100).

* Xapian::Enquire now provides a public copy constructor and assignment
  operator (bug#219).

* Xapian::Document::values_begin() didn't ensure that values had been read
  when working on a Document read from a database.  However, values_end() did
  (and so did values_count()) so this wasn't generally a problem in practice.

* Xapian::PostingIterator::skip_to() now works correctly when running over
  multiple databases.

* Xapian::Database::postlist_begin() no longer adds a "MultiPostList" wrapper
  for the common case when there's only one subdatabase.

* Xapian::TradWeight now avoids division by zero in the (rare) situation of the
  average document length being zero (which can only happen if all documents
  are empty or only have terms with wdf 0).

* Calling Xapian::WritableDatabase methods when we don't have exactly one
  subdatabase now throws InvalidOperationError.

testsuite:

* apitest:

  + Testcases now describe the conditions they need to run, and are
    automatically collated by a Perl script.  This makes it significantly
    easier to add a new testcase.

  + The test harness's "BackendManager" has been overhauled to allow
    cleaner implementations of testcases which are currently hard to
    write cleanly, and to make it easier to add new backend settings.

  + Add a "multi" backend setting which runs suitable tests over two
    subdatabases combined.  There's a corresponding new make target
    "check-multi".

  + Add more feature tests of document values.

  + sortrel1 now runs for inmemory too.

  + Add simple feature test for TradWeight being used to run a query.

  + Fix spell3 to work on Microsoft Windows (bug#177).

  + API classes are now tested to check they have copy constructors and
    assignment operators, and also that most have a default constructor.

  + quartztest testcases adddoc2 and adddoc3 have been reworked as apitest
    testcases adddoc5 and adddoc6, which run for other backends.

  + stubdb1 now explicitly creates the database it needs - generally this
    bug didn't manifest because an earlier test has already created it.

* queryparsertest: Add feature tests to check that ':' is being inserted
  between prefix and term when it should be.

* Fix extracting of valgrind error messages in the test harness.

* tests/valgrind.supp: Add more variants of the zlib suppressions.

matcher:

* Xapian::Enquire: When the "first" parameter to get_mset() is non-zero, avoid
  copying all the wanted items after performing the match.

* Fix bug in handling a pure boolean match over more than one database under
  set_docid_order(ASCENDING) - we used to exit early which isn't correct.

* When collapsing on a value, give a better lower bound on the number of
  matches by keeping track of the number of empty collapse values seen.

* Xapian::BM25Weight: Fix bug when k2 is non-zero: a non-initialised value
  influenced the weight calculations.  By default k2 is zero, so this bug
  probably won't have affected most users.

* The mechanism used to collate term statistics across multiple databases has
  been greatly simplified (bug#45).

flint backend:

* xapian-check:

  + Update to handle flint databases produced by Xapian 1.0.3 and later.

  + Fix not to go into an infinite loop if certain checks fail.

quartz backend:

* quartzcompact: Fix equality testing of C strings to use strcmp() rather than
  '=='!  In practice, using '==' often gives the desired effect due to pooling
  of constant strings, but this may have resulted in a bug on some platforms.

remote backend:

* If we're doing a match with only one database which is remote then just
  return the unserialised MSet from the remote match.  This requires an
  update to the MSet serialisation, which requires a minor remote protocol
  version bump.

build system:

* XO_LIB_XAPIAN now hooks LT_INIT as well as AC_PROG_LIBTOOL and
  AM_PROG_LIBTOOL.

* Distribute preautoreconf, dir_contents, docs/dir_contents and
  tests/dir_contents.

* Fix preautoreconf to correctly handle all the sources passed to doxygen to
  create the collated internal source documentation, and to work in a VPATH
  build.

documentation:

* sorting.html: New document on the topic of sorting match results.

* HACKING,admin_notes.html,bm25.html,glossary.html,intro_ir.html,overview.html,
  quickstart.html,scalability.html,termgenerator,html,synonyms.html: Assorted
  minor improvements.

* valueranges.html: State explicitly that Xapian::sortable_serialise() is used
  to encode values at index time, and give an example of how it is called.

* API documentation:

 + Clarify get_wdf() versus get_termfreq().

 + We now use pngcrush to reduce the size of PNG files in the HTML version.

 + The HTML version no longer includes various intermediate files which doxygen
   generates.

 + Hide the v102 namespace from Doxygen as it isn't user visible.

 + Stop describing get_description() as an "Introspection method", as this
   doesn't help to explain what it does, and get_description() doesn't really
   fall under common formal definitions of "introspection".

* index.html: Add a list of documents on particular topics and include links to
  previously unlinked-to documents.  Weed down the top navigation bar which had
  grown to unwieldy length.

* PLATFORMS: Update for Debian buildds.

* Improve documentation comment for Document::termlist_count().

* admin_notes.html: Note that this document is up-to-date for 1.0.5.

* INSTALL: zlib 1.2.0 apparently fixes a memory leak in deflateInit2(), which
  we use, so that's another reason to prefer 1.2.x.

portability:

* Add explicit includes of C headers needed to build with the latest snapshots
  of GCC 4.3.  Fix new warnings.

* xapian-config: On platforms which we know don't need explicit dependencies,
  --ltlibs now gives the same output as --libs.

* The minimum supported GCC version is now 2.95.3 (rather than 2.95) as 2.95.3
  added support for '#include <sstream>' which means we no longer need to
  maintain our own version.

* Fix build with SGI's compiler on IRIX.

* Fix or suppress some MSVC warnings.

debug code:

* Remove incorrect assertion in MultiAndPostList (bug#209).

* Fix build when configured with "--enable-log --disable-assertions".

Xapian-core 1.0.4 (2007-10-30):

API:

* Query:

  + Add OP_SCALE_WEIGHT operator (and a corresponding constructor which
    takes a single subquery and a parameter of type "double").  This
    multiplies the weights from the subquery by the parameter, allowing
    adjustment of the importance of parts of the query tree.

  + Deprecate the essentially useless constructor Query(Query::op, Query).

* QueryParser:

  + A field prefix can now be set to expand to more than one term prefix.
    Similarly, multiple term prefixes can now be applied by default.  This is
    done by calling QueryParser::add_boolean_prefix() or
    QueryParser::add_prefix() more than once with the same field name but a
    different term prefix (previously subsequent calls with the same field name
    had no effect).

  + Trying to set the same field as probabilistic and boolean now throws
    InvalidOperationError.

  + Fix parsing of `term1 site:example.org term2', broken by changes in 1.0.2.

  + Drop special treatment for unmatched ')' at the start of the query, as it
    seems rather arbitrary and not particularly useful and was causing us to
    parse `(site:example.org) -term' incorrectly.

  + The QueryParser now generates pure boolean Query objects for strings such
    as `site:example.org' by applying OP_SCALE_WEIGHT with a factor of 0.0.

  + Fix handling of `"quoted phrase" +term' and `"quoted phrase" -term'.

  + Fix handling of `site:example.org -term'.

  + Fix problem with spelling correction of hyphenated terms (or other terms
    joined with phrase generators): the position of the start of the term
    wasn't being reset for the second term in the generated phrase, resulting
    in out of bounds errors when substituting the new value in the corrected
    query string.

  + The parser stack is now a std::vector<> rather than a fixed size, so it
    will typically use less memory, and can't hit the fixed limit.

  + Fix handling of STEM_ALL and update the documentation comment for
    QueryParser::set_stemming_strategy() to explain how it works clearly.

* PostingIterator: positionlist_begin() and get_wdf() should now always
  throw InvalidOperationError where they aren't meaningful (before in some
  cases UnimplementedError was thrown).

testsuite:

* Add tests for new features.

* Add another valgrind suppression for a slightly different error from zlib
  in Ubuntu gutsy.

* Remove quartztest's test_postlist1 and test_postlist2, replacing the coverage
  lost by extending and adding tests which work with other backends as well.

* If a test throws a subclass of std::exception, the test harness now
  reports the class name and the extra information returned by std::exception's
  what() method.

matcher:

* Several performance improvements have been made, mainly to the handling
  of OP_AND and related operations (OP_FILTER, OP_NEAR, and OP_PHRASE).
  In combination, these are likely to speed up searching significantly
  for most users - in tests on real world data we've seen savings of 15-55%
  in search times).  These improvements are:

  + OP_AND of 3 or more sub-queries is now processed more efficiently.

  + Sub-queries from adjacent OP_AND, OP_FILTER, OP_NEAR, and OP_PHRASE are now
    combined into a single multi-way OP_AND operation, and the filters which
    implement the near/phrase restrictions are hoisted above this so they need
    to check fewer documents (bug#23).

  + If an OP_OR or OP_AND_MAYBE decays to OP_AND, we now ensure that the less
    frequent sub-query is on the left, which OP_AND is optimised to expect.

* When the Enquire::get_mset() parameter checkatleast is set, and we're sorting
  by relevance with forward ordering by docid, and the query is pure boolean,
  the matcher was deciding it was done before the checkatleast requirement was
  satisfied.  Then the adjustments made to the estimated and max statistics
  based on checkatleast meant the results claimed there were exactly msize
  results.  This bug has now been fixed.

* Queries involving an OP_VALUE_RANGE filter now run around 3.5 times faster
  (bug#164).

* The calculations behind MSet::get_matches_estimated() were always rounding
  down fractions, but now round to the nearest integer.  Due to cumulative
  rounding, this could mean that the estimate is now a few documents higher in
  some cases (and hopefully a better estimate).

* Implement explicit swap() methods for internal classes MSetItem and ESetItem
  which should make the final sort of the MSet and ESet a little more
  efficient.

flint backend:

* Fixed a bug introduced in 1.0.3 - trying to open a flint database for reading
  no longer fails if it isn't writable.

* We no longer use member function pointers in the Btree implementation which
  seems to speed up searching a little.

remote backend:

* The remote protocol minor version has been increased (to accommodate
  OP_SCALE_WEIGHT).  If you are upgrading a live system which uses the
  remote backend, upgrade the servers before the clients.

build system:

* Added macro machinery to allow branch prediction hints to be specified and
  used by compilers which support this (current GCC and Intel C++).

* In a developer build, look for rst2html.py if rst2html isn't found as some
  Linux distros have it installed under with an extension.

documentation:

* In the API documentation, explicitly note that Database::get_metadata()
  returns an empty string when the backend doesn't support user-specified
  metadata, and that WritableDatabase::set_metadata() throws UnimplementedError
  in this case.  Also describe the current behaviour with multidatabases.

* README: Remove the ancient history lesson - this material is better left to
  the history page on the website.

* deprecation.html:

  + Deprecate the non-pythonic iterators in favour of the pythonic ones.

  + Move "Stem::stem_word(word)" in the bindings to the right section (it was
    done in 1.0.0, as already indicated).

  + Improve formatting.

* When running rst2html, using "--verbose" was causing "info" messages to be
  included in the HTML output, so drop this option and really fix this issue
  (which was thought to have been fixed by changes in 1.0.3).

* install.html: Reworked - this document now concentrates on giving
  a brief overview of building which should be suitable for most common cases,
  and defers to the INSTALL document in each tarball for more details.

* PLATFORMS: Update from tinderbox and buildbot.

* remote.html: xapian-tcpsrv has been able to handle concurrent read
  access since 0.3.1 (7 years ago) so update the very out-of-date information
  here.  Also, note that some newer features aren't supported by the remote
  backend yet.

* HACKING: Note specifically that std::list::size() is O(n) for GCC.

* intro_ir.html: Add link to the forthcoming book "Introduction to
  Information Retrieval", which can be read online.

* scalability.html: Update size of gmane.

* quartzdesign.html: Note that Quartz is now deprecated.

debug code:

* The debug assertion code has been rewritten from scratch to be cleaner and
  pull in fewer other headers.

Xapian-core 1.0.3 (2007-09-28):

API:

* Add support for user specified metadata (bug#143).  Currently supported by
  the flint and inmemory backends.

* Deprecate Enquire::register_match_decider() which has always been a no-op.

* Improve the lower bound on the number of matching documents for an AND query
  - if the sum of the lower bounds for the two sides is greater than the
  number of documents in the database, then some of them must have both terms.

* Spelling correction: Fix off-by-one error in loop bounds when initialising
  (bug#194).

* If the check_at_least parameter to Enquire::get_mset() is used, but there
  aren't that many results, then MSet::get_matches_lower_bound() and
  MSet::get_matches_upper_bound() weren't always reported as equal - this
  bug is now fixed.

* When sorting by value, and using the check_at_least parameter to
  Enquire::get_mset(), some potential matches weren't being counted.

* Failing to create a flint or quartz database because we couldn't create the
  directory for it now throws DatabaseCreateError not DatabaseOpeningError.

testsuite:

* Fix display of valgrind output when a test fails because valgrind detected
  a problem.

* Add another version of valgrind suppression for the zlib end condition check
  as this gives a different backtrace for zlib in Ubuntu gutsy.

flint backend:

* The Flint database format has been extended to support user metadata, and
  each termlist entry is now a byte shorter (before compression).  As a
  result, Xapian 1.0.2 and earlier won't be able to read Xapian 1.0.3
  databases.  However, Xapian 1.0.3 can read older databases.  If you open an
  older flint database for writing with Xapian 1.0.3, it will be upgraded
  such that it cannot then be read by Xapian 1.0.2 and earlier.

* Zlib compression wasn't being used for the spelling or synonym tables (due
  to a typo - Z_DEFAULT_COMPRESSION where it should be Z_DEFAULT_STRATEGY).

* xapian-check: Allow "db/record." and "db/record.DB" as arguments.

* Fix "key too long" exception message by substituting FLINT_BTREE_MAX_KEY_LEN
  with its numeric value.

* Assorted minor efficiency improvements.

* If we reach the flush threshold during a transaction, we now write out the
  postlist changes, but don't actually commit them.

* Check length of new terms is at most 245 bytes for flint in add_document()
  and replace_document() so that the API user gets an error there rather
  than when flush() is called (explicitly or implicitly).  Fixes bug#44.

* Flint used to read the value of the environmental variable
  XAPIAN_FLUSH_THRESHOLD when the first WritableDatabase was opened and would
  then cache this value.  However the program using Xapian may have changed
  it, so we now reread it each time a WritableDatabase is opened.

* Implement TermIterator::positionlist_count() for the flint backend.

remote backend:

* Fix the result of MSet::get_matches_lower_bound() when using the
  check_at_least parameter to get_mset().

inmemory backend:

* Implement TermIterator::positionlist_count() for the inmemory backend.

build system:

* xapian-config: We always need to include dependency_libs in the output of
  `xapian-config --libs` if shared libraries are disabled.

* Distribution tarballs are now in the POSIX "ustar" format.  This supports
  pathnames longer than 99 characters (which we now have a few instances of
  in the doxygen generated documentation) and also results in a distribution
  tarball that is about half the size!  This format should be readable by any
  tar program in current use - if your tar program doesn't support it, we'd
  like to know (but note that the GNU tar tarball is smaller than the size
  reduction in the xapian-core tarball...)

* configure no longer generates msvc/version.h - this is now entirely handled
  by the MSVC-specific makefiles.

documentation:

* Add a glossary.

* docs/stemming.html: Reorder the initial paragraphs so we actually answer the
  question "What is a stemming algorithm?" up front.

* When running rst2html, use "--exit-status=warning" rather than "--strict".
  The former actually gives a non-zero exit status for a warning or worse,
  while the former doesn't, but does include any "info" messages in the output
  HTML.

* docs/deprecation.rst: Add "Database::positionlist_begin() throwing
  RangeError and DocNotFoundError".

* valueranges.rst: Correct out-of-date reference to float_to_string.

* HACKING: Document a few more "coding standards".

* PLATFORMS: Updated.

* docs/overview.html: Restore HTML header accidentally deleted in November
  2006.

* Fix several typos.

portability:

* Add missing instances of "#include <string.h>" to fix compilation with recent
  GCC 4.3 snapshots.

* Fix some warnings for various compilers and platforms.

Xapian-core 1.0.2 (2007-07-05):

API:

* Xapian now offers spelling correction, based on a dynamically maintained
  list of spelling "target" words.  This is currently supported by the
  flint backend, and works when searching multiple databases.

* Xapian now offers search-time synonym expansion, based on an externally
  provided synonym dictionary.  This is currently supported by the flint
  backend, and works when searching multiple databases.

* TermGenerator: now offers support for generating spelling correction
  data.

* QueryParser:

  + New flag FLAG_SPELLING_CORRECTION to enable spelling correction, and a new
    method, "get_corrected_query_string()" to get the spelling corrected
    query string.

  + New flags have been added to allow the new synonym expansion feature to be
    enabled and controlled.  Synonym expansion can either be automatic, or only
    for terms explicitly indicated in the query string by the new "~" operator.

  + The precedence of the boolean operators has been adjusted to match their
    usual precedence in mathematics and programming languages.  "NOT" now binds
    as tightly as "AND" (previously "AND NOT" would bind like "AND", but just
    "NOT" would bind like "OR"!)  Also "XOR" now binds more tightly than "OR",
    but less tightly than "AND" (previously it bound just like "OR").

  + '+' and '-' have been fixed to work on bracketed subexpressions as
    documented.

  + If the stemmer is "none", no longer put a Z prefix on terms; this now
    matches the output of TermGenerator.

* Add new Xapian::sortable_serialise() and Xapian::sortable_unserialise()
  functions which serialise and unserialise numbers (currently only
  doubles) to a string representation which sorts in numeric order.  Small
  integers have a short representation.

* NumberValueRangeProcessor has been changed to work usefully.  Previously
  the numbers had to be the same length; now numbers are serialised to
  strings such that a string sort on the string orders the numbers correctly.
  Negative and floating point numbers are also supported now.  The old
  NumberValueRangeProcessor is still present in the library to preserve
  ABI compatibility, but code linking against 1.0.2 or later will pick
  up the new implementation, which really lives in a sub-namespace.

* Documents now have a get_docid() method, to get the document ID from the
  database they came from.

* Add support for a new type of match decider, called a "matchspy".  Unlike
  the old deciders, this will reliably be tested on every candidate
  document, so can be used to tally statistics on them.

* Fixed a segfault when getting a description for a MatchNothing query
  joined with AND_NOT (bug #176).

* Header files have been tidied up to remove some unnecessary includes.
  Applications using "#include <xapian.h>" will not be affected.  We don't
  intend to support direct inclusion of individual header files from the xapian
  directory, but if you do that, you may have to update you code.

testsuite:

* Feature tests added for all new features.

* Improved test coverage in queryparsertest.  Some tests in queryparsertest
  now use flint databases, so the test now ensures that the .flint
  subdirectory exists.

* The test harness no longer creates <dbdir>/log for flint (flint doesn't
  create a log like quartz does).

* apitest: "-bremote" must now be "-bremoteprog" (to better match
  "-bremotetcp"); "-bvoid" must now be "-bnone" (to better describe not
  using a database backend).

* To complement "make check-flint", "make check-quartz", and "make
  check-remote", you can now run tests for the remotetcp backend with
  "make check-remotetcp", for the remoteprog backend with "make
  check-remoteprog", for the inmemory backend with "make check-inmemory", and
  tests not requiring a backend with "make check-none".

* Several extra tests of the check_at_least parameter supplied to
  get_mset() were added.

* Fix memory leak and fd leak in remotetcp handling, so apitest now passes
  under valgrind.

* quartztest: no longer test QuartzPostList::get_collection_freq(), which
  has been removed.

* Add regression test emptyquery2 for bug #176.

* Add regression test matchall1 for bug with MatchAll queries.

* Enhanced test coverage of match functor, to check that it returns all
  matching documents.

matcher:

* Fix bug when check_at_least was supplied - the matches after the
  requested MSet size were being returned to the user.  The parameter is
  also now handled in a more efficient way - no extra memory is required
  (previously, extra memory proportional to the value of check_at_least was
  required).

* Fix bug which used incorrect statistics, and caused assertion failures,
  when performing a search using a MatchAll query.

* Optimisation for single term queries: we don't need to look at the top
  document's termlist to determine that it matches all the query terms.

flint backend:

* The value and position tables are now only created if there is anything to
  add to them.  So if you never use document values, there's no value.DB,
  value.baseA, or value.baseB.  This means the table doesn't need to be opened
  for searching (saving a file handle and a number of syscalls) and when
  flushing changes, we don't need to update baseA/baseB just to keep the
  revisions in step.  The flint database version has been increased, but the
  new code will happily open and read/update flint databases from Xapian 1.0.0
  and 1.0.1.  Xapian 1.0.2 flint databases can't be read by Xapian 1.0.1 or
  earlier though.

* Two new optional tables are now supported: "spelling", which is used to
  store information for spelling correction, and "synonym", which is used
  to store synonym information.

* xapian-compact: Now compacts and merges spelling and synonym tables.
  Also has a new option "--no-renumber" to preserve document ids from
  source databases.

* xapian-check: Now checks the spelling and synonym tables (only the Btree
  structure is currently checked, not the information inside).

* Database::term_exists(), Database::get_termfreq(), and
  Database::get_collection_freq() are now slightly more efficient for flint
  databases.

* New utility 'xapian-inspect' which allowing interactive inspection of key/tag
  pairs in a flint Btree.  Useful for development and debugging, and an
  approximate equivalent to quartzdump.

* WritableDatabase::delete_document() no longer cancels pending changes if the
  document doesn't exist.

* Fix handling of exceptions during commit - previously, this could result
  in tables getting out-of-sync, perhaps even resulting in a corrupt database.

* Optimise iteration of all documents in the case where all the document
  IDs up to lastdocid are used; in this case, we no longer need to access disk
  to get the document IDs.

quartz backend:

* WritableDatabase::delete_document() no longer cancels pending changes if the
  document doesn't exist.

* We no longer create a postlist just to find the termfreq or collection
  frequency.

remote backend:

* Calling WritableDatabase::delete_document() on a non-existent document now
  correctly propagates DocNotFoundError.

* The minor remote protocol version has increased (to fix the previous issue).
  You should be able to cleanly upgrade a live system by upgrading servers
  first and then clients.

* progclient: Reopen stderr on the child process to /dev/null rather than
  closing it.  This fixes apitest with the remoteprog backend to pass when run
  under valgrind (it failed in this case in 1.0.0 and 1.0.1).  It probably
  has no effect otherwise.

* check_at_least is now passed to the remote server to reduce the work
  needed to produce the match, and the serialised size of the returned MSet.

inmemory backend:

* Bug fix: using replace_document() to add a document with a specific
  document id above the highest currently used would create empty documents
  for all document ids in between.

build system:

* Work around an apparent bug in automake which causes the entries in .libs
  subdirectories generated for targets of bin_PROGRAMS not to be removed on
  make clean.  This was causing make distcheck to fail.

* Snapshots and releases are now bootstrapped with automake 1.10, and
  libtool 1.5.24.

* HTML documentation generated from RST files is now installed.

documentation:

* The API documentation is now generated with Doxygen 1.5.2, which fixes the
  missing docs for Xapian::Query.

* Ship and install internals.html.

* Generating the doxygen-collated documentation of the library internals (with
  "make doxygen_source_docs") now only tries to generate an HTML version.  The
  PDF version kept exceeding TeX limits, and HTML is a more useful format for
  this anyway.

* API docs for Xapian::QueryParser now make it clear that the default value for
  the stemming strategy is STEM_NONE.

* API docs now describe the NumberValueRangeProcessor more clearly.

* Several typo fixes and assorted wording improvements.

* queryparser.html: Mention "AND NOT" as an alternative way to write "NOT",
  and document synonym expansion.

* admin_notes.html: Updated for changes in this release, and corrected a
  few minor errors.

* spelling.rst: New file, documenting the spelling correction feature.

* synonyms.rst: New file, documenting the synonyms expansion feature.

* valueranges.rst: The NumberValueRangeProcessor is now documented.

* HACKING: Mention new libtool, and more details about preferring
  pre-increment.  Also add a note about 2 space indentation of protection
  level declarations in classes.

* INSTALL: note that zlib must be installed before you can build.

examples:

* copydatabase: Now copies synonym and spelling data.  Also, fix a cosmetic
  bug with progress output when a specified database directory has a trailing
  slash.

portability:

* Fix to build on with OpenBSD's zlib (xapian-core 1.0.0 and 1.0.1 didn't).

* Fixed to build with older zlib such as zlib 1.1.5 which Solaris apparently
  uses (xapian-core 1.0.0 and 1.0.1 didn't).  However, we recommend using zlib
  1.2.x as decompressing is apparently about 20% faster.

* msvc/version.h.in: Generated version.h for MSVC build no longer has the
  remote backend marked as disabled.

* Fix warnings from Intel's C++ compiler.

* Fixes for compilation with gcc-2.95 and GCC 4.3 snapshots.

packaging:

* RPMs:

  + Rename xapian.spec to xapian-core.spec to match tarball name.

  + Append the user name to BuildRoot.

debug code:

* Better debug logging from the queryparser internals.

Xapian-core 1.0.1 (2007-06-11):

API:

* Xapian::Error:

  + Make Error::error_string member std::string rather than char * to avoid
    problems with double free() with copied Error objects.  Unfortunately
    this mean an incompatible ABI change which we had hoped to avoid until
    1.1.0, but in this case there didn't seem to be a sane way to fix the
    problem without an ABI change.

  + Error::get_description() now converts my_errno to error_string if it hasn't
    been already rather than not including any error description in this case.

  + Add new method "get_description()" to get a string describing the error
    object.  This is used in various examples and scripts, improving their
    error reporting.

* Xapian::Database: Add new form of allterms_begin() and allterms_end()
  which allow iterating of all terms with a particular prefix.  This
  is easier to use than checking the end condition yourself, and is
  more efficiently implemented for the remote backend (fixes bug#153).

* Xapian::Enquire: Passing an uninitialised Database object to Enquire will
  now cause InvalidArgumentError to be thrown, rather than causing a segfault
  when you call Enquire::get_mset().  If you really want an empty database,
  you can use Xapian::InMemory::open() to create one.

* Xapian::QueryParser: Multiple boolean prefixed terms with the same term
  prefix are now combined with OR before such groups are combined with AND
  (bug#157).  Multiple value ranges on the same value are handled similarly.

* Xapian::Query OP_VALUE_RANGE: Avoid calling db->get_lastdocid() repeatedly
  as we know the answer won't change - this reduces the run time of a
  particular test case by 25%.

testsuite:

* Add test for serialisation of error strings.

* Improved output in various situations:

  + Quote strings in TEST_STRINGS_EQUAL().

  + queryparsertest: Use TEST_STRINGS_EQUAL when comparing query descriptions
    against their expected output, since this makes it much easier to see the
    differences.

  + Report whole message for exceptions, rather than a truncated version, in
    verbose mode.

  + Make use of Xapian::Error::get_description(), giving better error
    reports.

* queryparsertest: New test of custom ValueRangeProcessor subclass
  (qp_value_customrange1).

* apitest: flintdatabaseformaterror1 and flintdatabaseformaterror2 now use a
  genuine Xapian 0.9.9 flint database for their tests, and more cases are
  tested.  The two tests have also been split into 3 now.

* Fix test harness not to invoke undefined behaviour in cases where a paragraph
  of test data contains two or fewer characters.

* Implement a better fix for the MSVC ifstream issue which was fixed in 1.0.0.
  This fixes an unintentional side-effect of the previous fix which meant that
  apitest's consistency1 wasn't working as intended (it now has a regression
  test to make sure it is testing what we intend).

flint backend:

* xapian-compact: Don't uncompress and recompress tags when compacting a
  database.  This speeds up xapian-compact rather a lot (by more than 50% in a
  quick test).

* If the docid counter wraps, Flint now throws DatabaseError (fixes bug#152).

* Remove the special case error message for pre-0.6 databases since they'll
  be quartz format (the check is only in flint because this code was taken from
  quartz).

quartz backend:

* If the docid counter wraps, Quartz now throws DatabaseError (fixes bug#152).

remote backend:

* The remote protocol now has a minor version number.  If the major
  version number is the same, a client can work with any server with
  the same or higher minor version number, which makes upgrading live
  systems easier for most remote protocol changes - just upgrade the servers
  first.

* When a read-only remote database is closed, the client no longer sends a
  (totally bogus) MSG_FLUSH to the server, and the reply is also eliminated.
  This reduces the time taken to close a remote database a little (fixes
  bug#149).

inmemory backend:

* skip_to() on an allterms TermIterator from an InMemory Database can no longer
  move backwards.

* An allterms TermIterator now initialises lazily, which can save some work if
  the first operation is a skip_to() (as it often will be).

build system:

* Fix VPATH compilation in maintainer mode with gcc-2.95.

* Fix multiple target rule for generating the queryparser source files in
  parallel builds.

* Distribute missing stub Makefiles for "bin", "examples", and
  "include/xapian".

documentation:

* Document the design flaw with NumberValueRangeProcessor and why it shouldn't
  be used.

* ValueRangeProcessor and subclasses now have API documentation and an overview
  document.

* Expand documentation of value range Query constructor.

* Improved API documentation for the TermGenerator class.

* docs/deprecation.rst:

  + Fix copy and paste error - set_sort_forward() should be changed to
    set_docid_order().

  + Improve entry for QueryParserError.

* PLATFORMS: Updated from tinderbox.

examples:

* copydatabase: Rewritten to use the ability to iterate over all the documents
  in a database.  Should be much more efficient for databases with sparsely
  distributed document IDs.

* simpleindex: Rewritten to use the TermGenerator class, which eliminates a
  lot of non-Xapian related code and is more typical of what a user is likely
  to want to do.

* simplesearch,simpleexpand: Rewritten to use the QueryParser class, which
  is more typical of what a user is likely to want to do.

portability:

* xapian-config: Add special case check for host_os matching linux* or
  k*bsd-gnu since vanilla libtool doesn't correctly probe link_all_deplibs=no
  for them.

packaging:

* RPMs: Add "# norootforbuild" comment which SuSE's build scripts look for.
  Rename "Source0:" to "Source:" as there's only one tarball now.  Add gcc-c++
  and zlib-devel to "Build-Requires:".

* The required automake version has been lowered to 1.8.3, so RPMs can now be
  built on RHEL 4 and SLES 9.

Xapian-core 1.0.0 (2007-05-17):

API:

* Xapian::Database:

  + The Database(const std::string &) constructor has been marked as "explicit".
    Hopefully this won't affect real code, but it's possible.  Instead of
    passing a std::string where a Xapian::Database is expected, you'll now
    have to explicitly write `Xapian::Database(path)' instead of `path'.

  + Fixed problem when calling skip_to() on an allterms iterator over multiple
    databases which could cause a debug assertion in debug builds, and possible
    misbehaviour in normal builds.

* Xapian::Error:

  + The constructors of Error subclasses which take a `const std::string &'
    parameter are now explicit.  This is very unlikely to affect any real code
    but if it does, just write `Xapian::Error(msg)' instead of `msg'.

  + Xapian::Error::get_type() now returns const char* rather than std::string.
    Generally existing code will just work (only one change was required in
    Xapian itself) - the simplest change is to write `std::string(e.get_type())'
    instead of `e.get_type()'.

  + Previously, the errno value was lost when an error was propagated from
    a remote server to the client, because errno values aren't portable
    between platforms.  To fix this, Error::get_errno() is now deprecated and
    you should use Error::get_error_string() instead, which returns a string
    expanded from the errno value (or other system error code).

* Xapian::QueryParser:

  + Now assumes input text is encoded as UTF-8.

  + We've made several changes to term generation strategy.  Most notably:
    Unicode support has been added; '_' now counts as a word character; numbers
    and version numbers are now parsed as a single term; single apostrophes are
    now included in a term; we now store unstemmed forms of all terms; and we
    no longer try to "normalise" accents.

  + parse_query() now throws the new Xapian::Error subclass QueryParserError
    instead of throwing const char * (bug#101).

  + Pure NOT queries are now supported (for example, `NOT apples' will match
    all documents not indexed by the stemmed form of `apples').  You need
    to enable this feature by passing QueryParser::FLAG_PURE_NOT in flags
    to QueryParser::parse_query().

  + We now clear the stoplist when we parse a new query.

  + Queries such as `+foo* bar', where no terms in the database match the
    wildcard `foo*', now match no documents, even if `bar' exists.  Handling
    of `-foo*' has also been fixed.

  + Now supports wildcarding the last term of a query to provide better support
    for incremental searching.  Enabled by QueryParser::FLAG_PARTIAL.

  + The default prefix can now be specified to parse_query() to allow parsing
    of text entry boxes for particular fields.

  + QueryParser::set_stemming_options() has been deprecated since 0.9.0 and
    has now been removed.

* Xapian::Stem:

  + Now assumes input text is encoded as UTF-8.

  + We've updated to the latest version of the Snowball stemmers.  This means
    that a small number of words produce different (and generally better)
    stems and that some new stemmers are supported: german2 (like german but
    normalises umlauts), hungarian, kraaij_pohlmann (a different Dutch
    stemmer), romanian, and turkish.

* Xapian::TermGenerator:

  + New class which generates terms from a piece of text.

* Xapian::Enquire:

  + The Enquire(const Database &) constructor has been marked as "explicit".
    This probably won't affect real code - certainly no Xapian API methods
    or functions take an Enquire object as a parameter - but calls to user
    methods or functions taking an Enquire object could be affected.  In
    such cases, you'll now have to explicitly write `Xapian::Enquire(db)'
    instead of `db'.

  + Enquire::get_eset() now produces better results when used with multiple
    databases - without USE_EXACT_TERMFREQ they should be much more similar to
    results from an equivalent single database; with USE_EXACT_TERMFREQ they
    should be identical.

  + Track the minimum weight required to be considered for the MSet separately
    from the minimum item which could be considered.  Trying to combine the two
    caused several subtle bugs (bug#86).

  + Enquire::get_query() is now `const'.  Should have no effect on user code.

  + Enquire::get_mset() now handles the common case of an "exact" phrase search
    (where the window size is equal to the number of terms) specially.

  + Enquire::include_query_terms and Enquire::use_exact_termfreq are now
    deprecated in favour of capitalised versions Enquire::INCLUDE_QUERY_TERMS
    and Enquire::USE_EXACT_TERMFREQ (for consistency with our other manifest
    constants, and general C/C++ conventions).

* Xapian::RSet:

  + RSet::contains(MSetIterator) is now `const'.  Should have no effect on user
    code.

* Xapian::SimpleStopper::add() now takes `const std::string &' not `const
  std::string'.  Should have no effect on user code.

* Xapian::Query:

  + We now only perform internal validation on a Query object when it's either
    constructed or changed, to avoid O(n^2) behaviour in some cases.

  + Xapian::Query::MatchAll (an alias for Query("")) matches all terms in the
    document (useful for "pure NOT" queries) and Xapian::Query:MatchNothing
    is now a more memorable alias for Query().

* Instead of explicitly checking that a term exists before opening its
  postlist, we now do both in one operation, which is more efficient.

* MatchDecider::operator() now returns `bool' not `int'.

* ExpandDecider::operator() now returns `bool' not `int'.

* Xapian::TermIterator::get_termfreq() now throws InvalidOperationError
  if called on a TermIterator from a freshly created Document (since
  there's no meaningful term frequency as there's no Database for
  context).

* <xapian/output.h> is no longer available as an externally visible header.
  It's not been included by <xapian.h> since 0.7.0.  Instead of using
  `cout << obj;' use `cout << obj.get_description();'.

* New constant Xapian::BAD_VALUENO which is -1 cast to Xapian::valueno.

* New Xapian::ValueRangeProcessor hierarchy: DateValueRangeProcessor,
  NumberValueRangeProcessor, and StringValueRangeProcessor.  In
  conjunction with the new QueryParser::add_valuerangeprocessor()
  method and the new Query::OP_VALUE_RANGE op these allow you to
  implement ranges in the query parser, such as `$50..100',
  `10..20kg', `01/02/2007..03/04/2007'.

testsuite:

* Many new and improved testcases in various areas.

* If a test throws an unknown exception, say so in the test failure message.
  If it throws std::string, report the first 40 characters (or first line if
  less than 40 characters) of the string even in non-verbose mode.

* Use of valgrind improved:

  + The test harness now only hooks into valgrind if environment variable
    XAPIAN_TESTSUITE_VALGRIND is set, which makes it easy to run test programs
    under valgrind in the normal way.  The runtest script sets this
    automatically.

  + runtest now passes "--leak-resolution=high" to valgrind to prevent
    unrelated leak reports related to STL classes from being combined.

  + configure tests for valgrind improved and streamlined.

  + New runsrv script to run xapian-tcpsrv and xapian-progsrv.  We need to
    run these under valgrind to avoid issues with excess numerical precision
    in valgrind's FP handling, but we can use "--tool=none" which is a lot
    faster than running them under valgrind's default memcheck tool.

* The test harness now starts xapian-tcpsrv in a more reliable way - it will
  try sequentially higher port numbers, rather than failing because a
  xapian-tcpsrv (or something else) is already using the default port.
  It also no longer leaks file descriptors (which was causing later tests
  to fail on some platforms), and if xapian-tcpsrv fails to start, the error
  message is now reported.

* remotetest has been removed and its testcases have either been added to
  apitest or just removed if redundant with tests already in apitest.

* termgentest is a new test program which tests the Xapian::TermGenerator
  class.

* TEST_EQUAL_DOUBLE() now uses a slightly less stringent threshold -
  DBL_EPSILON is too strict for calculations which include multiple
  steps.  Also, we now use it instead of doubles_are_equal_enough() and
  weights_are_equal_enough() which try to perform the same job.

* New macro TEST_STRINGS_EQUAL() which displays the strings on separate lines
  so the differences can be clearly seen.

* Test programs are now linked with '-no-install' which means that libtool
  doesn't need to generate shell script wrappers for them on most platforms.

* runtest: Now turns on MALLOC_CHECK_ and MALLOC_PERTURB_ for glibc if
  valgrind isn't being used.

* Better support for Microsoft Windows:

  + test_emptyterm2 no longer tries to delete a database from disk while a
    WritableDatabase object still exists for it, since this isn't supported
    under Microsoft Windows.

  + Fallback handling when srcdir isn't specified how takes into account .exe
    extensions and different path separators.

flint backend:

* Flint is now the default backend.

* xapian-check: New program which performs consistency checks on a flint
  database or table.

* xapian-compact: Now prunes unused docids off the start of each source
  database's range of docids.

* Positional information is now encoded using a highly optimised fls()
  implementation, which is much faster than the FP code 0.9.x used.
  Unfortunately the old encoding could occasionally add extra bits
  on some architectures, which was harmless except the databases
  wouldn't be portable.  Because of this, the flint format has had to
  be changed incompatibly.

* The lock file is now called "flintlock" rather than "flicklock" (which
  was a typo!)

* Flint now releases its lock correctly if there's an error in
  WritableDatabase's constructor.  Previously the lock would remain until
  the process exited.

* Flint now throws new Xapian::Error subclass DatabaseVersionError instead of
  DatabaseOpeningError when it fails to open a database because it has an
  unsupported version.  DatabaseVersionError is a subclass of
  DatabaseOpeningError so existing code should continue to work, but it's
  now much easier to determine if the problem is that a database needs
  rebuilding.

* If you try to open a flint database with an older or newer version than
  flint understands, the exception message now gives the version understood,
  rather than "I only understand FLINT_VERSION" (literally).

* If we fail to obtain the lock, report why in the exception message.

* Flint now compresses tags in the record and termlist tables using zlib.

* More robust code to handle the flint locking child process, in case of
  unexpected errors.

* If a document was replaced more than once between flushes, the document
  length wouldn't be updated after the first change.

quartz backend:

* Quartz is still supported, but use in new projects is deprecated (use Flint
  instead).  Quartz will be removed eventually.

* quartzcheck: Test if this is a quartz database by looking at "meta" not
  "record_DB".  If "record_DB" is >= 2GB and we don't have a LFS aware stat
  function then stat can fail even though the file is there.  Also open the
  database explicitly as a Quartz database for extra robustness.

* If a document was replaced more than once between flushes, the document
  length wouldn't be updated after the first change.

remote backend:

* The remote backend is now supported under Microsoft Windows.

* Open a fresh copy of the database(s) on each connection to a xapian-tcpsrv
  rather than relying on being able to share a database across fork() or
  between threads (which we don't promise will work).

* xapian-tcpsrv: New "--interface" option allows the hostname or address of the
  interface to listen on to be specified (the default is the previous behaviour
  of listening on all interfaces).

* If name lookup fails, report the h_errno code from gethostbyname() rather
  than whatever value errno happens to currently have!

* Fix bugs in query unserialisation.

* The remote backend now supports all operations (get_lastdocid(), and
  postlist_begin() have now been implemented).

* Currently a read-only server can be opened as a WritableDatabase (which is
  a minor bug we plan to fix).  In this case, operations which write will fail
  and the exception is now InvalidOperationError not NetworkError.

* If a remote server catches NetworkTimeoutError then it will now only
  propagate it if we can send it right away (since the connection is
  probably unhappy).  After that (and for any other NetworkError) we now
  just rethrow it locally to close the connection and let it be logged if
  required.

* The timeout parameter to RemoteDatabase wasn't being used, instead the
  client would wait indefinitely for the server to respond.

* A timeout of zero to the remote backend now means "never timeout".  This
  is now the default idle timeout for WritableDatabase (the connection
  timeout default is now 10 seconds, rather than defaulting to the idle
  timeout).

* Fix handling of the document length in remote termlists.

* The remote backend now checks when decoding serialised string that the
  length isn't more than the amount of data available (bug#117).

* The remote backend now handles the unique term variants of delete_document
  and replace_document on the server side.

* The RSet serialisation now encodes deltas between docids (rather than the
  docids themselves) which greatly reduces the size of the encoding of a
  sparse RSet for a large database.

* We now encode deltas between term positions when sending data after calling
  positionlist_begin() on a remote database.

* When using a MatchDecider with remote database(s), don't rerun the
  MatchDecider on documents which a remote server has already checked.

* Apply the "decreasing weights with remote database" optimisation which we use
  in the sort_by_relevance case in the sort_by_relevance_then_value case too.

* We now throw NetworkError rather than InternalError for invalid data received
  over the remote protocol.

* We now close stderr of the spawned backend program when using the "prog" form
  of the remote backend.  Previously stderr output would go to the client
  application's stderr.

muscat36 backend:

* Support for the old Muscat 3.6 backends has been completely removed.  It's
  still possible to convert Muscat 3.6 databases to Xapian databases by
  building 0.9.10 and using copydatabase to create a quartz database, which can
  then be read by 1.0.0 (and converted to a flint database using copydatabase
  again).

build system:

* We've added GCC visibility annotations to the library, which when using GCC
  version 4.0 or later reduce the size and load time of the library and
  increase the runtime speed a little.  Under x86_64, the stripped library is
  6.4% smaller (1.5% smaller with debug information).

* configure: If using GCC, use -Bsymbolic-functions if it is supported
  (it requires a very recent version of ld currently).  This option reduces the
  size and load time of the shared library by resolving references within the
  library when it's created.

* We automatically define _FORTIFY_SOURCE in config.h if GCC is in use
  and it's not already set (you can override this as documented in INSTALL).
  This adds some checking (mostly at compile time) that important return
  values aren't ignored and that array bounds aren't exceeded.

* `./configure --enable-quiet' already allows you to specify at configure time
  to pass `--quiet' to libtool.  Now you can override this at make-time by
  using `make QUIET=' (to turn off `--quiet') or `make QUIET=y' (to turn on
  `--quiet').

* In non-maintainer mode, we don't need the tools required to rebuild some of
  the documentation, so speed up configure by not even probing for them in
  this common case.

* The makefiles now use non-recursive make in all directories except "docs" and
  "tests".  For users, this means that the build is faster and requires less
  disk space (bug#97).

* configure: Add proper detection for SGI's C++ (check stderr output of
  "CC -v") and automatically pass -ptused in CXXFLAGS for xapian-core and any
  applications using xapian-config --cxxflags since it seems to be required to
  avoid template linking errors.

* XO_LIB_XAPIAN now checks for the case where XAPIAN_CONFIG wasn't specified
  and xapian-config wasn't found, but the library appears to be installed -
  this almost certainly means that the user has installed xapian-core from
  a package, but hasn't installed the -dev or -devel package, so include
  that advice in the error message.

* `./configure --with-stlport-compiler' now requires a compiler name as an
  argument.

* configure: Disable probes for f77, gcj, and rc completely by preventing
  the probe code from even appearing in configure - this reduces the size of
  configure by 209KB (~25%) and should speed it up significantly.

* configure: Suppress more unhelpful warnings and "remarks" for HP's aCC, and
  turn on "+wlint", which seems useful.

* A number of cases of unnecessary header inclusions have been addressed,
  which should speed up compilation (fewer headers to parse when compiling
  many source files).  This also reduces dependencies within the source code,
  and thus the number of files which need to be rebuilt when a header is
  changed.

* configure: Cache the results of some of our custom tests.

documentation:

* The documentation has all been updated for changes in Xapian 1.0.0.

* Many of the documentation comments in the API headers (which are collated
  using doxygen to generated the API reference) have been improved, and some
  missing ones added.  Also, internal classes, members, and methods are now all
  marked as such so that none should appear in the generated documentation.  In
  particular, the class inheritance graphs should be a lot clearer.  A few other
  problems have also been addressed.

* docs/internals.html: New separate index page for the "internal"
  documentation.

* docs/deprecated.html: New document describing deprecation policy.  This
  includes lists of features which have been removed, or which are deprecated
  and scheduled for removal, along with suggested replacements.

* docs/admin_notes.html: New document introducing Xapian for sysadmins.

* docs/termgenerator.html: New document describing the new term generation
  strategy implemented by the Term::Generator class.

* docs/bm25.html,docs/intro_ir.html: These have been overhauled to make them
  fit better with the rest of the documentation, and with Xapian itself.

* docs/overview.html: Fixed links to error classes in generated API
  documentation.

* HACKING,INSTALL: Many updates and improvements.

* xapian-config: Improve --version output so that help2man produces a better
  man page.

* PLATFORMS: Remove reports for 0.7.* and demote reports for 0.8.* to "older
  reports" status.  All SF compilefarm machines are now "no longer available",
  so update the symbols and key to reflect this.  Update with recent success
  reports from the tinderbox and other sources.

* AUTHORS: Thanks several bug reporters I missed before, as well as recent
  contributors.

* docs/code_structure.html now looks nicer and includes links to
  svn.xapian.org.

* docs/remote_protocol.html: Fixed several typos and other errors, and document
  all the new messages.

* We no longer include docs/apidoc/latex/* in the xapian-core tarballs since
  it's just useless bloat.

examples:

* delve:

  + Report the exception error string if open a database fails.

  + Rename "-k" to "-V" since "keys" were renamed to "values" long ago.  Keep
    "-k" as an alias for now, but don't advertise it.  Add handling so "-V3"
    shows value #3 for every document in the database.

  + No longer stems terms by default.  Add "-s/--stemmer" option to allow a
    stemmer to be specified.

* quest: Add "--stemmer" option to allow stemming language to be set, or
  stemming to be disabled.

portability:

* Fix compilation with GCC 4.3 snapshot.

* Always use pid_t not int for holding a process id, and use AC_TYPE_PID_T to
  `#define pid_t int' if <sys/types.h> doesn't provide pid_t.

* Pass the 4th parameter of setsockopt() as char* which works whether the
  function actually takes char* or void* (since C++ allows implicit conversion
  from char* to void*).

* Most warnings in the MSVC build have been fixed.

* Refactored most portability workarounds into safeXXXX.h headers.

* Building for mingw in a cygwin environment should work better now.

packaging:

* RPM spec file:

  + Updated for the changes in this release.

  + ChangeLog.examples is now packaged.

debug code:

* Rename --enable-debug* configure options - conflating the options to "turn on
  assertions" and "turn on logging" is confusing. `--enable-debug[=partial]'
  becomes `--enable-assertions'; `--enable-debug-verbose' becomes
  `--enable-log' and `--enable-debug=full' becomes `--enable-assertions
  --enable-log'.  For now the old options give an error telling you the new
  equivalent.

* Debug logging from expand is now all of type EXPAND (some was of types
  MATCHER and WTCALC before).

* Hook the debug tracing in the lemon generated parser into Xapian's debug
  logging framework.

* New assertion types: AssertEqParanoid() and AssertNeParanoid().

* Retry write() if it fails when writing a debug log entry to ensure to avoid
  the risk of a partial write.

Xapian-core 0.9.10 (2007-03-04):

API:

* Fix WritableDatabase::replace_document() not to lose positional information
  for a document if it is replaced with itself with unmodified postings.

* QueryParser: Add entries to the "unstem" map for prefixed boolean filters
  (e.g. type:html).

* Fix inconsistent ordering of documents between pages with
  Enquire::set_sort_by_value_then_relevance (fixes bug#110).

testsuite:

* Workaround apparent bug in MSVC's ifstream class.

flint and quartz backends:

* Fix possible double-free after a transaction fails.

* Fix code for recovering from failing to open a table for reading
  mid-modification.  If modifications are so frequent that opening for reading
  fails 100 times in a row, throw DatabaseModifiedError not
  DatabaseOpeningError.

* Don't call std::string::append(ptr, 0) when ptr may be uninitialised
  or NULL (rather suspect, and reported to cause SEGV-like behaviour with
  MSVC).

* Ensure both_bases is set to false if we don't have both bases when
  opening a table using an existing object.

* Use MS Windows API calls to delete files and open files we might want to
  delete while they are still open (i.e. the flint and quartz btree base
  files).  This fixes a problem when a writer can't discard an old revision at
  the exact moment a reader is opening it (bug #108).

remote backend:

* Fix WritableDatabase::has_positions() to refetch the cached value if it
  might be out of date.

* Fix incorrect serialisation of a query with non-default termpositions.

inmemory backend:

* If replace_document is used to set the docid of a newly added document which
  has previously existed, ensure we mark that document as valid.

documentation:

* Assorted improvements to API documentation.

* docs/Makefile.am: The larger pool_size we set in 0.9.9 for building
  sourcedoc.pdf was a bit marginal, so increase it further.

* docs/stemming.html,docs/install.html: Correct 2 references to "CVS" to say
  "SVN" instead.

* HACKING: Update the release checklist.

portability:

* Fix flint and quartz to allow 2GB+ B-tree tables when compiling with MSVC.

packaging:

* RPMs: Remove "." from end of "Summary:".  Package the new man page for
  xapian-progsrv.

Xapian-core 0.9.9 (2006-11-09):

testsuite:

* Use popen() to run xapian-tcpsrv and wait for "Listening..." before returning
  rather than just sleeping for 1 second and hoping that's enough.

* If we can't start xapian-tcpsrv because the port is in use, try higher
  numbered ports.

remote backend:

* xapian-tcpsrv: If the port requested is in use, exit with code 69
  (EX_UNAVAILABLE) which is useful if you're trying to automate launching of
  xapian-tcpsrv instances.

* xapian-tcpsrv: Output "Listening..." once the socket is open and read for
  connections (this allows the testsuite to wait until xapian-tcpsrv is ready
  before connecting to it).

* xapian-progsrv: Now supports --help, --version, and has a man page.  Fixes
  Bug #98.

* Turn on TCP_NODELAY for the TCP variant of the remote backend which
  dramatically improves the latency of operations on the database.

build system:

* internaltest: Disable serialiselength1 and serialisedoc1 when the remote
  backend is disabled to fix build error in this case.

* Move libbtreecheck.la from testsuite/ to backends/quartz/.

* Move the testsuite harness from testsuite/ to tests/harness/.

documentation:

* Ship our custom INSTALL file rather than the generic one from autoconf which
  we've accidentally been shipping instead since 0.9.5.

* docs/Makefile.am: Building sourcedoc.pdf needs a larger pool_size now we're
  using pdflatex.

* HACKING: Update debian packaging checklist.

* PLATFORMS: Updated with results from tinderbox.

portability:

* Create "safefcntl.h" as a replacement for <fcntl.h> instead of using
  "utils.h" for this purpose, since "utils.h" pulls in many other things we
  often don't need.

packaging:

* RPMs: Prevent binaries getting an rpath for /usr/lib64 on FC6.

Xapian-core 0.9.8 (2006-11-02):

API:

* QueryParser: Don't require a prefixed boolean term to start with an
  alphanumeric - allow the same set of characters as we do for the second
  and subsequent characters.

flint backend:

* Only force a flush on WritableDatabase::allterms_begin() if there are
  actually pending changes.

quartz backend:

* Only force a flush on WritableDatabase::allterms_begin() if there are
  actually pending changes.

* quartzcheck: Avoid dying because of an unhandled exception if the Btree
  checking code finds an error in the low-level Btree structure.  Add a
  catch for any other unknown exceptions.

build system:

* When building with GCC, turn on warning flag -Wshadow even when not in
  maintainer mode (provided it is supported by the GCC version being used).

* testsuite/backendmanager.cc: Fix compilation when valgrind is detected by
  configure.

* If generating apidoc.pdf fails, display the logfile pdflatex generates since
  that is likely to show what failed.

documentation:

* Produce a PDF for apidoc rather than PostScript, since the PDF is smaller,
  plus at least as easy to print and easier to view for most users.  Use
  pdflatex to generate the PDF directly rather than going via a DVI file which
  apparently produces a better result and also avoids problems on some Linux
  distros where latex is a symlink to pdfelatex (bug#81, bug#95).

* HACKING: Mention automake 1.10 is out but we've not tested it yet.

* HACKING: Add entries to release checklist: make sure new API methods
  are wrapped by the bindings, and that bug submitters are thanked.

* HACKING: Note that on Debian, tetex-extra is needed for
  fancyhdr.sty.

* HACKING: Note that dch can be used to update debian/changelog.

* docs/code_structure.html: Document backends/remote.

* PLATFORMS: Update from tinderbox.

portability:

* configure: When checking if we need -lm, don't use a constant argument to
  log() as the compiler might simply evaluate the whole expression at compile
  time.

* configure: Redhat's GCC 2.96 doesn't support -Wundef even though real GCC
  version before and after it do!

* configure: Avoid use of double quotes in double-quoted backticks since
  it causes problems on some platforms.

* backends/flint/flint_io.cc: Fix compilation on windows (needs to
  #include "safewindows.h" to get definition of SSIZE_T).

* Fix our implementation of om_ostringstream to compile so that the build
  works once more on older compilers without <sstream> (regression probably
  introduced in 0.9.7).

packaging:

* xapian.spec: Package xapian-progsrv.

Xapian-core 0.9.7 (2006-10-10):

API:

* QueryParser:

  + Allow a distance to be optionally specified for NEAR - e.g.
    "cats NEAR/3 dogs" (bug#92).

  + Implement "ADJ" operator - like "NEAR" except the terms must
    appear in matching documents in the same order as in the query.

  + Fix bug in how we handle prefixed quoted phrases and prefixed brackets.

  + Fix parsing of loved and hated prefixed phrases and bracketted expressions.

  + Fix handling of stopwords in boolean expressions.

  + Don't ignore a stopword if it's the only query term.

* Document::add_value() failed to replace an existing value with the same
  number, contrary to what the documentation says (bug #82).

* Enquire::set_sort_by_value(): Don't fetch the document data when fetching
  the value to sort on.  Simple benchmarking showed this to speed up sort by
  value by a factor of between 3 and 9!

* Implement transactions for flint and quartz.  Also supported are "unflushed"
  transactions, which provided an efficient way to atomically group a number
  of database modifications.

* The Xapian::Error and Xapian::ErrorHandler classes have been reimplemented.
  The new versions have better, clearer documentation comments and are cleaner
  internally.

* Change how doubles are serialised by TradWeight, BM25Weight, and in the
  remote backend protocol.  The new encoding allows us to transfer any double
  value which can be represented by both machines precisely and compactly.

testsuite:

* Add targets "check-flint", "check-quartz", and "check-remote" in tests and at
  the top level which run the subset of tests which test the respective backend.

* apitest: Run tests on flint if flint is enabled, rather than if quartz is
  enabled!

* apitest: Speed up deldoc4 when run in verbose mode - some stringstream
  implementations are very inefficient when the string grows long.

* Turn on GLIBCXX_FORCE_NEW when running tests under valgrind to stop the GNU
  C++ STL from using a pooling allocator.  This helps make velgrind's leak
  tracking more reliable.

* Probe for required valgrind logging options at configure time rather than
  when running the test program.  This saves about 2 seconds per test program
  invocation.

* Fix testsuite harness to show valgrind output when a test fails (when running
  under valgrind in verbose mode).  This had stopped working, probably due to
  changes in valgrind 3.

* internaltest: Check that the destructor on a temporary object gets called
  at the correct time (Sun C++ deliberately gets this wrong by default, and it
  would be good to catch any other compilers which do the same).

* apitest: When running tests on the remote backend and running under valgrind,
  run xapian-tcpsrv and xapian-progsrv under valgrind too to avoid issues
  with the precision of doubles (bug#94).

flint backend:

* Retry on EINTR from fcntl or waitpid when creating or releasing the flint
  lock file.

* xapian-compact: Add --blocksize option to allow the blocksize to be set
  (default is 8K as before.)

* WritableDatabase::replace_document(did, doc) was double-incrementing the
  "changes" counter when document did didn't exist so it would flush twice
  as often - fixed.

* WritableDatabase::postlist_begin(): Remove forced flush when iterating the
  posting list of a term which has modified postings pending.

quartz backend:

* quartzcompact: Add --blocksize option to allow the blocksize to be set
  (default is 8K as before.)

* WritableDatabase::replace_document(did, doc) was double-incrementing the
  "changes" counter when document did didn't exist so it would flush twice
  as often - fixed.

remote backend:

* Most of the remote backend has been rewritten.  It now supports most
  operations which a local database does (including writing!), the protocol
  used is more compact, and a number of layers of classes have been eliminated
  and the sequences of method calls simplified, so the code should be easier to
  understand and maintain despite doing more.  A number of bugs have been fixed
  in the process.

* xapian-tcpsrv: Report errno if we catch a Xapian::Error which has it set.

* xapian-tcpsrv: Fix memory leak in query unserialisation.

build system:

* Now using autoconf 2.60 for snapshots and releases.  Also now using a
  libtool patch which improves support for Sun C++'s -library=stlport4 option.

* configure: Fix generation of version.h to work with Solaris sed.

* automake adds suitable rules for rebuilding doxygen_api_conf and
  doxygen_source_conf, so remove our less accurate versions.  Also fix
  dependencies for regenerating the doxygen documentation, and make the
  documentation build work with parallel make.

* Make use of the dist_ prefix to avoid having to list files in EXTRA_DIST as
  well as in *_DATA and man_MANS.

* Removed a few unused #include-s.

* include/xapian/error.h: Add hook to allow SWIG bindings to be built using
  GCC's visibility support.

* configure: Turn on automake's -Wportability to help ensure our Makefile.am's
  are written in a portable way.

* configure: Disable probing and short-cut tests for a FORTRAN compiler.  We
  don't use one, but current libtool versions always check for it regardless.

* xapian-config: Prune -L/usr/lib from output of `xapian-config --libs'.

documentation:

* docs/scalability.html: quartzcompact and xapian-compact now allow you to set
  the blocksize, so there's no need to use copydatabase if you want to migrate
  a database to a larger blocksize.  Mention gmane.  Other minor tweaks.

* Eliminate "XAPIAN_DEPRECATED" from generated documentation.

* PLATFORMS: Added success report for Nexenta (alpha 5), MSVC, and sparc linux.
  Updated other results from tinderbox.

* Add links to the wiki from README and the documentation index.

* docs/overview.html: Add discussion of uses of terms vs values.

* docs/overview.html: Rewrite the section on Xapian::Document to remove some
  very out-of-date information and make it clearer.

* include/xapian/database.h: Note that automatically allocated document IDs
  don't reuse IDs from deleted documents.

* include/xapian/enquire.h: Note that "set_sort_by_relevance" is the default
  setting.

* docs/queryparser.html,include/xapian/queryparser.h: Add note that
  FLAG_WILDCARD requires you to call set_database.

* HACKING: Add some advice regarding debugging using -D_GLIBCXX_DEBUG,
  valgrind, and gdb.

* HACKING: Give URL to Alexandre Duret-Lutz's autotools tutorial, which is much
  more up-to-date than the "goat book".

* HACKING: Update and expand the information about the debian packaging.

* Add missing dir_contents files.

portability:

* xapian/version.h: Add a check that _GLIBCXX_DEBUG is set compatibly if we're
  compiling with GNU C++ 3.4 or newer.

* Add configure check to see if "-lm" is needed to get maths functions since
  newer versions of Sun's C++ compiler seem to require this.

* Automatically put Sun's C++ compiler into "ANSI C++ compliant library" mode
  (using -library=stlport4).  This allows us to remove most of the special
  case bits of code we've accumulated for just this compiler, which improves
  maintainability.

* Sun's C++ compiler implements non-standards-conforming lifetimes for
  temporary objects by default.  This means database locks don't get released
  when they should, so we now always pass "-features=tmplife" for Sun C++
  which selects the behaviour specified by the C++ standard.

Xapian-core 0.9.6 (2006-05-15):

API:

* Rename Xapian::xapian_version_string() and companions to
  Xapian::version_string(), etc.  Keep the old functions as aliases which are
  marked as deprecated.

* QueryParser: Add rules to handle a boolean filter with a "+" in front (such
  as +site:xapian.org).

testsuite:

* queryparsertest: Add another prefix testcase to improve coverage.

build system:

* configure: Simpler check for VALGRIND being set to empty value.

* include/Makefile.am: Add xapian/version.h.timestamp as a dependency on
  all-local so that xapian/version.h actually gets regenerated when required.

* Eliminate XAPIAN_BUILD_BACKEND_* from config.h and just use
  XAPIAN_HAS_*_BACKEND from xapian/version.h instead.

documentation:

* remote_protocol.html: Document keep-alive messages.

* xapian/enquire.h: Remove bogus documentation for a parameter which doesn't
  exist.

* PLATFORMS: Added a summary.  Updated and pruned old entries for which we
  have a newer close match.

* HACKING: Expand on details of what's required when changing Xapian (discuss
  documentation requirements, and more on why feature tests are vital).

* HACKING: Update section on building debian packages.

portability:

* The tarball is generated with a patched version of libtool 1.5.22 which
  fixes libtool bugs on HP-UX and some BSD platforms.

* configure: Fix problems with test for snprintf which affected cygwin, and
  possibly some other platforms.

* configure: Tweak version.h generation to cope with CXXCPP putting carriage
  returns into its output as can happen on cygwin.

* Fix renaming of "iamflint.tmp" for MS Windows where you can't rename an open
  file.

* Fixed MSVC7 warnings.

* Added workaround for newlib header bug.

Xapian-core 0.9.5 (2006-04-08):

API:

* QueryParser:

  + Fix FLAG_BOOLEAN_ANY_CASE to really allow any case combination - previously
    it only allowed all uppercase or all lowercase.

  + Fix QueryParser's handling of terms with trailing "#", "+", or "-" when
    set_database has been called and the term doesn't exist in the database
    with the suffix.

* Add mechanism to allow xapian-bindings to override deprecation warnings so
  we can continue to wrap deprecated methods without lots of warnings.

* Move Enquire::get_matching_terms_end() and Document::termlist_end() inline in
  header.

* Database::termlist_begin(): Eliminate the MultiTermList wrapper in the common
  case where we're only dealing with a single database.

* Fix TermIterator::positionlist_begin() to work on TermIterator from
  Database::termlist_begin().  Make TermList::positionlist_begin() pure
  virtual and put dummy implementations in BranchTermList and other
  subclasses which can't (or don't) implement it.  This makes it hard to
  accidentally fail to implement it in a backend's TermList subclass.

* TermIterator::positionlist_begin() with the remote backend now throws
  UnimplementedError instead of InvalidOperationError.

* Implement Enquire::set_sort_by_relevance_then_value().

testsuite:

* Added missing feature test for QueryParser::FLAG_BOOLEAN_ANY_CASE.

* remotetest: Check mset size in tcpmatch1.

flint backend:

* xapian-compact: Fixed segfault from passing an unknown option (e.g.
  "xapian-compact --foo").

quartz backend:

* quartzdump,quartzcompact: Fixed segfault from passing an unknown option
  (e.g.  "quartzdump --foo").

remote backend:

* xapian-tcpsrv: Don't perform a name lookup on the IP address which an
  incoming connection is from as that could easily slow down the search
  response - instead just print the IP address itself if output is verbose.

* xapian-tcpsrv: Allow up to 5 connections in the listen queue instead of just
  one.

build system:

* Removed unused code from the matcher and the remote, quartz, and flint
  backends.

documentation:

* All installed binaries now support --help and --version and have a man page
  (which is generated using help2man).

* docs/overview.html: Bring up to date.

* docs/remote_protocol.html: Document messages for requesting and sending a
  termlist and a document.

* PLATFORMS, AUTHORS: Updated.

* INSTALL: Improve wording.

* HACKING: Note that we now use a lightly patched version of libtool 1.5.22.

* HACKING: aclocal is part of automake, not autoconf.

portability:

* Added some tweaks to help support compilation with MSVC.

packaging:

* RPMs: package the new man pages.

debug code:

* Add missing spaces in some debug output.

Xapian-core 0.9.4 (2006-02-21):

API:

* Flag deprecated methods such that the compiler gives a warning, for compilers
  which support such a feature (most notably GCC >= 3.1).

* Correct typo in name of definition of function xapian_revision().

testsuite:

* Updated uses of deprecated methods in the testsuite.

build system:

* xapian-config: Set exec_prefix and prefix at top of script so that
  xapian-config works after xapian-core is installed.

documentation:

* Add documentation comment for Enquire::set_sort_by_value_then_relevance().

* README: Add pointer to HACKING.  Change "CVS access" to "SVN access".

* PLATFORMS: Updated from tinderbox.

* COPYING: Update second occurrence of old FSF address.

Xapian-core 0.9.3 (2006-02-16):

API:

* Added 4 functions to report version information for the library version being
  used (which may not be the same as that compiled against if shared libraries
  are in use):  xapian_version_string(), xapian_major_version(),
  xapian_minor_version(), xapian_revision().

* Xapian::QueryParser:

  + Fix handling of "+" terms in a query when the default query operator is
    AND.  Added regression test for this.

  + Added "AND NOT" as a synonym for "NOT".  Added feature tests for this.

* Fix prototype for ESet::operator[] to take parameter of type termcount
  instead of doccount (doccount and termcount are both typedefs to the same
  type so this really just makes the prototype more consistent).

* Xapian::Stem: Check for malloc and calloc failing to allocate memory and
  throw an exception.  Richard has fixed this upstream in snowball, so this is
  a temporary fix until we import a new version of snowball.

* Xapian::Database: Trying to open a database for reading which doesn't exist
  now fails with DatabaseOpeningError instead of FeatureUnavailableError.
  Added regression test for this.

* Add Stopper::get_description() and SimpleStopper::get_description().

testsuite:

* Fixed testsuite harness to work with valgrind on 64 bit platforms.

* Merged the "running tests" section of docs/tests.html into the similar
  section in HACKING, and make docs/tests.html refer the reader to HACKING for
  more information.

* Tidied and enhanced environmental variables which the test suite harness
  recongnises:

  + OM_TEST_BACKEND: Removed support since the "-b" switch to apitest allows
    you control which backend is used, making OM_TEST_BACKEND pretty much
    redundant.

  + XAPIAN_SIG_DFL: Renamed to XAPIAN_TESTSUITE_SIG_DFL.

  + XAPIAN_TESTSUITE_OUTPUT: New environmental variable to control use of
    ANSI colour escape sequences in test output (set to "plain" to disable
    them, unset, empty, or "auto" to check if stdout is a tty, or anything
    else to force colour).

flint backend:

* xapian-compact: Added "--multipass" option to merge postlists in pairs or
  triples until all are merged.  Generally this is faster than an N-way merge,
  but it does require more disk space for temporary files so it's not the
  default.

quartz backend:

* quartzcheck: If the database is too broken to open, emit a warning message
  and bump the error count.

build system:

* Now generate snapshots and releases with automake 1.9.6 (was 1.9.5) and
  libtool 1.5.22 (was 1.5.18).

* configure: If not cross-compiling, try to actually run a test program built
  with the C++ compiler, not just link one.

* configure: Fix to actually skip the check for valgrind if VALGRIND is set to
  an empty value.

* configure: Add sanity check for MS Windows that "find" is Unix-like find, not
  MSDOS-like.

* Fix conditional compilation of flint backend - it was being disabled when
  quartz was, not when flint was supposed to be.

documentation:

* INSTALL,README: Updated.

* Give pointer to replacements for the deprecated Enquire sorting methods
  in the doxygen collated documentation.

* PLATFORMS: Added success reports for ppc64 linux and Fedora Core 4.  Updated
  from the tinderbox.

* HACKING: Note platforms valgrind now has solid support for; Improve
  phrasing in a few places.

* Upgrade to using doxygen 1.4.6 for generating API documentation.

* Change title of the "full source" documentation to "Internal Source
  Documentation" rather than "Full source documentation" to make it
  clearer it's only useful if you want to modify Xapian itself.

* Fix documentation comments for the values of QueryParser::feature_flag so
  doxygen actually pulls out the documentation for them.  Add documentation for
  the parameters of QueryParser::parse_query().

* queryparser.html: Document wildcards.

portability:

* Fix compilation with GCC 4.0.1 and later (need to forward declare class
  InMemoryDatabase) (bug #69).

* Fix compilation under cygwin (broken in 0.9.2).

* Don't pass NULL for the second parameter of execl() - the Linux man page
  says execl takes "one or more pointers to null-terminated strings".  Also
  cast the NULL to (void*) to avoid "missing sentinel" warning from GCC4.

* Use snprintf instead of sprintf where available (we were attempting to
  do this in some places before, but the configure test was broken so
  sprintf was always being used).

* Enable more warnings under aCC and fix minor issues highlighted.  Suppress
  "Entire translation unit was empty" warning which isn't useful to us.

* Write top-bit set characters in the source using \xXX notation to avoid
  warnings from Intel's C++ compiler.

* configure: TYPE_SOCKLEN_T fails hard, so only run it if we've successfully
  run other socket tests.

* queryparser/accentnormalisingitor.h: #include <limits.h> for CHAR_BIT.

* bin/xapian-compact.cc: Fix printf type mismatch on 64 bit platforms.

* Replace pair<bool, string> with a simple class BoolAndString - the pair
  results in a 4328 byte symbol on HP-UX which gets truncated (to 4000 bytes).
  Most likely this is harmless, but it causes a warning.

* configure: Disable flint backend by default if building for djgpp or msdos.

* xapian-config: Previously when linking without libtool we've always thrown
  in dependency_libs, even though only some platforms need it (because it's
  generally pretty harmless).  However some Linux distros have an unhelpful
  policy of not packaging .la files, so libxapian.la isn't available to
  extract dependency_libs from.  Linux is a platform which doesn't require
  dependency_libs to be explicitly linked, so extend xapian-config to not
  pull in dependency_libs if libtool's link_all_deplibs_CXX=no.

* xapian-config: If the current platform needs dependency_libs and
  libxapian.la's dependency_libs contains another .la file, transform it into a
  pair of -L and -l options, and recursively expand its dependency_libs (if
  any).

* Don't pass functions with C++ linkage to places wanting pointers to functions
  with C linkage.  So far this has worked for us, but it causes warnings with
  some compilers, and may not be portable.

* Compaq C++ 7.1 doesn't suffer from the problem which previously prevented
  it from building Xapian.  This release includes workarounds for some
  oddities with errno.h support in this compiler, but currently the build
  fails when trying to link a binary with the library.

packaging:

* RPM: Invoke %setup correctly in xapian.spec.

debug code:

* Add missing '#include <iostream>' when TIMING_PATCH is defined.

Xapian-core 0.9.2 (2005-07-15):

API:

* QueryParser:

  + Added optional "flags" argument to parse_query method.

  + Add flag FLAG_BOOLEAN_ANY_CASE which tells the QueryParser that boolean
    operators such as "AND", "OR", and "NEAR" should be recognised even if
    they aren't fully capitalised (so "and", "And", "aNd", etc will work too).

  + Add flag FLAG_WILDCARD which tells the QueryParser to allow right
    truncation e.g. "xap*".

  + Fixed to handle "-site:microsoft.com" where site is a boolean prefix.
    Added testcases for this.

testsuite:

* The test harness was incorrectly creating a quartz database when a flint one
  was requested, which meant tests weren't being run against flint and so it
  had bugs rendering it pretty much unusable.

* Added regression test longpositionlist1 (to check encoding/decoding a long
  position list, which flint had problems with).

flint backend:

* Bumped format version number.

* Added new "xapian-compact" program which can compact and merge flint
  databases in a similar way to how quartzcompact does for quartz databases.

* Fixed to auto-detect database type when opening an existing Flint database
  as a WritableDatabase.

* The code to encode the position list size, first entry, and last entry
  didn't match the code to decode them!  Reworked both to match, using a
  slightly more compact encoding.

* We were failing to append "DB" to the path when opening a table for reading.

* Rewrite of FlintAllTermsList with several fewer member variables.  The
  rewrite fixes a bug too - the old version wasn't ignoring the metainfo
  entry which is now in the postlist table.

* It seems we need to explicitly kill the child process used for locking.
  Otherwise when we have two databases locked just closing the connection
  doesn't cause the child to die.  I don't understand why it's needed, but this
  fix is at least clean.

quartz backend:

* quartzcompact: Fix mis-repacking of keys in positionlist table when merging
  several databases.

* Disable assertion in allterms iteration which is incorrect in a corner case.
  This is only a problem if a termname contains zero bytes and you're using a
  debug build.  Add regression test test_specialterms2.

remote backend:

* Implement sorting on a value with the remote backend.

build system:

* Pass automake options to AM_INIT_AUTOMAKE rather than specifying them in
  Makefile.am.  This way, the version requirements for autoconf and automake
  are stated close together.

* configure: -Wshadow causes false positives with GCC 3.0.4, so only enable it
  for 3.1 and up.

* configure: Eliminate use of "ln -s" when generating include/xapian/version.h
  since it seems to cause problems on Solaris in some setups and isn't really
  necessary.

* Add dependency mechanism so version.h gets regenerated when the template is
  changed.

* configure: Check for spaces in build directory, source directory, or install
  prefix and die with a helpful message.

* Add dependency to generate queryparser_token.h.

* Eliminated TOP_SRCDIR and TOP_BUILDDIR - it's better to just use top_srcdir
  and top_builddir directly.

* configure: Generate the list of source files to feed to doxygen by inspecting
  all the Makefile.am files prior to running autoreconf rather than by using
  "find" when the user runs ./configure.  This speeds up configure, avoids
  generating docs for random .cc and .h files which aren't part of xapian-core,
  and avoids problems with picking up FIND.EXE on MS Windows.

documentation:

* Expanded explanation of the "descending docid with boolean weighting" trick
  for fast date ordered searching in Enquire::set_docid_order() API docs.

* docs/intro_ir.html: Citeseer has moved, so update link.

* testsuite/testsuite.cc: Update URL for valgrind FAQ in comment.

* COPYING: Update FSF address.

* HACKING: Minor updates to release checklist.

portability:

* Assorted tweaks towards allowing compilation with MSVC.

packaging:

* xapian.spec.in: Package xapian-compact.

Xapian-core 0.9.1 (2005-06-06):

API:

* Fix SEGV on get_terms_begin() on an empty Query object.  This was causing
  a SEGV in Omega with an empty query.

* Put Query::get_terms_end() inline in header.

flint backend:

* Added the new "flint" backend, which starts out as a copy of the quartz
  backend plus some modifications and replacements.  When creating a database
  without a specified backend, quartz is still used unless the environmental
  variable XAPIAN_PREFER_FLINT is set to a non-empty value.

* apitest now runs tests on flint as well as the other backends.

* Removed undocumented (and hence the little used) quartz "log" feature.

* Implement new fork+fcntl+exec based locking (for Unix) and CreateFile based
  locking (for Windows - currently untested).

* Move the special key/tag pair holding the total document length and doc id
  high water mark from the record table to the postlist table.  This means that
  when appending documents, the insertion point will now always be at the end
  of the record table which is more efficient.  We need to jump around the
  postlist table to merge postings in anyway.

* Changed metafile magic to be different from quartz, and make the metafile
  version a datestamp which we'll change each time the format changes.

* Check the return value of close() when writing the metafile.

* Flint position list table now stores entries using interpolative coding
  (which is significantly more compact).

quartz backend:

* quartzcheck: Fixed corner case where you couldn't check a single Btree table
  which was just the DB and baseA/baseB files in a directory (Xapian doesn't
  produce anything like this, but btreetest does while unit testing the
  Btree code).

build system:

* Releases are now created using libtool 1.5.18 and automake 1.9.5.

* configure: Pass more -W flags to g++ (including -Wundef which caught the
  getopt problem fixed in this release).  Fixed new GCC warnings from these new
  flags.

* Fixed a lingering DOXYGEN_HAVE_DOT reference.

* Fixed accidentally pruned #define which meant that getopt code was being
  included even on systems which use glibc (on such systems, we should use
  the glibc copy of the code instead).

* queryparser/queryparser.lemony: Add missing '#include <config.h>'.

documentation:

* Added missing documentation comments for a QueryParser methods added in
  0.9.0.

* docs/quartzdesign.html: Removed warning that quartz is still in development.

* PLATFORMS: Updated from tinderbox.

* configure: Describe CC_FOR_BUILD in configure --help output.

* HACKING: Updated release instructions to refer to SVN, and note that release
  tarballs are now built specially rather than being copies of snapshots.
  Update information about the SVN tag name to use for debian files.

* HACKING: Add "email Fabrice" to the release checklist so that RPM
  spec files don't lag behind.

* Fixed a few spelling mistakes.

packaging:

* xapian.spec: Remove bogus %setup line left over from when we packaged
  xapian-core and xapian-examples together from separate tarballs.

debug code:

* api/omqueryinternal.cc: Fixed compilation with --enable-debug.

* common/omdebug.h: Replace C style cast with static_cast<> which reveals that
  we were discarding const (harmlessly though).

Xapian-core 0.9.0 (2005-05-13):

API:

* Query objects really need to be immutable after construction (otherwise we
  need a copy-on-write mechanism).  To achieve this the following API changes
  were required:

  + Remove Query::set_length() in favour of an optional length
    parameter to Enquire::set_query().

  + Eliminated Query::set_elite_set_size() in favour of optional parameter
    to constructor.

  + Eliminated Query::set_window() in favour of an optional parameter to the
    constructor.

* Removed OP_WEIGHT_CUTOFF, since it doesn't actually seem to add useful
  functionality over using Enquire::set_cutoff().

* MSet::max_size() (which only exists so that MSet is an STL container) now
  returns MSet::size() and is inlined from the header.

* Added ESet::max_size() (for STL compatibility).

* Fixed Xapian::RSet to have the same "it's a handle" copy semantics as most of
  the other classes.

* Rewritten QueryParser class:

  + Uses Lemon instead of Bison to generate the parser, which enables us to
    stop using static data, so this class is at last reentrant.

  + QueryParser now uses a PIMPL style with reference counted internals like
    most of the other Xapian classes.

  + Direct access to member variables has gone, which unfortunately forces an
    API change (but this fixes bug #39).  Instead of accessing
    QueryParser::termlist member variable, iterate over terms using
    Query::get_terms_begin() and get_terms_end() on the returned Query object.
    Direct access to stoplist is replaced by QueryParser::get_stoplist_begin()
    and get_stoplist_end(); and to unstem by get_unstem_begin() and
    get_unstem_end().

  + The rewrite parses many real world examples better than the old version.

  + Now allow searches for C#, etc.  If a database has been set, for this and +
    and - suffixes, check if the term actually exists, and if not, ignore the
    suffix if the unsuffixed term exists.

  + Added QueryParser::get_description() method (not very descriptive yet!)

  + Added backward compatibility wrapper for old version of
    QueryParser::set_stemming_options().

  + xapian.h now automatically includes xapian/queryparser.h.  Directly
    including xapian/queryparser.h will continue to work for now, but is
    deprecated.

  + QueryParser::parse_query() was failing to clear termlist and unstem
    - the rewrite fixes this.

  + New QueryParser parses "term prefix:(term2 term3)" correctly.

* Added Xapian::SimpleStopper which just stops terms specified by a pair of
  iterators.  This should be sufficient for the majority of uses.

* Tidied up the Enquire sorting API and added ability to reverse sort on a
  value.  Removed sort_bands support.

* Enquire::get_description() improved.

* Methods which return an end iterator where the internals are just NULL are
  now inline in the header for efficiency.  Should we ever need to change an
  implementation, we can easily move methods back into the library and bump the
  library version suitably.

* Added Stem::operator() as preferred alternative to Stem::stem_word().

* Simplified Stem internal design by restructuring to eliminate a few internal
  methods.

* BM25Weight: Avoid fetching document length if we're simply going to multiply
  it by zero!

testsuite:

* Fixed TEST_EQUAL_DOUBLE to use DBL_EPSILON correctly.

* Rewrite of index_utils test harness code, removing unused and unusual
  features.  Data files for tests are now easier to write.  These changes
  also fix the bug that ^x didn't actually decode hex values correctly.

* tests/testdata/etext.txt: Stripped carriage returns.

* apitest: Extended stemlang1 to check that trying to create
  a stemmer for a non-existent language throws InvalidArgumentError.

* queryparsertest:

  + Moved into tests/ subdirectory.

  + Reworked to use the standard testsuite harness.

  + Added tests for new features in the rewritten QueryParser.

quartz backend:

* quartzcheck: Now checks the structure of all the tables, not
  just the postlist table, and cross-checks doclen values between
  termlist and postlist tables.  Recognises "--help" option.  Should
  now continue after an error (typically it would crash before), and
  counts the number of errors found.  Now exits with non-zero status
  if any errors were found.  More readable output.

* quartzcompact: Extended to allow merging several quartz
  databases to produce a single compact quartz database.  This
  allows for faster building - simple index in chunks, then merge
  the chunks.

* quartzcompact: Made full compaction a tiny bit more compact.

* quartzcompact: Added "fuller compaction" mode, which ignores the usual "at
  least 4 items per block" rule.  This achieves slightly tighter compaction,
  though it's probably not advisable to use this option if you plan to update
  the compacted database.

* Improved compaction by a few % in non-full case.  Tighter bound on amount of
  memory to reserve to read the tag into.

* Fix skip_to on an allterms TermIterator to set the current term when the
  skip_to-ed term is in the database.  Add regression test for this
  (allterms5).

* Values are stored in sorted order so we can stop unpacking the list once we
  get to one after the one we're looking for (in the case where the one we're
  looking for doesn't exist).

build system:

* configure: Check that the C++ compiler can actually link a program.
  AC_LANG_CXX doesn't, and if it can't find a C++ compiler it'll just return
  "g++" which just leads to a later configure test failing in a confusing way.

* configure: corrected configure output of "none known for yes" or "none known
  for no" to "none known for g++-3.2" or similar.

* include/xapian/version.h: Define XAPIAN_HAS_xxx_BACKEND for each backend
  which is enabled.  The bindings need this, and user code might find it useful
  too.

* include/xapian/database.h: Don't declare the backend factory functions if the
  corresponding backend has been disabled.  This means that trying to use a
  disabled backend will be caught at compile time rather than link time.

* configure: Enhanced valgrind test to (a) see if --tool=memcheck
  is needed and (b) see if valgrind actually works (we don't want to
  try to use an x86 valgrind on an x86_64 box).

* configure: Suppress 2 Intel C++ warnings which we can't easily code around,
  and enable -Werror automatically with --enable-maintainer-mode.

* Clearer make rules for building Postscript doxygen docs.

* Removed some no longer used code.

* Moved a number of method definitions out of headers because they are virtual,
  or too large to be sensible candidates for inlining.

* Eliminated the extra library for the queryparser - it's tiny compared to the
  main library and having it around just complicates things.

* configure: We no longer need Bison, but we do need CC_FOR_BUILD to compile
  Lemon with.

* Snapshot generator now appends _svn6789 or similar to the version string.
  Adjusted configure and XO_LIB_XAPIAN macro to take this into account.

* configure: If any tools needed for documentation are missing
  and we're in maintainer mode, die with a suitable error in
  configure rather than with strange errors when building the
  documentation.

* docs/Makefile.am: Explicitly set the pool_size for latex, because we
  now seem to overflow the default setting on some systems.

* docs/Makefile.am: Use $(MAKE) instead of make.

documentation:

* Numerous improvements to documentation comments.  Added documentation
  comments for QueryParser class.

* HACKING: Added better description of how reference-counted API
  classes are structured.

* HACKING: Note that '#include <limits>' isn't supported by GCC 2.95,
  and other assorted minor tweaks.

* HACKING: Note how to disable use of VALGRIND on the make check
  command line, or when using runtest directly.

* Updated all documentation mentions of CVS to talk about Subversion
  instead.

* PLATFORMS: Updated from tinderbox and other sources.

* PLATFORMS: Added minimal testcase which fails to compile with
  Compaq's C++ compiler (cxx).

* INSTALL,README: Updated.

* docs/queryparser.html: Note that + and - work on phrases and
  bracketed expressions.

* docs/intro_ir.html: Corrected two errors.

* docs/stemming.html: Stemming appears to be applicable to Japanese
  so don't say it isn't!

examples:

* Moved xapian-examples module to examples subdirectory of xapian-core.

* quest: Added stopword handling.

portability:

* configure: autoconf identifies Intel's C++ compiler as GCC, so probe for
  which we actually have.

* Xapian will now compile cleanly with Intel C++ 8.1 on ia64 Linux and
  on x86 Linux.

* backends/quartz/btree.cc: Fixed GCC compilation warning.

* tests/api_db.cc: Fixed warning from Sun's C++ compiler.

* configure: Automatically enable ANSI C++ mode for SGI's compiler
  with '-LANG:std'; check that any automatically determined flags
  for ANSI C++ mode actually allow us to compile a trivial program
  - if they don't it probably means the compiler isn't the one we
  were expecting, but one installed with the same name, so we now
  drop the flags in this case.

* The compile on IRIX with SGI compiler is now warning free, apart from two
  "unused variable" warnings in Snowball generated code.

* On WIN32, don't define NOMINMAX if it is already defined.

packaging:

* xapian.spec: Don't say "%makeinstall" in a comment since rpm
  tries to expand it and explodes.

* xapian.spec: '/usr/share' -> '%{_datadir}'.

* xapian.spec: Put the .so in the -devel package (it's only useful
  for linking to - the .so.* files are all that's needed at runtime).

debug code:

* net/socketserver.cc: Fixed typo in debug code.

Xapian-core 0.8.5 (2004-12-23):

quartz backend:

* quartzcompact: When full_compaction is enabled, don't fill the last few bytes
  of a block if that would mean we needed an extra item and the overhead for
  that item would use up more of the next block than we save.  This reduces the
  table size after full compaction by up to 0.2% in my tests!

* quartzcompact: Tables sizes will always be a whole number of Kbytes, since
  the blocksize is, so report the size in K.  Also report the change in size as
  well as the before and after sizes.

* quartzcompact: Added missing '#include <config.h>' so that largefile support
  is enabled when we call stat() and we report compression statistics for
  tables > 2G.

* quartzcompact: Added --no-full / -n option to disable full compaction.  This
  may be useful if you want to update the database after compacting it (need to
  test to see if this option is actually useful).

* Renamed Btree::compress() to Btree::compact() for consistency with
  "full_compaction" and "quartzcompact".  Also, "compress" is confusing since
  we use that term in the zlib patch.

build system:

* xapian-config: Fixed --libs output to not include libxapian.la.

* Added missing '#include <config.h>' to various .cc files (the omissions were
  probably harmless, but config.h should be included as the first thing any
  source file does).

documentation:

* Minor updates.

packaging:

* RPM spec file: %makeinstall puts the wrong paths in the .la files so use
  "make DESTDIR=... install" instead.

debug code:

* Fixed to build with AssertParanoid enabled.

Xapian-core 0.8.4 (2004-12-08):

API:

* Added constructors to Database and WritableDatabase which fulfil the role
  that the Auto::open() factory functions currently do.  Auto::open() is
  now deprecated.

* Removed the ability to write a Xapian object to an ostream directly, as
  it's little used and potentially dangerous ('cout << mset[i];' will
  compile, but you almost certainly meant 'cout << *mset[i];').  You can
  get the old effect by writing 'cout << obj->get_description();' instead
  of 'cout << obj;'.  Note that including xapian.h no longer pulls in
  fstream, which code may have been implicitly relying on - if this is
  a problem add '#include <fstream>' after '#include <xapian.h>'.

* QueryParser: Be smarter about when to add a ':' when adding a term prefix.

* BoolWeight::unserialise() now returns BoolWeight*, and similarly for
  TradWeight and BM25Weight.  BoolWeight::clone() now returns BoolWeight *.

* If a database contains no positional information, change NEAR and PHRASE
  queries into AND queries (as otherwise they'd return no matches at all)
  (bug #56).  Added feature test phraseorneartoand1.

* Renamed BM25 parameters to match standard naming in papers and elsewhere
  (A->k3, B->k1, C->k2, D->b), eliminated the extra factor of 2 which our C
  had, and reordered the parameters to k1, k2, k3.  This is an incompatible API
  change for BM25Weight(), so if you are using custom parameters for BM25
  you'll need to update your code.

* During query expansion, if we estimate the term frequency, ensure it has a
  sane value (>= r and <= N - R + r) rather than bodging around the problem
  later on.

* TradWeight, BM25Weight: termfreq is always exact for matching (we only
  approximate it for query expansion) so replace code to work around bad
  approximations with Assert() to make sure this never happens.

testsuite:

* runtest: Enhanced to allow it to run test programs under valgrind and other
  tools (gdb was already supported).

* runtest: now works with valgrind 2.1.2 and later (valgrind's --logfile-fd
  option was renamed to --log-fd).

* runtest: Allow VALGRIND environmental variable to override the value we got
  from configure.

* Added a dependency so "make check" regenerates runtest if necessary.

* The test programs now point the user to the runtest script if srcdir can't
  be guessed.  And they no longer look for the test program in the tests
  subdirectory of the current directory.

* btreetest: Fixed memory leaks in test_cursor1 (the testcase itself was
  causing the leak, not the library).

* apitest: Fixed mset_range_is_same() and mset_range_is_same_weights() helper
  functions which were only comparing the first item in the range.  Thankfully
  the tests still all pass so this wasn't hiding any bugs.

* apitest: A modified version of changequery1 fails - the bug is obscure and
  subtle, and the fix is tricky so set the modified test to SKIP for now.

* apitest: Added test_weight1 which tests the built-in Xapian::Weight
  subclasses and test_userweight1 which tests user defined weighting schemes
  (bug#8).

* quartztest: Test with DB_CREATE_OR_OPEN in writelock1.

quartz backend:

* An interrupted update could cause any further updates to fail with "New
  revision too low" because the new revision was being calculated incorrectly -
  fixed (bug#55).

* Fixed Bcursor::del() which didn't always leave the cursor on the next item
  like it should.  This may have been causing problems when trying to remove
  the last references to a particular term.

* Fixed ultra-obscure bug in the code which finds a key suitable to
  discriminating between two blocks in a B-tree branch (discovered by reading
  the code).  Comparing the keys didn't consider the length of the second, so
  it is possible the code would miscompare.  But in reality this is extremely
  unlikely to happen, and even then would probably just mean that the
  discriminating key wouldn't be as short as it could be (wasting a few bytes
  but otherwise harmless).

* If we're removing a posting list entirely, often there will only be one
  chunk, so avoid creating a Bcursor in this case.

* Simplified Btree::compare_keys() by removing the last case which was dead
  code as it was covered by an earlier case.

* Check that any user specified block size is a power of 2.  If the block
  size passed is invalid, use the default of 8192 rather than throwing an
  exception.

* Started to refactor the Btree manager by introducing Item and Key classes
  which take care of handling the on-disk format, and eliminated duplicated
  tag reading code in Btree and Bcursor.  These changes will pave the way for
  improvements to the on disk format.

* Applied the Quartz "DANGEROUS" patch, but disabled for now.  This way it
  won't keep being broken by changes to the code.

* quartzcompact: Added --help and --version; Check that the source path and
  desitination path aren't the same; Report each table name when we start
  compacting it, and some simple stats on the compaction achieved when we
  finish.

muscat36 backend:

* Removed a default parameter value from one variant of
  Xapian::Muscat36::open_db() so that there's only one candidate for
  open_db(string).

build system:

* xapian-config: If flags are needed to select ANSI mode with the current
  compiler, then make xapian-config --cxxflags include them so that Xapian
  users don't have to jump through the same hoops we do.

* xapian-config: Added --swigflags option for use with SWIG.

* XO_LIB_XAPIAN now passes ac_top_srcdir to xapian-config which uses it
  (if provided) to say "configure.ac" or "configure.in" rather than
  "configure.in (or configure.ac)" in the "Add AC_PROG_LIBTOOL"
  error message.

* Cleaned up the build system in a few places.

* Removed a few totally unneeded header includes.

* Moved a number of functions and methods out of headers because they're not
  good inlining candidates (too big or virtual methods).

* Changed C style casts to C++ style.  The syntax is ugly, but they do make the
  intent clearer which is a good thing.  Note this as a coding style guideline
  in HACKING.

* configure.ac: Automatically add -Werror to CFLAGS and CXXFLAGS if
  maintainer mode is enabled and we're using GCC3 or newer.  Don't do
  this for older GCCs as GCC 2.95 issues spurious warnings.

* Reworked how include/xapian/version.h is generated so that it works
  better with compilers other than GCC, and with HP-UX sed.

* XAPIAN_VERSION is now a string (e.g. "0.8.4").

* Added new #define XAPIAN_REVISION (which is 4 for version 0.8.4).

documentation:

* docs/bm25.html,docs/intro_ir.html: Reworked to talk about Xapian
  rather than Muscat.  Also improved the appearance of the formulae.

* HACKING: Valgrind now supports x86 FreeBSD and PowerPC Linux.

* Documented parameters of Enquire::register_match_decider().

* We now use doxygen 1.3.8 to build documentation for snapshots and releases.

* PLATFORMS: Updated from the tinderbox (which now runs builds on machines
  available in HP's testdrive scheme) and other assorted reports.

* PLATFORMS: Removed reports from versions prior to 0.7.0.  So much
  has changed that these are of little value.

* docs/scalability.html: Added note warning about benchmarking from cold.

* Assorted other minor documentation improvements.

portability:

* configure.ac: Improved snprintf configure test to actually
  check that it works (older implementations may have different
  semantics for the return value, and at least one ignores the length
  restriction entirely!)

* Reworked the GNU getopt source we use so that the header is clean and
  suitable for use from a reasonably ISO-conforming C++ compiler instead of
  being full of cruft for working around quirky C compilers which C++ compilers
  tend to stumble over.

* Use SOCKLEN_T for the type we need to pass to various socket calls, since
  HPUX defines socklen_t yet wants int in those calls.  Reworked the
  TYPE_SOCKLEN_T test we use.

* On Windows, we want winsock2.h instead of sys/socket.h.  Mingw doesn't seem
  to even have the latter, so I think previously we've been compiling by
  picking one up from somewhere random!

* Change the small number of C sources we have to be C++ so we can compile
  everything with the C++ compiler.  This way we don't need to worry about
  configure choosing a mismatching pair of compilers, or about whether
  configure tests with the C compiler don't apply to the C++ compiler, or vice
  versa.

* Compiles and passes testsuite with HP's aCC (we have to compile in
  ANSI mode, so we automatically add -AA to CXXFLAGS).

* If the link test detects pread and pwrite are present, get configure to try
  out prototypes for pread and pwrite.  This is much cleaner than trying to
  find the right combination of preprocessor defines to get each platform's
  system headers to provide prototypes.

* configure: Disable probing for pread/pwrite on HP-UX as they're present but
  don't work when LFS (Large File Support) is enabled, and we definitely want
  LFS.

* Fixed some warnings from Sun's C++ compiler.

* Provide our own C_isalpha(), etc replacements for isalpha(), etc
  which always work in the C locale and avoid signed char problems.

* For mingw/cygwin, pass -no-undefined when linking libxapianqueryparser.la
  so libtool builds a shared library.  Also pass the magic linker flag
  -Wl,--enable-runtime-pseudo-reloc if configure has determined it is needed.

* For cygwin, use the underlying MoveFile API call for locking, as link()
  doesn't work on FAT partitions.  And don't rely on HAVE_LINK to control
  whether we use link() otherwise - if the configure test somehow misfires, a
  compilation error is better than using rename() on Unix as that would cause a
  second writer to smash the lock of the first.

* Closer to building with Compaq C++ - add "-std strict_ansi" to CXXFLAGS, and
  tweaked the code in several places.  It currently dies trying to compile
  the PIMPL smart pointer template code which looks hard to fix.

debug code:

* HACKING: Document that %% in XAPIAN_DEBUG_LOG is substituted with
  the process-id, and that setting XAPIAN_DEBUG_FLAGS to -1 enables
  all debug messages.

* Removed compatibility code for checking environment variables OM_DEBUG_FILE
  and OM_DEBUG_TYPES.

Xapian-core 0.8.3 (2004-09-20):

API:

* Fixed bug which caused a segmentation fault or odd "Document not found"
  exceptions when new check_at_least parameter to Enquire::get_mset() was used
  and there weren't many matches (regression test checkatleast1).

remote backend:

* Renamed omtcpsrv to xapian-tcpsrv and omprogsrv to xapian-progsrv.

packaging:

* RPM packaging now has a separate package for the runtime libraries to
  allow 32 and 64 bit versions to be installed concurrently.

* RPM for xapian-core now includes binaries from xapian-examples.

debug code:

* Fixed to compile with debug tracing enabled.

Xapian-core 0.8.2 (2004-09-13):

API:

* Removed the compatibility layer which allowed programs written against the
  pre-0.7.0 API to be compiled.

* Added new ESet methods swap(), back() and operator[].

* Xapian::WritableDatabase::replace_document can now be used
  to add a document with a specific docid (to allow keeping docids
  in sync with numeric UIDs from another system).

* Added Xapian::WritableDatabase::replace_document and
  delete_document variants which take a unique id term name rather
  than a document id.

* Enquire::get_mset(): If a matchdecider is specified and no matches
  are requested, the lower bound on the number of matches must be 0
  (since the matchdecider could reject all the matches).

* Renamed Query::is_empty() to Query::empty() for consistency.  Keep
  Query::is_empty() for now as a deprecated alias.

* Enquire::set_sorting() now takes an optional third parameter which allows
  you to specify a sort by value, then relevance, then docid instead of
  by value then docid.

* Enquire::get_mset() now takes an optional "check_at_least" parameter
  which allows Omega's MIN_HITS functionality to be implemented in the matcher
  (where it can be done a bit more efficiently).

testsuite:

* Reworked quartztest's positionlist1 into a generic api test as apitest's
  poslist3.

* apitest: Reenabled allterms2, but with the iterator copying parts removed -
  TermIterator is an input_iterator so that part was invalid.

* Overhauled btreetest and quartztest - tests at the Btree level are now all
  in btreetest.  Those at the QuartzDatabase level are in quartztest.

* Split api_db.cc into 3 files as it has grown rather large.

* tests/runtest: Added support for easily running gdb on a test program,
  automatically sorting out srcdir and libtool.

quartz backend:

* Refactored the quartz backend code to reduce the number of layered classes
  and eliminate unnecessary buffering, reducing memory usage so that more
  posting list changes can be batched together (see next change) and database
  building can be done several times faster.

* Added tunable flush threshold - set XAPIAN_FLUSH_THRESHOLD=50000 to flush
  every 50000 documents.  The default is now every 10000 documents (was
  every 1000 documents previously).  The optimum value will most likely
  depend on your data and hardware.

* WritableDatabase::get_document() no longer forces pending changes to be
  flushed.  The document will read things lazily from the database, and that
  reading may trigger a forced flush).

* WritableDatabase::get_avlength() no longer forces pending changes to be
  flushed.  This means you can now search a modified WritableDatabase without
  causing a flush unless the search includes a term whose postlist has pending
  modifications.

* Reduced quartz postlist chunk threshold from "2048 or a few bytes more" to
  "2000 or a few bytes more" so that full size chunks won't get split by the
  Btree.

* Improved the "Db block overwritten" message.  The DatabaseCorruptError
  version now suggests multiple writers may be the cause, while the
  DatabaseModifiedError version uses less alarming wording and says to call
  Database::reopen().

* QuartzWritableDatabase now stores the total document length and the last
  docid itself rather than tallying added and removed document length and
  writing the last docid back every time a document is added.  This gives
  cleaner code and a small performance win.

* Make the first key null for blocks more than 1 away from the leaves.
  It saves disk space for a tiny CPU and RAM cost so is bound to be
  a win overall.

* matcher/localmatch.cc: Fixed problems handling termweights in queries with
  the same term repeated (bug #37) and added regression test (qterminfo2).

* Sped up iteration over all the terms in a database (QuartzCursor now only
  reads the tag from the Btree if asked to).

* Cancelling an operation is now implemented more efficiently.

inmemory backend:

* Fixed bugs with deleting a document while a PostingIterator over it is
  active.

muscat36 backend:

* Fixed to compile now that internal_end_session() has gone (broken in 0.8.1).

build system:

* Fixed to compile when configured with --disable-inmemory (bug #33).

* XO_LIB_XAPIAN now AC_SUBSTs XAPIAN_VERSION so your application's build
  system can easily check for a particular version of Xapian.

* When compiling with GCC, we check that the compiler used to compile the
  library and the compiler used to compile the application have compatible
  C++ ABI versions.  Unfortunately GCC 3.1 incorrectly reports the same
  ABI version as GCC 3.0, so we now special case that test.

* Bumped the versions of the autotools we require for bootstrapping, and
  updated the documentation of these in the HACKING document.

* Quote macro names to fix warnings from newer aclocal.

documentation:

* Improved API documentation for Xapian::WritableDatabase::replace_document and
  delete_document.

* Added documentation comments for MSet methods size(), empty(), swap(),
  begin(), end(), back().

* Removed bogus documentation comments saying that some Enquire methods can
  throw DatabaseOpeningError.

* Updated quartz design docs to reflect recent changes.  Also pulled
  out the Btree and Bcursor API docs and slotted them in as doxygen
  documentation comments - this way they're much more likely to
  be kept up-to-date.

* Corrected multiple occurrences of "an Xapian::XXX" to "a Xapian::XXX"
  (presumably these all resulted from replacing "Om" with "Xapian::").

* Various minor updates and improvements.

portability:

* Reworked how we cope with fcntl.h #define-ing open on Solaris.  This change
  finally allows Sun's C++ compiler to produce a working Xapian build on
  sparc Solaris!

* configure.ac: Don't define DATADIR - we no longer use it and clashes
  with more recent mingw headers.

* matcher/andpostlist.cc: Initialise lmax and rmax to 0.  This cures
  the SIGFPE on apitest's qterminfo2 on alpha linux.

Xapian-core 0.8.1 (2004-06-30):

API:

* New method Xapian::Database::get_lastdocid which returns the highest used
  document id for a database (useful for re-synchronizing an indexer which
  was interrupted).  Implemented for quartz and inmemory.

* Xapian::MSet::get_matches_*() methods now take collapsing into account, and
  the documentation has been clarified to state explicitly that collapsing and
  cutoffs are taken into account (bug#31).

* Xapian::MSet: Need to adjust index by firstitem when indexing into items
  (bug#28).

* MSetIterator and ESetIterator are now bidirectional iterators (rather than
  just input iterators)

* Fixed post-increment forms of PostingIterator, TermIterator,
  PositionIterator, and ValueIterator so that *i++ works (as it must for them
  to be true input iterators).

* Xapian::QueryParser: If we fail to parse a query, try stripping out
  non-alphanumerics (except '.') and reparsing.

* Fixed memory leaked upon Xapian::QueryParser destruction.

* Removed several unused Xapian::Error subclasses (these were used by the
  indexer framework which we decided was a failed experiment).

testsuite:

* queryparsertest: Pruned near-duplicate queryparsertest testcases.

* queryparsertest: Added test case for `term NOT "a phrase'.

* remotetest: Use 127.0.0.1 instead of localhost so that tcpmatch1 doesn't fail
  just because the network setup is broken.

* apitest: Make emptyquery1 check that Query("") causes an InvalidArgumentError
  exception.

quartz backend:

* Fixed bug which meant we sometimes failed to remove a posting when deleting
  or replacing a document.

* Fixed PostlistChunkReader to take a copy of the postlist data being read to
  avoid problems with reading data from a string that's been deleted.

* Fixed bug in postlist merging which could occasionally extend a postlist
  chunk to overlap the docid range of the next chunk.

* Eliminated the split cursor in each Btree object - we only actually need a
  single block buffer to handle splitting blocks.  This reduces the memory
  overhead of each Bcursor (and hence each QuartzPostList).

* Changed 2 calls to abort() to throw Xapian::DatabaseCorruptError instead,

* If Btree is writable, throw DatabaseCorruptError if we detect overwritten.

* Check the return value of fdatasync()/fsync()/_commit() and raise an error.
  If they fail, we really want to know as it could cause data corruption.

* Assorted clean ups, improved comments, debug tracing, assertions.

* When merging in postlist changes, removed an unneeded call to
  QuartzBufferedTable::get_or_make_tag() in a case when we're using a cursor
  which has already fetched the tag.

* Added SON_OF_QUARTZ define to disable incompatible changes to database
  formats by default, and use it to control the docid encoding for keys such
  that we're always inserting at the end of the table when added new documents.

* Reopening the readonly version of a writable Btree is now more efficient
  (we used to close and reopen all the files and destroy and recreate a lot
  of objects and buffers).

* Share file descriptors between the read and write Btree objects so that a
  quartz WritableDatabase now uses 5 fds rather than 10.

* Added configure test for glibc, because otherwise we need to include a header
  before we can check for glibc in order to define something we should be
  defining before we include any headers!  Defining _XOPEN_SOURCE on OpenBSD
  seems to do the opposite to Linux and *disable* pread and pwrite!

backends:

* Stripped out the session machinery - all that is actually required is to
  ensure that any unflushed changes are flushed when the destructor runs.

* A few other backend interface cleanups.

build system:

* Unified the shlib version numbers (the small benefit of tracking them
  individually makes it hard to justify the extra work required, and having one
  version simplifies debian packaging too).

* configure.in: Fix typo (STLPORT_CXXLAGS -> STLPORT_CXXFLAGS)

* Removed trivial m4/Makefile.am and autoconf/Makefile.am and do the work
  from the top level Makefile.am instead.  It's easier to see the structure
  this way, and it also removes a couple of recursive make invocations which
  will speed up builds a little.

documentation:

* HACKING: Added a list of subtasks when doing a release.
  Currently it's always me that does this, but it may not always be
  and anyhow it'll help me to have a list to run through.

* include/xapian/database.h: Remove references to sessions in doxygen
  comments.

* docs/quickstart.html: Corrected lingering reference to "om.h" and
  note that we need <iostream>.

* docs/quickstartindex.cc.html,docs/quickstartexpand.cc.html,
  docs/quickstartsearch.cc.html: Add <iostream>.

* PLATFORMS,AUTHORS: Updated.

* docs/quartzdesign.html: Corrected various pieces of out of date
  information, and improved wording in a couple of places.

* docs/scalability.html: Removed the reference to the Quartz update bottleneck
  "currently being addressed for Xapian 0.8" as it's now been addressed!  Also
  reworded to remove use of first person (it was originally a message sent to
  the mailing list).

Xapian-core 0.8.0 (2004-04-19):

* Omega, xapian-examples and xapian-bindings now have their own NEWS files.

API:

* Throw an exception when an empty query is used to build in the binary
  operator Query constructor (previously this caused a segfault.  Added
  regression test.

* Made the TradWeight constructor explicit.  This is technically an API change
  as before you could pass a double where a Xapian::Weight was required - now
  you must pass Xapian::TradWeight(2.0) instead of 2.0.  That seems desirable,
  and it's unlikely any existing code will be affected.

* Added "explicit" qualifier to constructors for internal use which take a
  single parameter.

* Renamed Xapian::Document::add_term_nopos to Xapian::Document::add_term
  (with forwarding wrapper method for compatibility with existing code).

* The reference counting mechanism used by most API classes now handles
  creating a new object slightly more efficiently.

* Xapian::QueryParser: Don't use a raw term for a term which starts with a
  digit.

testsuite:

* apitest, quartztest: Added a couple of tests, and commented out some test
  lines which fail in debug builds.

* quartztest: cause a test to fail if there's still a directory after a call
  to rmdir(), or if there isn't a directory after calling mkdir().

* apitest: Check returned docids are the expected values in a couple more
  cases.  Improved wording of a comment.

quartz backend:

* We now merge a batch of changes into a posting list in a single pass which
  relieves an update bottleneck in previous versions.

* When storing the termlist, pack the wdf into the same byte as the reuse
  length when possible - doing so typically makes the termlist 14% smaller!
  This change is backward compatible (0.7 database will work with 0.8, but
  databases built or updated with 0.8 won't work with 0.7).

* quartzcheck: Check the structure within the postlist Btree as well as
  the Btree structures themselves.

* Reduced code duplication in the btree manager and btreechecking code.

* quartzdump: Backslash escape space and backslash in output rather than hex
  encoding them; renamed start-term and end-term to start-key and end-key;
  removed rather pointless "Calling next" message; if there's an error, write
  it to stderr not stdout, and exit with return code 1.

* Corrected a number of comments in the source.

* Removed several needless inclusions of quartz_table_entries.h.

* Removed OLD_TERMLIST_FORMAT code - it has been disabled for since 0.6.0.

* Removed all the quartz lexicon code and docs.  It's been disabled for ages,
  and we've not missed it.

build system:

* XO_LIB_XAPIAN autoconf macro can now be called without arguments in the
  common case where you want the test to fail if Xapian isn't found.

* Fixed the configure test for valgrind - it wasn't working correctly when
  valgrind was installed but was too a version to support VALGRIND_COUNT_ERRORS
  and VALGRIND_COUNT_LEAKS.

* GCC 2.95 supported -Wno-long-long and is our minimum recommended version, so
  unconditionally use -Wno-long-long with GCC, and don't test for it on other
  compilers (the old test incorrectly decided to use it with SGI's compiler
  resulting in a warning for every file compiled).

documentation:

* Updated the quickstart tutorial and removed the warning that "this
  document isn't up to date".

* docs/intro_ir.html: Added a link to "Information Retrieval" by Keith van
  Rijsbergen which can be downloaded from his website!

* docs/quartzdesign.html: Some minor improvements.

* docs/matcherdesign.html: Merged in more details from a message sent to the
  mailing list.

* docs/queryparser.html: Grammar fixes.

* Doxygen wasn't picking up the documentation for PostingIterator and
  PositionListIterator - fixed.  Added doxygen comments for Xapian::Stopper
  and Xapian::QueryParser.

* PLATFORMS: Updated with many results from tinderbox and from users.

* AUTHORS: Updated the list of contributors.

* HACKING: XAPIAN_DEBUG_TYPES should be XAPIAN_DEBUG_FLAGS.

* HACKING: Updated to mention that building from CVS requires
  `./configure --enable-maintainer-mode' (or use bootstrap).

* HACKING: Added notes about using "using", and pointers to a couple of useful
  C++ web resources.

portability:

* Solaris: Code tweaks for compiling with Sun's C++ compiler.

* IRIX: Code tweaks for compiling with SGI's C++ compiler.

* NetBSD mkdir() doesn't cope with a trailing / on the path - fixed our code to
  cope with this.

* mingw/cygwin: Only use O_SYNC (on the debug log) if the headers define it.

* backends/quartz/quartz_table_manager.cc: Fix for building on mingw.

* mingw: Added configure test for link() to avoid infinite loop in our C++
  wrapper for link.

* mingw and cygwin both need -Wl,--enable-runtime-pseudo-reloc passing when
  linking.  Arrange for xapian-config to include this, and check that the ld
  installed is a new enough version (or at least that it was at configure
  time).  Also pass to programs linked as part of the xapian-core build.

* cygwin: Close a QuartzDatabase or QuartzWritableDatabase before trying to
  overwrite it - cygwin doesn't allow use to delete open/locked files...

* backends/quartz/quartz_termlist.cc: Use Xapian::doccount instead of
  unsigned int in set_entries().

* Database::Internal::Internal::keep_alive() should be
  Database::Internal::keep_alive().

* Make Xapian::Weight::Weight() protected rather than private as we want to be
  able to call it from derived classes (GCC 3.4 flags this, other compilers
  seem to miss it).

debug code:

* Open debug log with flag O_WRONLY so that we can actually write to it!

* backends/quartz/quartz_values.cc: Fixed problem with dereferencing
  a pointer to the end of a string in debug output.

Xapian 0.7.5 (2003-11-26):

API:

* Xapian::QueryParser now supports prefixes on phrases and expressions (e.g.
  author:(twain OR poe) subject:"space flight").

* Added missing default constructors for TermIterator, PostingIterator, and
  PositionIterator classes.

* Fixed PositionIterator assignment operator.

testsuite:

* queryparsertest: Added testcase for new phrase and expression prefix support.

* apitest: Added regression tests for API fixes.

backends:

* quartzcompact: Fix the name that the meta file gets copied to (was
  /path/to/dbdirmeta rather than /path/to/dbdir/meta).

build system:

* Changed to using AM_MAINTAINER_MODE.  If you're doing development work on
  Xapian itself, you should configure with "--enable-maintainer-mode" and
  ideally use GNU make.

* Fixed configure test for fdatasync to work (I suspect a change in a recent
  autoconf broke it as it relied on autoconf internal naming).

* Fully updated to reflect move of libbtreecheck.la from backends/quartz
  to testsuite.  btreetest and quartzcheck should build correctly now.

documentation:

* Added first cut of documentation for Xapian::QueryParser query syntax.

* Fixed incorrectly formatted doxygen documentation comments which resulted in
  some missing text in the collated API and internal classes documentation.

* Documented --enable-maintainer-mode and problems with BSD make in HACKING.

* Fixed typo in docs/scalability.html.

* PLATFORMS: Updated from the tinderbox.

omega:

* omega: Parsing of the probabilistic query is now delayed until we need some
  information from it.  This means that we can now use options set by the
  omegascript template to control the behaviour of the query parser.
  $set{stemmer,...} now controls the stemming language (e.g. $set{stemmer,fr})
  and $setmap{prefix,...} now sets the QueryParser prefix map (e.g.
  $setmap{prefix,subject,XT,abstract,XA}).

* omega: Fixed $setmap not to add bogus entries.

* docs/omegascript.txt: Expanded documentation of $set and $setmap to list
  values which Omega itself makes use of.

* omega: Cleaned up the start up code quite a bit.

* omega: Removed the unfinished code for caching omegascript command
  expansions.  Added code to cache $dbsize.  The only other value correctly
  marked for caching is already being cached!

Xapian 0.7.4 (2003-10-02):

API:

* Fixed small memory leak if Xapian::Enquire::set_query() is called more than
  once.

* Xapian::ESet now has reference counted internals (library interface version
  bumped because of this).

* Removed unused OmDocumentTerm::termfreq member variable.

* OmDocumentTerm ctor now takes wdf, and replaced set_wdf() with inc_wdf() and
  dec_wdf().

* Removed unused open_document() method from SubMatch and derived classes.

* Calls made by the matcher to Document::Internal::open_document() now use the
  lazy flag provided for precisely this purpose, but apparently never used -
  this should give quite a speed boost to any matcher options which use values
  (e.g. sort, collapse).

testsuite:

* Finished off support for running tests under valgrind to check for memory
  leaks and access to uninitialised variables.

* apitest: Sped up deldoc4.

* btreetest: Removed superfluous `/'s from constructed paths.

* quartztest: adddoc2 now checks that there weren't any extra values created.

backends:

* quartz: don't start the document's TermIterator from scratch on every
  iteration in replace_document().  Should be a small performance win.

* quartz: Pass 0 for the lexicon/postlist table when creating a termlist just
  to find the doc length.

* quartz: quartz_table_entries.cc: Removed rather unnecessary use of
  const_cast.

* quartz: quartz_table.cc: Removed unused variable.

* quartz: Improved encapsulation of class Btree.

build system:

* libbtreecheck.la now has an explicit dependency on libxapian.la.

* We now set the dependencies for libxapian correctly so that linking
  applications will pull in other required libraries.

* matcher/Makefile.am: Ship networkmatch.cc even if "make dist" is run from a
  tree with the remote backend disabled.

* configure.in: Sorted out tests for gethostbyname and gethostbyaddr using
  standard autoconf macros.

* configure.in: If fork is found, but socketpair isn't, automatically disable
  the remote backend rather than configure dying with an error.

* autoconf/: Removed various unused autoconf macros.

portability:

* xapian-config.in: Link with libxapianqueryparser before libxapian, since
  that's the dependency order.

* Removed or replaced uses of <iostream> and <iosfwd> in the library sources
  - we don't need or want the library to pull in cin and friends.

* extra/queryparser.yy: Fixed to build with Sun's C++ compiler.

* Make the dummy source file C++ rather than C so that automake tells libtool
  that this is a C++ library - vital for correct linking on some platforms.

* Makefile.am: Pass -no-undefined to libtool so that we can build build a DLL
  on MS Windows.

* configure.in: Fixed check for socketpair - we were automatically disabling
  the remote backend on platforms where socketpair is in libsocket
  (such as Solaris).

* Use O_BINARY for binary I/O if it exists.

* common/utils.h: mkdir() only takes one argument on mingw.

* common/utils.h,testsuite/backendmanager.cc: Touch file using open() rather
  than system().

* common/utils.cc: Fixed to compile if snprintf isn't available.

documentation:

* docs/scalability.html: Fixed slip (32GB should be 32TB);  Added note about
  Linux 2.4 and ext2 filesize limits.

* PLATFORMS: Updated.

* NEWS: Fixed a few typos.

bindings:

* xapian.i: using namespace std in SWIG parsed segment to sort out typemaps.

packaging:

* Updated RPM packaging.

omega:

* omega: $topdoc now ensures the match has been run; $date no longer ensures
  the match has been run.

* omega: Fixed to build with Sun's C++ compiler.

Xapian 0.7.3 (2003-08-08):

API:

* MSetIterator: Fixed MSetIterator::get_document() to work when get_mset() was
  called with first != 0 (regression test msetiterator3).

testsuite:

* internaltest: Changed test exception1 to actually test something (hopefully
  what was originally intended!)

* Added long option support to the testsuite programs (and quartzdump).

* Testsuite now builds on platforms for which we use our own stringstream
  implementation.

* Only use \r in test output if the output is a tty.

* Increased default timeout used by tests running on the remote backend from 10
  seconds to 5 minutes to avoid tests failing just because the machine running
  them is slow and/or busy.

* Fixed check for broken exception handling - we were getting "Xapian::"
  prefixed to one version and not on the other.

* tests/runtest: Set srcdir if it isn't already to make it easy to manually run
  test programs from a VPATH build.

* apitest: Check termfreq in allterms4.

backends:

* quartz: Fixed allterms TermIterator to not give duplicate terms when a
  posting list is chunked; added regression test (allterms4).

* quartz: Check for EINTR when reading or writing blocks and retry the
  operation.  This should mean quartz won't fail falsely if a signal is
  received (e.g. if alarm() is used).

build system:

* Renamed libomqueryparser to libxapianqueryparser - for backward compatibility
  we still provide a library with the old name for now.

* xapian.m4: Added XO_LIB_XAPIAN to replace OM_PATH_XAPIAN.  XO_LIB_XAPIAN will
  automagically enable use of "xapian-config --ltlibs" if A[CM]_PROG_LIBTOOL is
  used in configure.in.

* xapian-config: Now supports linking with libtool - using libtool means that
  the run-time library path is set and that you can now link with an
  uninstalled libxapian.  Also xapian-config will now work once xapian-core's
  configure has been run, rather than only after "make all".

* xapian-config: Now automatically tries to link libxapianqueryparser too.

* bootstrap: Removed bootstrap scripts in favour of top-level bootstrap which
  creates a top-level configure you can optionally use to configure all checked
  out Xapian modules with one command, and which creates a top level Makefile
  to build all checked out Xapian modules with one command.

* Added versioning information to libxapian and libxapianqueryparser.

* xapian-example/omega: Use libtool and XO_LIB_XAPIAN so we can link with an
  uninstalled Xapian, and so the run time load path gets built into the
  binaries (no need to set LD_LIBRARY_PATH just because you install Xapian with
  a non-standard prefix).

* configure: Stop the API documentation from being regenerated when
  include/xapian/version.h changes (since it's generated by configure).

* Fixed "make dist" in VPATH builds.

portability:

* common/getopt.h: #include <stdlib.h>, <stdio.h>, and <unistd.h> before
  defining getopt as a macro - this avoids problems with clobbering prototypes
  of getopt() in system headers.

* bin/quartzcompact.cc: Need stdio.h for rename().

* languages/Makefile.am: Fixed compilation for compilers other than GCC.

* Moved rset serialisation into a method of RSet::Internal, so
  omrset_to_string() is now just glue code.  This eliminates the need for it to
  be a friend of RSet::Internal which Sun's C++ compiler didn't seem to be able
  to cope with.

documentation:

* Fix incorrect documentation comment for Enquire::set_set_forward().  (Looked
  like a cut&paste error)

* COPYING: Updated FSF address, and reinstated missing section: "How to Apply
  These Terms to Your New Programs"

* PLATFORMS: Updated some linux results: RH7.3 on x86, and Debian on alpha and
  arm; Updated FreeBSD success report; Updated with results from the tinderbox.

* docs/mkdoc.pl: Don't choke on a comment at the end of the DIST_SUBDIRS line
  in a Makefile.am.

* HACKING: Improved note about why libtool 1.5 is needed.

* HACKING: Added note about additional tools needed for building a
  distribution.

bindings:

* Fixed VPATH builds.

* python: Fixed to link with libomqueryparser.

* guile,tcl8: Updated typemaps to SWIG 1.3 style.

omega:

* omindex.cc: Added missing `#include <errno.h>'.

* omindex/scriptindex: Fixed signed character issue in accent normalisation.

* omindex: fixed memory and file descriptor leak on indexing a zero-sized file.

* omindex: Fixed sense of test for unreadable files.

* omindex: Improved log messages to distinguish re-indexed/added.

* omindex,omega,scriptindex: Fixed to compile with mingw.

* omindex: Fixed to compile with GNU getopt so we can build on non-glibc
  platforms.

examples:

* msearch: Quick fix to get mingw building going.

* getopt: Copied over our fixes for better C++ compatibility.

* simplesearch: Stem search terms.

* simpleindex: Fixed not to run words together between lines.

* simpleindex: Create database if it doesn't exist.

Xapian 0.7.2 (2003-07-11):

testsuite:

* Fixed NULL pointer dereference when a test threw an unexpected exception.

backends:

* Quartz: When asked to create a quartz database, try to create the directory
  if it doesn't already exist.  Then we don't have to do it in every single
  Xapian program which wants to create a database...

portability:

* common/getopt.h: Fixed to work better with C++ compilers on non-glibc
  platforms.

* common/utils.h: missing #include <ctype.h>

* Quartz: Defined _XOPEN_SOURCE=500 for GLIBC so we get pread() and pwrite().

* common/utils.h: Improved mingw implementation of rmdir().

documentation:

* PLATFORMS: Added MacOS X 10.2 success report.

* Improvements to doxygen-generated documentation.

bindings:

* Moved to separate xapian-bindings module.

* Added configure check for SWIG version (require at least 1.3.14).

* bindings/swig/xapian.i: Fixed over-enthusiastic automatic conversion of
  termname to std::string.

* PHP4 bindings much closer to working once again; updated guile and tcl8
  somewhat.

omega:

* omega: If the same database is listed more than once, only search the first
  occurrence.

* omega: use snprintf to help guard against buffer overflows.

Xapian 0.7.1 (2003-07-08):

testsuite:

* Fixed testsuite programs to not try to use "rm -rf" under mingw.

backends:

* Quartz: Use pread() and pwrite() on platforms which support them.  Doing so
  avoids one syscall per block read/write.

* Quartz block count is now unsigned, which should nearly double the size of
  database for a given block size.  Not tested this yet.

omega:

* omindex: Fixed compilation problem in 0.7.0.

documentation:

* Added new document discussing scalability issues.

* PLATFORMS: Updated.

Xapian 0.7.0 (2003-07-03):

API:

* Moved everything into a Xapian namespace, which the main header now being
  xapian.h (rather than om/om.h).

* Three classes have been renamed for better naming consistency:
  OmOpeningError is now Xapian::DatabaseOpeningError, OmPostListIterator is
  now Xapian::PostingIterator, and OmPositionListIterator is now
  Xapian::PositionIterator.

* xapian.h includes <iosfwd> rather than <iostream> - if you were relying on
  the implicit inclusion, you'll need to add an explicit "#include <iostream>".

* Replaced om_termname with explicit use of std::string - om_termname was just
  a typedef for std::string and the typedef doesn't really buy us anything.

* Older code can be compiled by continuing to use om/om.h which uses #define
  and other tricks to map the old names onto the new ones.

* Define XAPIAN_VERSION (e.g. 0.7.0), XAPIAN_MAJOR_VERSION (e.g. 0), and
  XAPIAN_MINOR_VERSION (e.g. 7).

* Updated omega and xapian-examples to use Xapian namespace.

queryparser:

* Xapian::QueryParser: Accent normalisation added; Improved error reporting;
  Fixed to handle the most common examples found in the wild which used to give
  "parse error".

bindings:

* Python bindings brought up to date - use ./configure --enable-bindings to
  build them.  Requires Python >= 2.0 - may require Python >= 2.1.

* Enabled optional building of bindings as part of normal build process.  Old
  Perl and Java bindings dropped; for Perl, use Search::Xapian from CPAN; Java
  JNI bindings will be replaced with a SWIG-based implmentation.

internal implementation changes:

* Removed one wrapper layer from the internal implementation of most API
  classes.

* Xapian::Stem now uses reference counted internals.

* Internally a lot of cases of unnecessary header inclusion have been removed
  or replaced with forward declarations of classes.  This should speed up
  compilation and recompilation of the Xapian library.

* Suppress warnings in Snowball generated C code.

* Reworked query serialisation in the remote backend so that the code is now
  all in one place.  The serialisation is now rather more compact and no longer
  relies on flex for parsing.

testsuite:

* Moved all the core library tests to tests subdirectory.

* apitest now allows backend to be specified with "-b" rather than having to
  mess with environmental variables.

* Testsuite programs can now hook into valgrind for leak checking, undefined
  variable checking, etc.

backends:

* Fixed parsing of port number in remote stub databases.

* Quartz: Improved error message when asked to open a pre-0.6 Quartz database.

* Quartz backend: Workaround for shared_level problem turns out to
  be arguably the better approach, so made it permanent and tidied up
  code.

build system:

* Build system fixed to never leave partial files in place of the expected
  output if a build is interrupted.

* quartzcheck, quartzdump, and quartzcompact are now built by "make" rather
  than only by "make check".

* xapian-config: Removed --prefix and --exec-prefix - you can't reliably
  install Xapian with a different prefix to the one it was configured with,
  yet these options give the impression you can.

miscellaneous:

* Fixed sending debug output to a file with XAPIAN_DEBUG_LOG with a value which
  didn't contain "%%" (%% expands to the current PID).

* Fixed Xapian::MSetIterator::get_collapse_count() to work as intended.

omega:

* omindex,scriptindex: Normalise accents in probabilistic terms.

* omindex: Read output from pstotext and pdftotext via pipes rather
  than temporary files to side-step the whole problem of secure temporary file
  creation; Use pdfinfo to get the title and keywords from when indexing a PDF;
  Safe filename escaping tweaked to not escape common safe punctuation.

* omindex: Implement an upper limit on the length of URL terms - this is a
  slightly conservative 240 characters.  If the URL term would be longer than
  this, its last few bytes are replaced by a hash of the tail of the URL.  This
  means that (apart from hopefully very rare collisions) urlterms should still
  be unique ids for documents.  This is forward and backward compatible for
  URLs less than 240 characters.

* omindex: Clean up processing of HTML documents:
  - Ignore the contents of <script> and <style> tags in HTML.
  - Strip initial whitespace in each tag in an HTML document.
  - Try not to split words in half when truncating title and summary.

* query.cc: Set STEM_LANGUAGE near the start of the file so it's easy
  for users to change until we get better configurability.

* omega: Replaced half-hearted logging support with flexible OmegaScript-based
  approach with new $log command.  Also added $now to allow the current
  date/time to be logged.

* templates/xml: added collapse info to xml template.

documentation:

* Assorted minor documentation improvements.

* PLATFORMS: Updated.

rpms:

* Improved RPM packaging of xapian-core and omega.

Xapian 0.6.5 (2003-04-10):

* OmEnquire: optimised the handling when sort_bands == 1 and fixed incorrect
  results in this and some other sorting cases; added some sorting testcases.

* OmMSetIterator: added get_collapse_count() which returns a lower bound on
  the number of items which were removed by collapsing onto the current item.

* OmStem: added default OmStem constructor and "none" language.  Both of these
  give a stemmer object which leaves terms unchanged which should allow for
  simpler logic in programs using Xapian.  The default constructor also removes
  the need to mess with pointers in some cases.

* Automatically disable the remote backend if we don't have fork() since the
  remote backend requires it in several places.

* Fixed to build with debug enabled.

* testsuite: fixed to still build when some backends are disabled.

* extra/parsequerytest.cc: Fixed to build with GCC 2.95.

* Testsuite: Added regression test for Quartz bug which caused problems with
  long terms on machines with signed chars.

* testsuite/index_utils.cc: Handling of ^x was just downright wrong due to a
  typo.

* Improved portability: Fix for 64 bit machines.  Fixed btreetest to build with
  older compilers lacking <sstream>.  Xapian is now much closer to building
  with Sun's CFront-based Sun Pro C++ compiler, and with a Linux to mingw
  cross-compiler.

* PLATFORMS: Updated with the results of many test builds.

* Improved RPM packaging of xapian-core and omega.

* Documentation: Use http://www.doxygen.org/ as URL for doxygen; Fixed bad link
  to our own website in overview.html; code_structure.html now only includes
  directories in the build system.

* HACKING: updated.

* Removed bugs/todo.xml, TODO, TODO.release, docs/todo.html, and
  docs/todo-release.html from the distribution.  Bugs and todo items will be
  tracked in Bugzilla instead.

* Install docs in /usr/share/doc/xapian-core instead of /usr/share/xapian-core.

* omega: If xP and P are both empty, there may be a boolean query, so don't
  force first page of hits.

* omega: Fixed off-by-one error in rounding down topdoc - it was possible to
  get to an empty page of hits if there were exactly a multiple of HITSPERPAGE
  matches and the matcher over-estimated the number of matches and Omega
  displayed page links.

* omega: Fixed handling of multiple DB parameters to be as documented.

* omega: Added $collapsed to report get_collapse_count() for the current hit.

* omega: Added $transform{} which does regexp manipulation (currently disabled
  until configure tests for regexp library are added)

* omega: Added $uniq{} to eliminate duplicates from a sorted list.

* omega: Don't force page 1 for a query with repeated terms!

* omega: removed duplicates from terms listed in term frequencies.

* omega: Added cgi parameter COLLAPSE to collapse on key values

* omega: Added $value{key[,docid]} support to omegascript

* omega: Renamed DATE1, DATE2, and DAYSMINUS to the more meaningful START, END,
  and SPAN (NB SPAN is days before END, or after START, or before today -
  whereas SPAN was before *DATE1* or before today).  The old parameters names
  are supported (with the original semantics) for now.

* omega: Actually install documentation!

* templates/query: propagate B boolean filters

* templates/godmode: removed link to EuroFerret image

* templates/godmode: added value dumping, for values from 0-255

* omindex: Report correct version number (was hard-wired to 1.0!)

* scriptindex: Allow '_' in fieldnames.  Diagnose bad characters in fieldnames
  better.

* dbi2omega: Added DBUSER and DBPASSWD environmental variable support so that
  password protected DBs can easily be used

* scriptindex.cc: added missing "#include <stdio.h>" which caused builds
  to fail for some platforms.

Xapian 0.6.4 (2002-12-24):

* Quartz backend: Fixed double setting of position list when updating a
  document with term position information (overall result was correct, just
  inefficient); when deleting a position_list, don't check if it's empty,
  just ask the layer below to delete it and let it handle the case when
  there's nothing to delete; Fixed unpacking of termlist on platforms where
  char is signed.

* OmQueryParser: Added support for searching probabilistic fields (using
  <field>:<term>); the unstem multimap now includes "." on the end of a
  term if it was there in the query.

* Don't include "om.h" as a dependency for the api docs since it's generated
  a configure time and the dependency was forcing users to regenerate the
  documentation, which requires doxygen to be installed.

* Bindings: Python bindings updated to work with the updated API (still
  disabled by default).

* Muscat 3.6 backend: Fixed to build with the new database factory functions;
  fixed compilation warnings; Muscat 3.6 DA and DB databases don't support
  positional information.  Instead of throwing an exception when we try to
  access it, return an empty position list (like a quartz database with no
  position information would).  This allows copydatabase to be used to convert
  a Muscat 3.6 database to a quartz one.

* Documentation: quartzdesign and todo list updated.

* quartzcheck: default mode changed to "v" rather than "+", since "+" is too
  verbose for a btree of any size; if you pass a quartz database directory,
  quartzcheck will now check all the tables which make up a quartz database.

* quartzcompact: new tool which makes a copy of a quartz database with full
  compaction turned on - this results in a smaller database which is faster
  to search.  The next update will result in a lot of block splitting though
  (since all blocks are as full as possible).

* omega: Added $unstem to map a stemmed term to the form(s) used in the query;
  $queryterms now only includes the first occurrence of each stemmed form;
  $prettyterm makes use of the unstem map; prefer MINHITS to MIN_HITS and
  RAWSEARCH to RAW_SEARCH since none of the other CGI parameter names have
  _ separating words (continue to support old names for now); fixed default
  template to not generate topterms twice, and fixed topterms to not stick
  outside the green box; corrected omegascript docs - it's $setrelevant
  not $set_relevant.

* scriptindex: index=nopos with new indexnopos action; index and indexnopos now
  take an optional prefix argument; index=nopos is handled specially for
  backwards compatibility; added new data action to generate terms for date
  range searching.

Xapian 0.6.3 (2002-12-14):

* Updated PLATFORMS and todo list.  Noted in HACKING that Bison 1.50 seems to
  work with Xapian.

* OmQueryParser now creates an "unstem" multimap to allow probabilistic
  query terms to be converted back to the form the user originally typed.

* Updated documentation for remote protocol description and the quickstart
  tutorial which were both very out of date.

* No longer use OmSettings to pass matcher parameters.  This completes the
  removal of OmSettings.

* Added workaround for problem with cursors sharing levels in the btree.
  This should fix sporadic problems with large databases (small databases
  have fewer btree levels so aren't affected).

* Stub databases now work again, though with a different format.  The new
  format allows multiple databases to be specified in the stub file.

* OmEnquire::get_eset() now takes a flags argument of bit constants |-ed
  together instead of 2 bools.

* Applied Martin Porter's better fix for the btree sequential addition bug
  which Richard fixed a few months ago.  Richard's fix resulted in a correct
  btree, but didn't always utilise space as efficiently as possible.

* Fixed the remote backend to handle weighting schemes after the OmSettings
  changes.  You can now even implement your own weighting scheme and use it
  with the remote backend provided you register it with SocketServer at
  runtime (this feature has been on the todo list for ages).

Xapian 0.6.2 (2002-12-07):

* Set env var XAPIAN_SIG_DFL to stop the testsuite installing its
  signal handler (may be useful with some debugging tools).

* backends/quartz/btree.cc: max_item_size wasn't being set due to
  some over-zealous code pruning.  It was defaulting to 0, and
  was causing the code to write off the end of allocated memory
  blocks.

* matcher/localmatch.cc: fixed handling of wtscheme() - we were
  trying to use it for the extra weights, and then double
  deleting it!

* common/omdebug.cc,common/omdebug.h: Fixed permissions on newly
  created log file (was getting 000!); Simplified class internals;
  Renamed env vars: OM_DEBUG_FILE is now XAPIAN_DEBUG_LOG,
  OM_DEBUG_TYPES is now XAPIAN_DEBUG_FLAGS (old versions still work
  for now).

* testsuite/testsuite.cc: Fixed so running "gdb .libs/apitest"
  finds srcdir (for an in-tree build at least).

* Fixed to compile with --enable-debug=full.

* docs/remote.html: Updated from OmSettings to factory functions.

* PLATFORMS: ixion is actually Linux 2.2.

* OmWritableDatabase now has a default constructor.

* Weighting scheme now specified by passing OmWeight object to OmEnquire.
  This also allows user weighting schemes (just subclass OmWeight and
  pass in an instance of this new class).  [This doesn't currently work
  with the remote backend.]

* No longer use OmSettings to specify parameters for constructing databases.
  Instead there's a factory function for each database type - temporary naming
  scheme is OmXxx__open(), mostly because it's easy to grep for later.
  Instead of create and overwrite flags, we pass in a value - a new possible
  opening mode is "create or open".  [At present stub databases and the
  machinery in InMemory to allow the multierrhandler1 test aren't working.
  Everything else should be.]

* OmEnquire::get_eset() takes parameters instead of an OmSettings object.

* Fixed reversed sense of use_query_terms (and fixed reversed sense test in
  apitest which meant this wasn't spotted).

* Documentation: Link to annotated class lists in doxygen generated
  documentation instead of the rather empty index pages; added doxygen
  markup so that apidoc now documents header files; updated todo list.

* Documentation: intro doc thing was very out of date in places - fixed.

* Omega: index .php files as HTML, with the PHP code stripped out; omindex
  return non-zero return code if an unexpected exception is caught; fixed
  HTML parser to not read one character past the end of the document in
  some cases; updated in line with OmSettings related changes to the API;
  Fixed $dbname to return "default" for the default database instead of "";
  templates/query: Removed now unused xDEFAULTOP hidden field, and superfluous
  "}"; dbi2omega now more efficient and can be restricted to listed fields.

Xapian 0.6.1 (2002-11-28):

* Fixed to compile with GCC 3.0.

* PLATFORMS: Updated.

Xapian 0.6.0 (2002-11-27):

* Quartz database backend: lexicon disabled (./configure CXXFLAGS=-DUSE_LEXICON
  to reenable it), and encoding schemes simplified and made more compact;
  extended and added test cases; minimum block size is now 2048 bytes (as
  documented before, but now we actually enforce this); btree checking code
  split off and only linked in when required; tidied up btreetest's output.

* Replaced our stemmers with those from Snowball.  These give better results,
  and are actively maintained by Martin Porter (who wrote the original Xapian
  stemmers too).  It also means that Xapian now has stemmers for Finnish,
  and Russian, and an implementation of Lovins' English stemmer.

* Assorted improvements to the documentation, especially the documentation
  of the internals of the Quartz backend.

* Removed the three uses of RTTI (typeid() and dynamic_cast<>) - one was
  totally superfluous, and the other two easily avoided.

* Omega and simpleindex example: limit probabilistic term length to 64
  characters to stop the index filling up with junk terms which nobody will
  ever search for.

* Omega: Added dbi2omega perl script to dump any database which perl DBI can
  access into the dump format expected by scriptindex.

Xapian 0.5.5 (2002-12-04):

* Fixed compilation with --enable-debug.

* Minor documentation updates.

* Omega: Fixed paging on default database; removed xDEFAULTOP from the query
  template as it's no longer used; removed bogus unmatched '}' from query
  template; added dbi2omega perl script to dump any database which perl DBI
  can access into the dump format expected by scriptindex; limit length of
  probabilistic terms generated to 64 characters.

Xapian 0.5.4 (2002-10-16):

* Fixed a compilation error with "make check" when using GCC 3.2.

* PLATFORMS: checked 0.5.3 works on OpenBSD and Solaris 7.

Xapian 0.5.3 (2002-10-12):

Notable changes: Improvements to the test suite, and internal code cleanups:

* Internal code cleanups on Quartz Btree implementation.

* Minor documentation updates (TODO and PLATFORMS updated; Martin Porter's
  stemming paper removed - see the Snowball site for background stemmer
  info).

* Implemented QuartzAllTermsList::get_approx_size().

* Removed a couple of occurrences of "using std::XXX;" from externally
  visible headers.

* With GCC, add warning flags "-Wall -W" rather than "-Wall -Wunused" (-Wall
  implies -Wunused anyway).  Fixed all the warnings this throws up, except in
  languages/ (that code is to be replaced with Snowball soon).

* Test suite: Disable colour test output if stdout isn't a terminal and
  reworked check for broken exception handling as the previous  version never
  seemed to fire.  Other assorted minor improvements.

* include/om/om.h is now removed on "make distclean" rather than "make clean".

Xapian 0.5.2 (2002-10-06):

Further improvements to documentation and portability:

* docs/: converted all text docs to HTML (except omsettings which will
  has odd markup (LaTeX?) and will probably soon be obsolete anyway).

* remote backend: Fixed handling of timeouts which are now in the past - fixes
  test failures with redhat/x86.

* quartz backend: now works on 64 bit platforms.

* test suite: try to spot mishandled exceptions and stop them causing bogus
  OMEXCEPT failures.

Xapian 0.5.1 (2002-10-02):

This release fixes features improved documentation and some build system
portability fixes.

* PLATFORMS: updated with more test results.

* docs/: tidied up layout of HTML documentation; converted the notes about
  BM25 into HTML; updated stemmer docs to reflect intention to use Snowball
  instead; included HTML versions of quickstart*.cc.

* automake 1.6.3 and autoconf 2.54 are now required for those working
  from CVS to fix a problem with the generated Makefiles and Solaris
  make.

* net/Makefile.am: Fixed building of readquery.cc from readquery.ll.

* buildall script is now deprecated - use the new streamlined bootstrap script
  in preference.

Xapian 0.5.0 (2002-09-20):

The last release of the software that is now known as Xapian was OmSee 0.4.1 on
November 24th 2000, not far from 2 years ago.

There's been a significant amount of development in this time, so we've
summarised the most notable changes and improvements:

  * The project is now called "Xapian". We've renamed the modules in the light
    of this change:

      + "om" is now "xapian-core"
      + "om-examples" is now "xapian-examples", and now contains small,
	instructive examples which demonstrate how to use Xapian to implement
	particularly features.
      + Added "xapian-applications" which contains larger sample applications

  * Much improved build system - should now build "out of the box" on many Unix
    platforms. Can now VPATH build with vendor tools on most platforms. Builds
    as cleanly as we can achieve with GCC 2.95.* (some bogus warnings due to
    compiler bugs). Should build without warnings on GCC 3.0, 3.1, and 3.2.

  * If using GCC, om/om.h now contains a check that the compiler used to build
    Xapian and the compiler used to build the application have compatible C++
    ABIs. So you get a clear error message early from the first attempt to
    compile a file rather than a confusing error from the linker near the end
    of the build.

  * RPM packages are now available. We intend to prepare Debian packages in the
    near future too.

  * xapian-config no longer support "--uninst". It's hard to make this work
    reliably and portably, and the effort is better expended elsewhere.
    Configure with a prefix and install to a temporary directory instead.

  * Xapian can now work with files > 2Gb on OSes which support them.

  * Restructured and reworked documentation.

  * Removed thread locks. We intend to be "thread-friendly" so different
    threads can access different objects without problems. In the rare event
    that you want to concurrently call methods on the same object from
    different threads you need to create a mutex and lock it. Thus the thread
    lock overhead is only incurred when it's necessary.

  * Indexgraph removed from core library. It will reappear as an add-on library
    at some point.

  * Omega's query parser has now been reworked as a separate library.

  * Terminology change - "keys" are now known as "values" to avoid confusion,
    since they're not like keys in a relational database. The exception is when
    a value is used as a key in some operation, e.g. "match_collapse_key".

  * Database backends:

      + Auto backend: can now be used to create a new database.
      + Auto backend: added support for "stub" databases - a text file
	specifying the settings for the database to be opened (particularly
	useful for allowing easy access to specific remote databases).
      + Quartz backend: many fixes and improvements, and the code has been
	cleaned up a lot. Implemented deleting of items from postlists.
      + Remote backend: implemented term_exists() and get_termfreq();
      + Multi-backend: the document length is now fetched from the sub-postlist
	rather than the database, which provides a huge speed-up in some cases.
      + Sleepycat backend: this experimental backend has been removed.
      + Muscat 3.6 backends: now disabled by default.

  * Tests:

      + Test cases added for most bug fixes and new features.
      + stemtest: rewritten in C++ rather than part C++, part perl. Now 15%
	faster.
      + includetest: removed - it's no longer useful now the code has matured.
      + Removed problematic leak checking from testsuite. We plan to use
	valgrind instead soon.

  * Matcher:

      + Fixed several matcher bugs which could cause incorrect results in some
	situations.
      + Fix bug in expander due to nth_element being called on the wrong
	element.
      + Added sorting within relevance bands to the matcher.
      + Matcher now calculates percentages differently, such that 100%
	relevance is actually achievable.
      + Matcher now uses a min-heap rather than nth-element to maintain the
	proto-mset. This is cleaner and more efficient.
      + New operator OP_ELITE_SET replaces match_max_or_terms option.
      + Implemented multiple XOR queries.
      + Add a new query operator, OP_WEIGHT_CUTOFF, which returns only those
	documents from a query which have a weight greater than a specified
	cutoff value.
      + Removed OmBatchEnquire from system: it may return at a later date, but
	for now it is simply out of date and a maintenance liability, and
	gives no significant advantage.
      + Added experimental match bias functors.

  * The API has been cleaned up in various places:

      + OmDocumentContents and OmIndexDoc merged to become OmDocument
      + OmQuery interface cleaned up
      + OmData and OmKey removed - methods which used them now just pass a
	string instead
      + OmESetItem replaced by OmESetIterator; OmMSetItem by OmMSetIterator;
	om_termname_list by OmTermIterator
      + OmDocumentTerm and OmDocumentParams removed
      + OmMSet::mbound replaced by OmMSet::matches_
	{lower_bound,estimated,upper_bound}, giving more information
      + Xapian iterators now have default constructors
      + Most API classes now have reference counted internals, so assignment
	and copying are cheap
      + OmStem now has copy constructor and assignment operator
      + and more...
