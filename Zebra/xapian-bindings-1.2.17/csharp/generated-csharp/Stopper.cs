/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Xapian {

using System;
using System.Runtime.InteropServices;

public class Stopper : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Stopper(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Stopper obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Stopper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XapianPINVOKE.delete_Stopper(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual bool Apply(string term) {
    bool ret = XapianPINVOKE.Stopper_Apply(swigCPtr, term);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetDescription() {
    string ret = (SwigDerivedClassHasMethod("GetDescription", swigMethodTypes1) ? XapianPINVOKE.Stopper_GetDescriptionSwigExplicitStopper(swigCPtr) : XapianPINVOKE.Stopper_GetDescription(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Stopper() : this(XapianPINVOKE.new_Stopper(), true) {
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Apply", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateStopper_0(SwigDirectorApply);
    if (SwigDerivedClassHasMethod("GetDescription", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateStopper_1(SwigDirectorGetDescription);
    XapianPINVOKE.Stopper_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Stopper));
    return hasDerivedMethod;
  }

  private bool SwigDirectorApply(string term) {
    return Apply(term);
  }

  private string SwigDirectorGetDescription() {
    return GetDescription();
  }

  public delegate bool SwigDelegateStopper_0(string term);
  public delegate string SwigDelegateStopper_1();

  private SwigDelegateStopper_0 swigDelegate0;
  private SwigDelegateStopper_1 swigDelegate1;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes1 = new Type[] {  };
}

}
