/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Xapian {

using System;
using System.Runtime.InteropServices;

public class ValuePostingSource : PostingSource {
  private HandleRef swigCPtr;

  internal ValuePostingSource(IntPtr cPtr, bool cMemoryOwn) : base(XapianPINVOKE.ValuePostingSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ValuePostingSource obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ValuePostingSource() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XapianPINVOKE.delete_ValuePostingSource(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ValuePostingSource(uint slot_) : this(XapianPINVOKE.new_ValuePostingSource(slot_), true) {
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetTermfreqMin() {
    uint ret = XapianPINVOKE.ValuePostingSource_GetTermfreqMin(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetTermfreqEst() {
    uint ret = XapianPINVOKE.ValuePostingSource_GetTermfreqEst(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetTermfreqMax() {
    uint ret = XapianPINVOKE.ValuePostingSource_GetTermfreqMax(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Next(double min_wt) {
    XapianPINVOKE.ValuePostingSource_Next(swigCPtr, min_wt);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SkipTo(uint min_docid, double min_wt) {
    XapianPINVOKE.ValuePostingSource_SkipTo(swigCPtr, min_docid, min_wt);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Check(uint min_docid, double min_wt) {
    bool ret = XapianPINVOKE.ValuePostingSource_Check(swigCPtr, min_docid, min_wt);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AtEnd() {
    bool ret = XapianPINVOKE.ValuePostingSource_AtEnd(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetDocId() {
    uint ret = XapianPINVOKE.ValuePostingSource_GetDocId(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Init(Database db_) {
    XapianPINVOKE.ValuePostingSource_Init(swigCPtr, Database.getCPtr(db_));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
