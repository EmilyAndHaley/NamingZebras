/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Xapian {

using System;
using System.Runtime.InteropServices;

public class MSet : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MSet(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MSet obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MSet() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XapianPINVOKE.delete_MSet(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public MSet() : this(XapianPINVOKE.new_MSet__SWIG_0(), true) {
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public MSet(MSet other) : this(XapianPINVOKE.new_MSet__SWIG_1(MSet.getCPtr(other)), true) {
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Fetch(MSetIterator begin, MSetIterator end) {
    XapianPINVOKE.MSet_Fetch__SWIG_0(swigCPtr, MSetIterator.getCPtr(begin), MSetIterator.getCPtr(end));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Fetch(MSetIterator item) {
    XapianPINVOKE.MSet_Fetch__SWIG_1(swigCPtr, MSetIterator.getCPtr(item));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Fetch() {
    XapianPINVOKE.MSet_Fetch__SWIG_2(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public int ConvertToPercent(double wt) {
    int ret = XapianPINVOKE.MSet_ConvertToPercent__SWIG_0(swigCPtr, wt);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int ConvertToPercent(MSetIterator item) {
    int ret = XapianPINVOKE.MSet_ConvertToPercent__SWIG_1(swigCPtr, MSetIterator.getCPtr(item));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetTermFreq(string tname) {
    uint ret = XapianPINVOKE.MSet_GetTermFreq(swigCPtr, tname);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTermWeight(string tname) {
    double ret = XapianPINVOKE.MSet_GetTermWeight(swigCPtr, tname);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetFirstItem() {
    uint ret = XapianPINVOKE.MSet_GetFirstItem(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetMatchesLowerBound() {
    uint ret = XapianPINVOKE.MSet_GetMatchesLowerBound(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetMatchesEstimated() {
    uint ret = XapianPINVOKE.MSet_GetMatchesEstimated(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetMatchesUpperBound() {
    uint ret = XapianPINVOKE.MSet_GetMatchesUpperBound(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetUncollapsedMatchesLowerBound() {
    uint ret = XapianPINVOKE.MSet_GetUncollapsedMatchesLowerBound(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetUncollapsedMatchesEstimated() {
    uint ret = XapianPINVOKE.MSet_GetUncollapsedMatchesEstimated(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetUncollapsedMatchesUpperBound() {
    uint ret = XapianPINVOKE.MSet_GetUncollapsedMatchesUpperBound(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMaxPossible() {
    double ret = XapianPINVOKE.MSet_GetMaxPossible(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMaxAttained() {
    double ret = XapianPINVOKE.MSet_GetMaxAttained(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Size() {
    uint ret = XapianPINVOKE.MSet_Size(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Empty() {
    bool ret = XapianPINVOKE.MSet_Empty(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MSetIterator Begin() {
    MSetIterator ret = new MSetIterator(XapianPINVOKE.MSet_Begin(swigCPtr), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MSetIterator End() {
    MSetIterator ret = new MSetIterator(XapianPINVOKE.MSet_End(swigCPtr), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MSetIterator Back() {
    MSetIterator ret = new MSetIterator(XapianPINVOKE.MSet_Back(swigCPtr), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MSetIterator GetHit(uint i) {
    MSetIterator ret = new MSetIterator(XapianPINVOKE.MSet_GetHit(swigCPtr, i), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetDocumentPercentage(uint i) {
    int ret = XapianPINVOKE.MSet_GetDocumentPercentage(swigCPtr, i);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Document GetDocument(uint i) {
    Document ret = new Document(XapianPINVOKE.MSet_GetDocument(swigCPtr, i), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetDocId(uint i) {
    uint ret = XapianPINVOKE.MSet_GetDocId(swigCPtr, i);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetDescription() {
    string ret = XapianPINVOKE.MSet_GetDescription(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
