/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Xapian {

using System;
using System.Runtime.InteropServices;

public class Compactor : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Compactor(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Compactor obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Compactor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XapianPINVOKE.delete_Compactor(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Compactor() : this(XapianPINVOKE.new_Compactor(), true) {
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public void SetBlockSize(uint block_size) {
    XapianPINVOKE.Compactor_SetBlockSize(swigCPtr, block_size);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRenumber(bool renumber) {
    XapianPINVOKE.Compactor_SetRenumber(swigCPtr, renumber);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMultipass(bool multipass) {
    XapianPINVOKE.Compactor_SetMultipass(swigCPtr, multipass);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCompactionLevel(Compactor.compaction_level compaction) {
    XapianPINVOKE.Compactor_SetCompactionLevel(swigCPtr, (int)compaction);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDestdir(string destdir) {
    XapianPINVOKE.Compactor_SetDestdir(swigCPtr, destdir);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddSource(string srcdir) {
    XapianPINVOKE.Compactor_AddSource(swigCPtr, srcdir);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Compact() {
    XapianPINVOKE.Compactor_Compact(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetStatus(string table, string status) {
    if (SwigDerivedClassHasMethod("SetStatus", swigMethodTypes0)) XapianPINVOKE.Compactor_SetStatusSwigExplicitCompactor(swigCPtr, table, status); else XapianPINVOKE.Compactor_SetStatus(swigCPtr, table, status);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string ResolveDuplicateMetadata(string key, uint num_tags, SWIGTYPE_p_std__string tags) {
    string ret = (SwigDerivedClassHasMethod("ResolveDuplicateMetadata", swigMethodTypes1) ? XapianPINVOKE.Compactor_ResolveDuplicateMetadataSwigExplicitCompactor(swigCPtr, key, num_tags, SWIGTYPE_p_std__string.getCPtr(tags)) : XapianPINVOKE.Compactor_ResolveDuplicateMetadata(swigCPtr, key, num_tags, SWIGTYPE_p_std__string.getCPtr(tags)));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("SetStatus", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCompactor_0(SwigDirectorSetStatus);
    if (SwigDerivedClassHasMethod("ResolveDuplicateMetadata", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateCompactor_1(SwigDirectorResolveDuplicateMetadata);
    XapianPINVOKE.Compactor_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Compactor));
    return hasDerivedMethod;
  }

  private void SwigDirectorSetStatus(string table, string status) {
    SetStatus(table, status);
  }

  private string SwigDirectorResolveDuplicateMetadata(string key, uint num_tags, IntPtr tags) {
    return ResolveDuplicateMetadata(key, num_tags, (tags == IntPtr.Zero) ? null : new SWIGTYPE_p_std__string(tags, false));
  }

  public delegate void SwigDelegateCompactor_0(string table, string status);
  public delegate string SwigDelegateCompactor_1(string key, uint num_tags, IntPtr tags);

  private SwigDelegateCompactor_0 swigDelegate0;
  private SwigDelegateCompactor_1 swigDelegate1;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string), typeof(string) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(string), typeof(uint), typeof(SWIGTYPE_p_std__string) };
  public enum compaction_level {
    STANDARD,
    FULL,
    FULLER
  }

}

}
