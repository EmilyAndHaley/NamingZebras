/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.xapian;

public class Compactor {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public Compactor(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(Compactor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        XapianJNI.delete_Compactor(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    XapianJNI.Compactor_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    XapianJNI.Compactor_change_ownership(this, swigCPtr, true);
  }

  public Compactor() {
    this(XapianJNI.new_Compactor(), true);
    XapianJNI.Compactor_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public void setBlockSize(long block_size) {
    XapianJNI.Compactor_setBlockSize(swigCPtr, this, block_size);
  }

  public void setRenumber(boolean renumber) {
    XapianJNI.Compactor_setRenumber(swigCPtr, this, renumber);
  }

  public void setMultipass(boolean multipass) {
    XapianJNI.Compactor_setMultipass(swigCPtr, this, multipass);
  }

  public void setCompactionLevel(Compactor.compaction_level compaction) {
    XapianJNI.Compactor_setCompactionLevel(swigCPtr, this, compaction.swigValue());
  }

  public void setDestdir(String destdir) {
    XapianJNI.Compactor_setDestdir(swigCPtr, this, destdir);
  }

  public void addSource(String srcdir) {
    XapianJNI.Compactor_addSource(swigCPtr, this, srcdir);
  }

  public void compact() {
    XapianJNI.Compactor_compact(swigCPtr, this);
  }

  public void setStatus(String table, String status) {
    if (getClass() == Compactor.class) XapianJNI.Compactor_setStatus(swigCPtr, this, table, status); else XapianJNI.Compactor_setStatusSwigExplicitCompactor(swigCPtr, this, table, status);
  }

  public String resolveDuplicateMetadata(String key, long num_tags, SWIGTYPE_p_std__string tags) {
    return (getClass() == Compactor.class) ? XapianJNI.Compactor_resolveDuplicateMetadata(swigCPtr, this, key, num_tags, SWIGTYPE_p_std__string.getCPtr(tags)) : XapianJNI.Compactor_resolveDuplicateMetadataSwigExplicitCompactor(swigCPtr, this, key, num_tags, SWIGTYPE_p_std__string.getCPtr(tags));
  }

  public final static class compaction_level {
    public final static Compactor.compaction_level STANDARD = new Compactor.compaction_level("STANDARD");
    public final static Compactor.compaction_level FULL = new Compactor.compaction_level("FULL");
    public final static Compactor.compaction_level FULLER = new Compactor.compaction_level("FULLER");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static compaction_level swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + compaction_level.class + " with value " + swigValue);
    }

    private compaction_level(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private compaction_level(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private compaction_level(String swigName, compaction_level swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static compaction_level[] swigValues = { STANDARD, FULL, FULLER };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
