# generate-perl-exceptions: generate error handling code for Perl bindings
#
# Copyright (C) 2003,2004,2006,2007,2008,2011 Olly Betts
# Copyright (C) 2007 Richard Boulton
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

use strict;
use exception_data;

my @allclasses = (@baseclasses, @classes);

open FD, ">except.i" or die $!;

print FD <<"EOF";
/* perl/except.i: Custom Perl exception handling.
 * Warning: This file is generated by $0
 * - do not modify directly!
 *
 * Copyright 2007 Lemur Consulting Ltd
 * Copyright 2007,2011 Olly Betts
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 */
EOF

print FD <<'EOF';
namespace Xapian {

%exceptionclass Error;
EOF

for (@allclasses) {
    my ($class, $parent, $comment) = split /\t/, $_, 3;
    print FD "%exceptionclass $class;\n";
}

print FD <<'EOF';
}
%include "xapian/error.h"

%{
namespace Xapian {
void handle_exception() {
    try {
	throw;
EOF

for (reverse @allclasses) {
    my ($class, $parent, $comment) = split /\t/, $_, 3;
    print FD <<"EOF";
    } catch (const Xapian::$class &e) {
	SV * errsv = get_sv("@", TRUE);
	sv_setref_pv(errsv, "Search::Xapian::$class", (void *) new Xapian::$class(e));
        croak(Nullch);
EOF
}

print FD <<'EOF';
    } catch (const std::exception& e) {
        croak( "std::exception: %s", e.what());
    } catch (...) {
        croak("something terrible happened");
    }
}
};
%}

%exception {
    try {
	$action
    } catch (...) {
	Xapian::handle_exception();
	SWIG_fail;
    }
}
EOF

close FD or die $!;
